[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "IS415",
    "section": "",
    "text": "Welcome to my IS415 website, dedicated to the fascinating world of Geospatial Analytics. This site showcases all my exercise results and research conducted throughout the course.\n\n\n\nGeospatial Analytics involves the analysis and interpretation of data related to geographic locations. By using various tools and techniques, we can derive meaningful insights from spatial data, enabling better decision-making in various fields like urban planning, environmental monitoring, and logistics.\n\n\n\nThis website showcases all my R coding exercises, each illustrating various aspects of geospatial analysis, from data collection to visualization.\n\n\n\nMy research in this course focuses on various applications of geospatial analytics. Below, you can find my in-depth research projects.\n\n\n\nFeel free to reach out if you have any questions or comments about my work.\n\nThank you for visiting my IS415 website!"
  },
  {
    "objectID": "index.html#course-overview",
    "href": "index.html#course-overview",
    "title": "IS415",
    "section": "",
    "text": "Welcome to my IS415 website, dedicated to the fascinating world of Geospatial Analytics. This site showcases all my exercise results and research conducted throughout the course."
  },
  {
    "objectID": "index.html#about-geospatial-analytics",
    "href": "index.html#about-geospatial-analytics",
    "title": "IS415",
    "section": "",
    "text": "Geospatial Analytics involves the analysis and interpretation of data related to geographic locations. By using various tools and techniques, we can derive meaningful insights from spatial data, enabling better decision-making in various fields like urban planning, environmental monitoring, and logistics."
  },
  {
    "objectID": "index.html#exercises-and-results",
    "href": "index.html#exercises-and-results",
    "title": "IS415",
    "section": "",
    "text": "This website showcases all my R coding exercises, each illustrating various aspects of geospatial analysis, from data collection to visualization."
  },
  {
    "objectID": "index.html#research",
    "href": "index.html#research",
    "title": "IS415",
    "section": "",
    "text": "My research in this course focuses on various applications of geospatial analytics. Below, you can find my in-depth research projects."
  },
  {
    "objectID": "index.html#contact",
    "href": "index.html#contact",
    "title": "IS415",
    "section": "",
    "text": "Feel free to reach out if you have any questions or comments about my work.\n\nThank you for visiting my IS415 website!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "1 Learning Outcome\nGeospatial Data Science involves the process of importing, wrangling, integrating, and analyzing geographically referenced datasets. In this hands-on exercise, I have learned how to perform geospatial data science tasks in R using the sf package, which provides powerful tools for working with spatial data.\n\n\n2 Data Acquisition\nData is the foundation of any analytical task, including geospatial analysis. Therefore, before diving into analysis, I first gathered the necessary datasets. In this exercise, I have acquired the following data:\n\nMaster Plan 2014 Subzone Boundary from data.gov.sg\nPre-Schools Location from data.gov.sg\nCycling Path data from LTA DataMall\nThe latest version of Singapore Airbnb listing data from Inside Airbnb\n\n\n\n3 Getting Started\nBefore importing and working with geospatial data, I ensured that the necessary packages were loaded. The following command uses pacman::p_load() to load or install the required R packages: sf for spatial data handling and tidyverse for data manipulation.\n\npacman::p_load(sf, tidyverse)\n\n\n\n4 Importing Geospatial Data\nNext, I imported the geospatial data into R as sf objects, which are data frames that include spatial information. - Master Plan 2014 Subzone Boundary: The st_read() function is used to read spatial data. Here, I specified the data source directory (dsn) and the specific layer to be loaded.\n\nmpsz = st_read(dsn = \"data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP\", \n                  layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\EasonXu-HY99\\IS415\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial\\MasterPlan2014SubzoneBoundaryWebSHP' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nCycling Path data: Similarly, I imported the cycling path data using st_read(). This command loads the specified layer from the provided directory.\n\n\ncyclingpath = st_read(dsn = \"data/geospatial/CyclingPath_Jul2024\", \n                         layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\EasonXu-HY99\\IS415\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial\\CyclingPath_Jul2024' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3138 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42644.17 ymax: 48948.15\nProjected CRS: SVY21\n\n\n\nPre-Schools Location: The pre-schools data is stored in a KML (Keyhole Markup Language) file. The st_read() function can directly import this format, converting it into an sf object.\n\n\npreschool = st_read(\"data/geospatial/PreSchoolsLocation/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\EasonXu-HY99\\IS415\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial\\PreSchoolsLocation\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\n\n5 Checking the Content of A Simple Feature Data Frame\nOnce the spatial data was imported, I inspected its contents to understand its structure and the types of geometries it contains. - Inspecting geometries: The st_geometry() function extracts and displays the geometric data from an sf object, helping me understand the spatial structure of the dataset.\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\n\nGlimpse of the data: Using glimpse() from tidyverse, I obtained a quick overview of the mpsz data frame, showing its structure and the first few rows of each column.\n\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\n\nViewing the first few records: The head() function displayed the first few rows of the mpsz data frame, which helped me quickly inspect the data.\n\n\nhead(mpsz, n=5)  \n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\n\n\n6 Plotting the Geospatial Data\nVisualizing spatial data is a key part of geospatial analysis. The plot() function is used to create basic plots of spatial objects.\n\nPlotting the entire mpsz object: This command created a default plot of the mpsz spatial object, showing all its spatial features.\n\n\nplot(mpsz)\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\nPlotting only the geometries:\n\nHere, I used st_geometry() within plot() to visualize just the geometric shapes, without any associated attribute data.\n\nplot(st_geometry(mpsz))\n\n\n\n\n\n\n\n\n\nPlotting specific attributes:\n\nTo visualize specific attributes, such as the planning area names (PLN_AREA_N), I used the following command.\n\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\n\n\n\n\n\n\n7 Working with Projection\nUnderstanding and managing coordinate reference systems (CRS) is critical in geospatial analysis. I have checked the CRS of the mpsz data and reprojected it to a different CRS using the following commands:\n\nChecking the CRS:\nI used the st_crs() function to check the current CRS of the mpsz object.\n\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\nSetting a new CRS (EPSG: 3414):\n\nThe st_set_crs() function allowed me to assign the Singapore-specific EPSG: 3414 to the mpsz data.\n\nmpsz3414 &lt;- st_set_crs(mpsz, 3414)\n\nWarning: st_crs&lt;- : replacing crs does not reproject data; use st_transform for\nthat\n\n\n\nVerifying the new CRS:\n\nAfter setting the new CRS, I confirmed the change by checking the CRS of the mpsz3414 object.\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\nChecking the geometry of the preschool data:\n\nI inspected the geometry of the preschool data to understand its current projection.\n\nst_geometry(preschool)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\nPOINT Z (103.8072 1.299333 0)\n\n\nPOINT Z (103.826 1.312839 0)\n\n\nPOINT Z (103.8409 1.348843 0)\n\n\nPOINT Z (103.8048 1.435024 0)\n\n\nPOINT Z (103.839 1.33315 0)\n\n\n\nTransforming the CRS of the preschool data:\n\nThe st_transform() function was used to reproject the preschool data to match the CRS (EPSG: 3414) of the mpsz3414 object.\n\npreschool3414 &lt;- st_transform(preschool, \n                              crs = 3414)\n\n\nVerifying the transformed geometry:\n\nI verified the transformed geometry of the preschool3414 object.\n\nst_geometry(preschool3414)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11810.03 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\nPOINT Z (25089.46 31299.16 0)\n\n\nPOINT Z (27189.07 32792.54 0)\n\n\nPOINT Z (28844.56 36773.76 0)\n\n\nPOINT Z (24821.92 46303.16 0)\n\n\nPOINT Z (28637.82 35038.49 0)\n\n\n\n\n8 Importing and Converting an Aspatial Data\nIn this step, I imported an aspatial dataset (a dataset without spatial attributes) and converted it to a spatial format using the sf package.\n\nImporting the listings data:\n\nI used read_csv() to load a CSV file containing Airbnb listings into R.\n\nlistings &lt;- read_csv(\"data/aspatial/listings.csv\")\n\nRows: 3540 Columns: 75\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (26): listing_url, source, name, description, neighborhood_overview, pi...\ndbl  (38): id, scrape_id, host_id, host_listings_count, host_total_listings_...\nlgl   (6): host_is_superhost, host_has_profile_pic, host_identity_verified, ...\ndate  (5): last_scraped, host_since, calendar_last_scraped, first_review, la...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nInspecting the data structure:\n\nThe list() function was used to check the structure of the listings data frame.\n\nlist(listings) \n\n[[1]]\n# A tibble: 3,540 × 75\n       id listing_url            scrape_id last_scraped source name  description\n    &lt;dbl&gt; &lt;chr&gt;                      &lt;dbl&gt; &lt;date&gt;       &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;      \n 1  71609 https://www.airbnb.co…   2.02e13 2024-06-29   previ… Ensu… For 3 room…\n 2  71896 https://www.airbnb.co…   2.02e13 2024-06-29   city … B&B … &lt;NA&gt;       \n 3  71903 https://www.airbnb.co…   2.02e13 2024-06-29   city … Room… Like your …\n 4 275343 https://www.airbnb.co…   2.02e13 2024-06-29   city … 10mi… **IMPORTAN…\n 5 275344 https://www.airbnb.co…   2.02e13 2024-06-29   city … 15 m… Lovely hom…\n 6 289234 https://www.airbnb.co…   2.02e13 2024-06-29   previ… Book… This whole…\n 7 294281 https://www.airbnb.co…   2.02e13 2024-06-29   city … 5 mi… I have 3 b…\n 8 324945 https://www.airbnb.co…   2.02e13 2024-06-29   city … Comf… **IMPORTAN…\n 9 330095 https://www.airbnb.co…   2.02e13 2024-06-29   city … Rela… **IMPORTAN…\n10 344803 https://www.airbnb.co…   2.02e13 2024-06-29   city … Budg… Direct bus…\n# ℹ 3,530 more rows\n# ℹ 68 more variables: neighborhood_overview &lt;chr&gt;, picture_url &lt;chr&gt;,\n#   host_id &lt;dbl&gt;, host_url &lt;chr&gt;, host_name &lt;chr&gt;, host_since &lt;date&gt;,\n#   host_location &lt;chr&gt;, host_about &lt;chr&gt;, host_response_time &lt;chr&gt;,\n#   host_response_rate &lt;chr&gt;, host_acceptance_rate &lt;chr&gt;,\n#   host_is_superhost &lt;lgl&gt;, host_thumbnail_url &lt;chr&gt;, host_picture_url &lt;chr&gt;,\n#   host_neighbourhood &lt;chr&gt;, host_listings_count &lt;dbl&gt;, …\n\n\n\nConverting to an sf object:\n\nI converted the listings data into a spatial format using st_as_sf(). The coords argument specifies the columns containing longitude and latitude, and I set the CRS to EPSG: 4326 before transforming it to EPSG: 3414.\n\nlistings_sf &lt;- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %&gt;%\n  st_transform(crs = 3414)\n\n\nChecking the structure of the spatial data:\n\nFinally, I used glimpse() to inspect the structure of the newly created listings_sf object.\n\nglimpse(listings_sf)\n\nRows: 3,540\nColumns: 74\n$ id                                           &lt;dbl&gt; 71609, 71896, 71903, 2753…\n$ listing_url                                  &lt;chr&gt; \"https://www.airbnb.com/r…\n$ scrape_id                                    &lt;dbl&gt; 2.024063e+13, 2.024063e+1…\n$ last_scraped                                 &lt;date&gt; 2024-06-29, 2024-06-29, …\n$ source                                       &lt;chr&gt; \"previous scrape\", \"city …\n$ name                                         &lt;chr&gt; \"Ensuite Room (Room 1 & 2…\n$ description                                  &lt;chr&gt; \"For 3 rooms.Book room 1 …\n$ neighborhood_overview                        &lt;chr&gt; NA, NA, \"Quiet and view o…\n$ picture_url                                  &lt;chr&gt; \"https://a0.muscache.com/…\n$ host_id                                      &lt;dbl&gt; 367042, 367042, 367042, 1…\n$ host_url                                     &lt;chr&gt; \"https://www.airbnb.com/u…\n$ host_name                                    &lt;chr&gt; \"Belinda\", \"Belinda\", \"Be…\n$ host_since                                   &lt;date&gt; 2011-01-29, 2011-01-29, …\n$ host_location                                &lt;chr&gt; \"Singapore\", \"Singapore\",…\n$ host_about                                   &lt;chr&gt; \"Hi My name is Belinda -H…\n$ host_response_time                           &lt;chr&gt; \"within an hour\", \"within…\n$ host_response_rate                           &lt;chr&gt; \"100%\", \"100%\", \"100%\", \"…\n$ host_acceptance_rate                         &lt;chr&gt; \"N/A\", \"N/A\", \"N/A\", \"99%…\n$ host_is_superhost                            &lt;lgl&gt; FALSE, FALSE, FALSE, FALS…\n$ host_thumbnail_url                           &lt;chr&gt; \"https://a0.muscache.com/…\n$ host_picture_url                             &lt;chr&gt; \"https://a0.muscache.com/…\n$ host_neighbourhood                           &lt;chr&gt; \"Tampines\", \"Tampines\", \"…\n$ host_listings_count                          &lt;dbl&gt; 6, 6, 6, 49, 49, 6, 7, 49…\n$ host_total_listings_count                    &lt;dbl&gt; 11, 11, 11, 73, 73, 11, 8…\n$ host_verifications                           &lt;chr&gt; \"['email', 'phone']\", \"['…\n$ host_has_profile_pic                         &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, T…\n$ host_identity_verified                       &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, T…\n$ neighbourhood                                &lt;chr&gt; NA, NA, \"Singapore, Singa…\n$ neighbourhood_cleansed                       &lt;chr&gt; \"Tampines\", \"Tampines\", \"…\n$ neighbourhood_group_cleansed                 &lt;chr&gt; \"East Region\", \"East Regi…\n$ property_type                                &lt;chr&gt; \"Private room in villa\", …\n$ room_type                                    &lt;chr&gt; \"Private room\", \"Private …\n$ accommodates                                 &lt;dbl&gt; 3, 1, 2, 1, 1, 4, 2, 1, 1…\n$ bathrooms                                    &lt;dbl&gt; NA, 0.5, 0.5, 2.0, 2.5, N…\n$ bathrooms_text                               &lt;chr&gt; \"1 private bath\", \"Shared…\n$ bedrooms                                     &lt;dbl&gt; 2, 1, 1, 1, 1, 3, 2, 1, 1…\n$ beds                                         &lt;dbl&gt; NA, 1, 2, 1, 1, NA, 1, 1,…\n$ amenities                                    &lt;chr&gt; \"[\\\"Free parking on premi…\n$ price                                        &lt;chr&gt; NA, \"$80.00\", \"$80.00\", \"…\n$ minimum_nights                               &lt;dbl&gt; 92, 92, 92, 180, 180, 92,…\n$ maximum_nights                               &lt;dbl&gt; 365, 365, 365, 999, 999, …\n$ minimum_minimum_nights                       &lt;dbl&gt; 92, 92, 92, 180, 180, 92,…\n$ maximum_minimum_nights                       &lt;dbl&gt; 92, 92, 92, 180, 180, 92,…\n$ minimum_maximum_nights                       &lt;dbl&gt; 1125, 1125, 1125, 1125, 1…\n$ maximum_maximum_nights                       &lt;dbl&gt; 1125, 1125, 1125, 1125, 1…\n$ minimum_nights_avg_ntm                       &lt;dbl&gt; 92, 92, 92, 180, 180, 92,…\n$ maximum_nights_avg_ntm                       &lt;dbl&gt; 1125, 1125, 1125, 1125, 1…\n$ calendar_updated                             &lt;lgl&gt; NA, NA, NA, NA, NA, NA, N…\n$ has_availability                             &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, T…\n$ availability_30                              &lt;dbl&gt; 30, 30, 30, 28, 0, 29, 30…\n$ availability_60                              &lt;dbl&gt; 59, 53, 60, 58, 0, 58, 60…\n$ availability_90                              &lt;dbl&gt; 89, 83, 90, 62, 0, 88, 90…\n$ availability_365                             &lt;dbl&gt; 89, 148, 90, 62, 0, 88, 3…\n$ calendar_last_scraped                        &lt;date&gt; 2024-06-29, 2024-06-29, …\n$ number_of_reviews                            &lt;dbl&gt; 19, 24, 46, 20, 16, 12, 1…\n$ number_of_reviews_ltm                        &lt;dbl&gt; 0, 0, 0, 0, 2, 0, 0, 1, 1…\n$ number_of_reviews_l30d                       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ first_review                                 &lt;date&gt; 2011-12-19, 2011-07-30, …\n$ last_review                                  &lt;date&gt; 2020-01-17, 2019-10-13, …\n$ review_scores_rating                         &lt;dbl&gt; 4.44, 4.16, 4.41, 4.40, 4…\n$ review_scores_accuracy                       &lt;dbl&gt; 4.37, 4.22, 4.39, 4.16, 4…\n$ review_scores_cleanliness                    &lt;dbl&gt; 4.00, 4.09, 4.52, 4.26, 4…\n$ review_scores_checkin                        &lt;dbl&gt; 4.63, 4.43, 4.63, 4.47, 4…\n$ review_scores_communication                  &lt;dbl&gt; 4.78, 4.43, 4.64, 4.42, 4…\n$ review_scores_location                       &lt;dbl&gt; 4.26, 4.17, 4.50, 4.53, 4…\n$ review_scores_value                          &lt;dbl&gt; 4.32, 4.04, 4.36, 4.63, 4…\n$ license                                      &lt;chr&gt; NA, NA, NA, \"S0399\", \"S03…\n$ instant_bookable                             &lt;lgl&gt; FALSE, FALSE, FALSE, TRUE…\n$ calculated_host_listings_count               &lt;dbl&gt; 6, 6, 6, 49, 49, 6, 7, 49…\n$ calculated_host_listings_count_entire_homes  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 1, 0, 0…\n$ calculated_host_listings_count_private_rooms &lt;dbl&gt; 6, 6, 6, 49, 49, 6, 6, 49…\n$ calculated_host_listings_count_shared_rooms  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ reviews_per_month                            &lt;dbl&gt; 0.12, 0.15, 0.29, 0.15, 0…\n$ geometry                                     &lt;POINT [m]&gt; POINT (41972.5 3639…\n\n\n\n\n9 Geoprocessing with sf package\nGeoprocessing involves creating new data by transforming and analyzing existing spatial data. I performed several geoprocessing tasks as follows:\n\nCreating a buffer around cycling paths:\n\nI created a buffer of 5 meters around each cycling path using the st_buffer() function. This buffer helps analyze areas within a certain distance from the paths.\n\nbuffer_cycling &lt;- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 30)\n\n\nCalculating the area of each buffer:\n\nThe st_area() function was used to calculate the area of each buffer polygon, which I stored in a new column named AREA.\n\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\n\n\nSumming the total buffer area:\n\nI calculated the total area of all buffer polygons to get an overall sense of the space covered by the cycling path buffers.\n\nsum(buffer_cycling$AREA)\n\n2218855 [m^2]\n\n\n\nCounting pre-schools within each subzone:\n\nI used st_intersects() to count the number of pre-schools within each subzone in mpsz3414, and stored the result in a new column PreSch Count.\n\nmpsz3414$`PreSch Count`&lt;- lengths(st_intersects(mpsz3414, preschool3414))\n\n\nSummarizing the pre-school count data:\n\nThe summary() function provided a quick statistical summary of the pre-school counts across different subzones.\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\n\n\nIdentifying the subzone with the highest pre-school count:\n\nI used top_n() to identify the subzone with the highest number of pre-schools.\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n\n\n\nCalculating the area of each subzone:\n\nI calculated the area of each subzone in mpsz3414 and stored it in a new column Area.\n\nmpsz3414$Area &lt;- mpsz3414 %&gt;%\n  st_area()\n\n\nCalculating pre-school density:\n\nI calculated the density of pre-schools (number of pre-schools per square kilometer) in each subzone, and stored it in a new column PreSch Density.\n\nmpsz3414 &lt;- mpsz3414 %&gt;%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n\n\n\n10 Exploratory Data Analysis (EDA)\nExploratory Data Analysis (EDA) involves summarizing and visualizing data to discover patterns, trends, and relationships. I performed EDA on the pre-school density data as follows:\n\nCreating a histogram of pre-school density:\n\nI plotted a histogram to visualize the distribution of pre-school densities across subzones.\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\n\n\n\n\n\nVisualizing pre-school density with ggplot2:\n\nUsing ggplot2, I created a more detailed histogram with custom colors and labels. The plot helps identify subzones with extremely high or low pre-school densities.\n\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\n\n\n\n\n\nCreating a scatter plot of pre-school count vs. density:\n\nI created a scatter plot to explore the relationship between pre-school density and the actual number of pre-schools in each subzone.\n\nggplot(data=mpsz3414, \n       aes(y = `PreSch Count`, \n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\", \n             fill=\"light blue\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Pre-school count\")\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`)."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/MPSZ-2019/MPSZ-2019.html",
    "href": "In-class_Ex/In-class_Ex01/MPSZ-2019/MPSZ-2019.html",
    "title": "IS415 - Xu Haiyang",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/data/MPSZ-2019/MPSZ-2019.html",
    "href": "In-class_Ex/In-class_Ex01/data/MPSZ-2019/MPSZ-2019.html",
    "title": "IS415 - Xu Haiyang",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/data/MPSZ-2019.html",
    "href": "In-class_Ex/In-class_Ex01/data/MPSZ-2019.html",
    "title": "IS415 - Xu Haiyang",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands on Exercise 2",
    "section": "",
    "text": "1. Overview\nThematic mapping involves using map symbols to visualize specific properties of geographic features that are not naturally visible, such as population, temperature, crime rate, and property prices. These maps allow us to represent complex data in a spatial context, making it easier to identify patterns and trends.\nGeovisualisation, on the other hand, goes beyond just mapping; it provides graphical representations that make a place, phenomenon, or process visible. This visualization enables us to leverage the powerful spatial cognition abilities of our eye–brain vision system to process and understand complex spatial information effectively.\nIn this chapter, I will demonstrate how to create functional and accurate choropleth maps using the R package tmap.\n\n\n2. Getting Started\nBefore we begin, I loaded the necessary R packages to handle geospatial data, mapping, and data manipulation:\n\npacman::p_load(sf, tmap, tidyverse)\n\n\n\n3. Importing Data into R\nTo create the choropleth map, I used two datasets:\n\nThe Data\n\nMaster Plan 2014 Subzone Boundary (Web):\n\nFormat: ESRI Shapefile\nDescription: This geospatial dataset provides the geographical boundaries of Singapore at the planning subzone level, based on the Urban Redevelopment Authority (URA) Master Plan 2014.\nSource: data.gov.sg\n\nI imported this data using the st_read() function, which reads the shapefile into R as a simple feature (sf) object:\n\n\nmpsz &lt;- st_read(dsn = \"data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\EasonXu-HY99\\IS415\\Hands-on_Ex\\Hands-on_Ex02\\data\\geospatial\\MasterPlan2014SubzoneBoundaryWebSHP' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nSingapore Residents by Planning Area/Subzone, Age Group, Sex, and Type of Dwelling, June 2011-2020:\n\nFormat: CSV file\nDescription: This aspatial dataset contains demographic data, including the number of residents by planning area and subzone. Although it lacks spatial coordinates, the PA (Planning Area) and SZ (Subzone) fields serve as unique identifiers, which can be linked to the subzones in the shapefile for geocoding.\nSource: Department of Statistics, Singapore\n\n\nBy using these datasets together, I will create a choropleth map that visualizes demographic information across Singapore’s planning subzones.\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\nThis command shows the contents of the mpsz data frame, which contains the spatial boundaries of Singapore’s planning subzones. Viewing the data helps in understanding its structure before merging it with other datasets.\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesexfa2011to2020.csv\")\n\nRows: 738492 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, FA\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nHere, I imported the population data stored in a CSV file. This dataset contains demographic information about Singapore residents by planning area, subzone, age group, and sex from 2011 to 2020.\nNext, I am required to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\nYOUNG: age group 0 to 4 until age group 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%  \n  group_by(PA, SZ, AG) %&gt;%  \n  summarise(POP = sum(Pop)) %&gt;%  \n  ungroup() %&gt;%  \n  pivot_wider(names_from = AG, values_from = POP) %&gt;% \n  mutate(YOUNG = rowSums(.[3:6]) + rowSums(.[14])) %&gt;%  \n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:13]) + rowSums(.[15])) %&gt;%  \n  mutate(AGED = rowSums(.[16:21])) %&gt;% \n  mutate(TOTAL = rowSums(.[3:21])) %&gt;%  \n  mutate(DEPENDENCY = (YOUNG + AGED) / `ECONOMY ACTIVE`) %&gt;% \n  select(PA, SZ, YOUNG, `ECONOMY ACTIVE`, AGED, TOTAL, DEPENDENCY)  \n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\n\nfilter(Time == 2020): Selects the data for the year 2020.\ngroup_by(PA, SZ, AG): Groups the data by Planning Area (PA), Subzone (SZ), and Age Group (AG).\nsummarise(POP = sum(Pop)): Summarizes the population counts by summing them within each group.\nungroup(): ungroup() is to ensure that any further mutations called on the code after it would not use the grouping for aggregate statistics\npivot_wider(names_from = AG, values_from = POP): Reshapes the data so that each Age Group (AG) becomes a column.\nselect(PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY): Selects the relevant columns for the final dataset.\n\nIn this step, I filtered the population data to only include the year 2020. I then grouped the data by planning area, subzone, and age group to summarize the population for each group. The data was reshaped so that each age group became a separate column. New columns were created to represent the young, economically active, and aged populations, as well as the total population and dependency ratio.\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate_at(.vars = vars(PA, SZ), .funs = list(toupper)) %&gt;%  \n  filter(`ECONOMY ACTIVE` &gt; 0)\n\n\nmutate_at(.vars = vars(PA, SZ), .funs = list(toupper)): Converts the values in the PA (Planning Area) and SZ (Subzone) columns to uppercase.\nfilter(ECONOMY ACTIVE &gt; 0): Excludes rows where the ECONOMY ACTIVE population is zero, keeping only subzones with an economically active population.\n\nNext, I converted the planning area and subzone names to uppercase to ensure consistency when merging with other datasets. I also filtered out any rows where the economically active population was zero, as these would not be useful for analysis.\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020, by = c(\"SUBZONE_N\" = \"SZ\"))\n\nHere, I merged the geospatial data (mpsz) with the filtered population data (popdata2020) using a left join. This operation linked the population data to the corresponding subzone boundaries based on the subzone names.\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")\n\nFinally, I saved the merged dataset as an RDS file, which can be easily loaded in the future without needing to repeat the data import and transformation steps.\n\n\n\n4. Choropleth Mapping Geospatial Data Using tmap\nIn this section, I created choropleth maps to visualize the distribution of the dependency ratio across Singapore’s planning subzones. I used the tmap package in R, which is highly versatile for creating thematic maps.\n\n4.1 Plotting a Choropleth Map Quickly Using qtm()\nTo quickly plot a choropleth map, I used the qtm() function, which is a shortcut for generating simple thematic maps. Here’s how I visualized the dependency ratio:\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020, fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\"): This sets the tmap mode to static plotting (as opposed to interactive maps).\nqtm(): This function quickly maps the DEPENDENCY variable using the planning subzone boundaries.\n\n\n\n4.2 Creating a Choropleth Map Using tmap’s Elements\nTo have more control over the appearance and elements of the map, I used the full capabilities of the tmap package by layering various map elements:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"Blues\", title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\", main.title.position = \"center\", main.title.size = 1.2, legend.height = 0.45, legend.width = 0.35, frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\n\ntm_shape(): Defines the shape or spatial object to be used in the map.\ntm_fill(): Fills the subzones based on the DEPENDENCY variable. The style = \"quantile\" argument divides the data into quantiles, and the palette = \"Blues\" argument applies a blue color scheme.\ntm_layout(): Customizes the layout, including the title, legend dimensions, and the inclusion of a map frame.\ntm_borders(): Adds borders to the subzones with partial transparency.\ntm_compass(): Adds a compass rose to the map.\ntm_scale_bar(): Adds a scale bar.\ntm_grid(): Adds a grid to the map with slight transparency.\ntm_credits(): Adds a credit note with the data sources.\n\nHere are some additional visualizations I generated using tmap:\n\ntm_shape(mpsz_pop2020) + tm_polygons()\n\n\n\n\n\n\n\n\nThis code displays the boundaries of the planning subzones with default polygon styling.\n\ntm_shape(mpsz_pop2020)+ tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nHere, I highlighted the dependency ratio within each subzone using the polygon shapes.\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nThis function fills the subzones based on the dependency ratio without drawing the borders.\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\") + tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\n\n\n\n\nFinally, I combined the filled polygons with borders to enhance the map’s readability. I adjusted the border width and transparency for a clearer delineation of subzones.\n\n\n4.3 Data Classification Methods of tmap\nI also explored different data classification methods provided by tmap to see how they impact the visualization:\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 5, style = \"quantile\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\nstyle = \"quantile\": Classifies the data into quantiles, ensuring each class has approximately the same number of subzones.\n\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 5, style = \"equal\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\nstyle = \"equal\": Divides the data into equal intervals, which can be useful for evenly distributed data.\n\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6540  0.7063  0.7712  0.7657 19.0000      92 \n\n\nI used the summary() function to generate summary statistics for the DEPENDENCY variable. This helps in understanding the distribution of the data before deciding on classification methods.\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) + tm_borders(alpha = 0.5)\n\nWarning: Values have found that are higher than the highest break\n\n\n\n\n\n\n\n\n\n\nbreaks: Here, I manually specified breaks for the classification, allowing for a custom, meaningful division of the data.\n\n\n\n4.4 Color Scheme\nIn this section, I experimented with different color schemes to visualize the dependency ratio in the planning subzones.\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 6, style = \"quantile\", palette = \"Blues\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\nBlues Palette: Here, I used a six-class quantile classification with a blue color scheme.\n\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"-Greens\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\nReverse Greens Palette: In this example, I used a reversed green palette to see how it affects the visualization of the same data.\n\n\n\n4.5 Map Layouts\nNext, I explored different map layouts to enhance the presentation of the dependency ratio data:\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\", style = \"jenks\", palette = \"Blues\", legend.hist = TRUE, legend.is.portrait = TRUE, legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\", main.title.position = \"center\", main.title.size = 1, legend.height = 0.45, legend.width = 0.35, legend.outside = FALSE, legend.position = c(\"right\", \"bottom\"), frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\nJenks Classification: This layout uses Jenks natural breaks classification and includes a histogram in the legend. The layout was customized with a centered title and a compact legend.\n\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"-Greens\") + tm_borders(alpha = 0.5) + tmap_style(\"classic\")\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n\n\n\n\n\n\n\n\n\n\nClassic Style: Here, the classic tmap style, which provides a traditional map appearance.\n\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"Blues\", title = \"No. of persons\") + tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\", main.title.position = \"center\", main.title.size = 1.2, legend.height = 0.45, legend.width = 0.35, frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\n\nEnhanced Layout: This layout includes a compass, scale bar, grid lines, and source credits for a more detailed map presentation.\n\n\ntmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\nWhite Style: Switch to the white style for a clean, modern look.\n\n\n\n4.6 Drawing Small Multiple Choropleth Maps\nI also created small multiple maps to compare different variables side by side:\n\ntm_shape(mpsz_pop2020) + tm_fill(c(\"YOUNG\", \"AGED\"), style = \"equal\", palette = \"Blues\") + tm_layout(legend.position = c(\"right\",\"bottom\")) + tm_borders(alpha = 0.5) + tmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n\n\n\n\n\nSmall Multiples with Equal Intervals: This code compares the “YOUNG” and “AGED” population distributions using equal intervals.\n\n\ntm_shape(mpsz_pop2020) + tm_polygons(c(\"DEPENDENCY\",\"AGED\"), style = c(\"equal\", \"quantile\"), palette = list(\"Blues\",\"Greens\")) + tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n\n\n\nCombined Classification: Here, I mapped the dependency ratio and the aged population using different classification methods and color palettes.\n\n\ntm_shape(mpsz_pop2020) + \n  tm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"Blues\", thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", free.coords=TRUE, drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE, title.position = c(\"center\", \"center\"), title.size = 20) +\n  tm_borders(alpha = 0.5)\n\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n\n\n\n\n\n\n\n\n\n\nFaceted Map: This map shows the dependency ratio for different regions in separate facets, allowing for easy regional comparison.\n\n\nyoungmap &lt;- tm_shape(mpsz_pop2020) + tm_polygons(\"YOUNG\", style = \"quantile\", palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020) + tm_polygons(\"AGED\", style = \"quantile\", palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\nArranged Maps: Here, I arranged maps for the young and aged populations side by side for direct comparison.\n\n\n\n4.7 Mapping Spatial Objects Meeting a Selection Criterion\nLastly, I focused on mapping only the Central Region:\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ]) +\n  tm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"Blues\", legend.hist = TRUE, legend.is.portrait = TRUE, legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE, legend.height = 0.45, legend.width = 5.0, legend.position = c(\"right\", \"bottom\"), frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend\n\n\n\n\n\n\n\n\n\n\nCentral Region Map: This map highlights the Central Region, using a quantile classification and a larger legend for clarity."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01-v2.html",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01-v2.html",
    "title": "In-class Exercise 1: Geospatial Data Science",
    "section": "",
    "text": "The data file include “MPSZ-2019” from SMU E-Learn."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "title": "In-class Exercise 2",
    "section": "",
    "text": "pacman::p_load(tidyverse, sf)\n\n\npacman::p_load(tidyverse, sf, ggstatsplot, tmap)\n\nESRI Shapefile of Master Plan 2014 Subzone Boundary Web data.\n\nmpsz14_shp &lt;- st_read(dsn = \"data/MasterPlan2014SubzoneBoundaryWebSHP\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\EasonXu-HY99\\IS415\\In-class_Ex\\In-class_Ex02\\data\\MasterPlan2014SubzoneBoundaryWebSHP' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nclass(mpsz14_shp)\n\n[1] \"sf\"         \"data.frame\"\n\n\nKML file of Master Plan 2014 Subzone Boundary Web data.\n\nmpsz14_kml &lt;- st_read(\"data/MasterPlan2014SubzoneBoundaryWebKML.kml\")\n\n\nst_write(mpsz14_shp, \"data/MP14_SUBZONE_WEB_PL.kml\", delete_dsn = TRUE)\n\n“delete_dsn” is to avoid the errors that the same name file exists in the same location.\n\nmpsz19_shp &lt;- st_read(dsn = \"data/MPSZ-2019\", layer = \"MPSZ-2019\")\n\nReading layer `MPSZ-2019' from data source \n  `C:\\EasonXu-HY99\\IS415\\In-class_Ex\\In-class_Ex02\\data\\MPSZ-2019' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\nmpsz19_kml &lt;- st_read(\"data/MasterPlan2019SubzoneBoundaryNoSeaKML.kml\")\n\nReading layer `URA_MP19_SUBZONE_NO_SEA_PL' from data source \n  `C:\\EasonXu-HY99\\IS415\\In-class_Ex\\In-class_Ex02\\data\\MasterPlan2019SubzoneBoundaryNoSeaKML.kml' \n  using driver `KML'\nSimple feature collection with 332 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nmpsz19_shp &lt;- st_read(dsn = \"data/MPSZ-2019\", layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `C:\\EasonXu-HY99\\IS415\\In-class_Ex\\In-class_Ex02\\data\\MPSZ-2019' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\npopdata &lt;- read_csv(\"data/respopagesextod2023.csv\")\n\nRows: 100928 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\npopdata2023 &lt;- popdata %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%  \n  ungroup() %&gt;%\n  pivot_wider(names_from = AG, values_from = POP)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\ncolnames(popdata2023)\n\n [1] \"PA\"          \"SZ\"          \"0_to_4\"      \"10_to_14\"    \"15_to_19\"   \n [6] \"20_to_24\"    \"25_to_29\"    \"30_to_34\"    \"35_to_39\"    \"40_to_44\"   \n[11] \"45_to_49\"    \"50_to_54\"    \"55_to_59\"    \"5_to_9\"      \"60_to_64\"   \n[16] \"65_to_69\"    \"70_to_74\"    \"75_to_79\"    \"80_to_84\"    \"85_to_89\"   \n[21] \"90_and_Over\"\n\n\n\npopdata2023 &lt;- popdata2023 %&gt;%\n  mutate_at(.vars = vars(PA, SZ), .funs = list(toupper))  \n\n\npop2023_mpsz &lt;- left_join(popdata2023, mpsz19_shp, by = c(\"SZ\" = \"SUBZONE_N\"))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/data/MPSZ-2019/MPSZ-2019.html",
    "href": "In-class_Ex/In-class_Ex02/data/MPSZ-2019/MPSZ-2019.html",
    "title": "IS415 - Xu Haiyang",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html",
    "title": "Hands-on Exercise 3 Part 2",
    "section": "",
    "text": "pacman::p_load(sf, raster, spatstat, tmap, tidyverse)\n\n\nchildcare_sf &lt;- st_read(\"data/child-care-services-geojson.geojson\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `child-care-services-geojson' from data source \n  `C:\\EasonXu-HY99\\IS415\\Hands-on_Ex\\Hands-on_Ex03\\data\\child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nsg_sf &lt;- st_read(dsn = \"data\", layer = \"CostalOutline\") \n\nReading layer `CostalOutline' from data source \n  `C:\\EasonXu-HY99\\IS415\\Hands-on_Ex\\Hands-on_Ex03\\data' using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n\n\n\nmpsz_sf &lt;- st_read(dsn = \"data\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\EasonXu-HY99\\IS415\\Hands-on_Ex\\Hands-on_Ex03\\data' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nst_crs(childcare_sf)  \n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\nst_crs(mpsz_sf)       \n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\nst_crs(sg_sf)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\nmpsz_sf &lt;- st_set_crs(mpsz_sf, 3414)\n\nWarning: st_crs&lt;- : replacing crs does not reproject data; use st_transform for\nthat\n\nsg_sf &lt;- st_set_crs(sg_sf, 3414)\n\nWarning: st_crs&lt;- : replacing crs does not reproject data; use st_transform for\nthat\n\n\n\nchildcare_sf &lt;- st_transform(childcare_sf, crs = 3414)\n\n\nst_crs(childcare_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\nst_crs(mpsz_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\nst_crs(sg_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(sg_sf) +\n  tm_polygons(col = \"grey\", border.col = \"black\") +\ntm_shape(mpsz_sf) +  \n  tm_polygons(col = \"grey\", border.col = \"black\") +\ntm_shape(childcare_sf) +  \n  tm_dots(col = \"black\", size = 0.1)\n\n\n\n\n\n\n\n\n\ntmap_mode('view')\n\ntmap mode set to interactive viewing\n\ntm_shape(childcare_sf) + tm_dots()\n\n\n\n\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\n\n\nchildcare_ppp &lt;- as.ppp(childcare_sf)\n\nWarning in as.ppp.sf(childcare_sf): only first attribute column is used for\nmarks\n\nchildcare_ppp\n\nMarked planar point pattern: 1545 points\nmarks are of storage type  'character'\nwindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n\n\n\nplot(childcare_ppp)\n\nWarning in default.charmap(ntypes, chars): Too many types to display every type\nas a different character\n\n\nWarning: Only 10 out of 1545 symbols are shown in the symbol map\n\n\n\n\n\n\n\n\n\n\nsummary(childcare_ppp)\n\nMarked planar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\nCoordinates are given to 11 decimal places\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n     1545 character character \n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units\n\n\n\nany(duplicated(childcare_ppp))\n\n[1] FALSE\n\n\n\nmultiplicity(childcare_ppp)\n\n   [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [75] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [112] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [149] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [186] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [223] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [260] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [297] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [334] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [371] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [408] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [445] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [482] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [519] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [556] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [593] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [630] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [667] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [704] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [741] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [778] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [815] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [852] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [889] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [926] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [963] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1000] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1037] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1074] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1111] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1148] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1185] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1222] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1259] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1296] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1333] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1370] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1407] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1444] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1481] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1518] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n\n\n\nsum(multiplicity(childcare_ppp) &gt; 1)\n\n[1] 0\n\n\n\ntmap_mode('view')\n\ntmap mode set to interactive viewing\n\ntm_shape(childcare_sf) + tm_dots(alpha=0.4, size=0.05)\n\n\n\n\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\n\n\nchildcare_ppp_jit &lt;- rjitter(childcare_ppp, retry=TRUE, nsim=1, drop=TRUE)\n\n\nany(duplicated(childcare_ppp_jit))\n\n[1] FALSE\n\n\n\nsg_owin &lt;- as.owin(sg_sf)\n\n\nplot(sg_owin)\n\n\n\n\n\n\n\n\n\nsummary(sg_owin)\n\nWindow: polygonal boundary\n50 separate polygons (1 hole)\n                 vertices         area relative.area\npolygon 1 (hole)       30     -7081.18     -9.76e-06\npolygon 2              55     82537.90      1.14e-04\npolygon 3              90    415092.00      5.72e-04\npolygon 4              49     16698.60      2.30e-05\npolygon 5              38     24249.20      3.34e-05\npolygon 6             976  23344700.00      3.22e-02\npolygon 7             721   1927950.00      2.66e-03\npolygon 8            1992   9992170.00      1.38e-02\npolygon 9             330   1118960.00      1.54e-03\npolygon 10            175    925904.00      1.28e-03\npolygon 11            115    928394.00      1.28e-03\npolygon 12             24      6352.39      8.76e-06\npolygon 13            190    202489.00      2.79e-04\npolygon 14             37     10170.50      1.40e-05\npolygon 15             25     16622.70      2.29e-05\npolygon 16             10      2145.07      2.96e-06\npolygon 17             66     16184.10      2.23e-05\npolygon 18           5195 636837000.00      8.78e-01\npolygon 19             76    312332.00      4.31e-04\npolygon 20            627  31891300.00      4.40e-02\npolygon 21             20     32842.00      4.53e-05\npolygon 22             42     55831.70      7.70e-05\npolygon 23             67   1313540.00      1.81e-03\npolygon 24            734   4690930.00      6.47e-03\npolygon 25             16      3194.60      4.40e-06\npolygon 26             15      4872.96      6.72e-06\npolygon 27             15      4464.20      6.15e-06\npolygon 28             14      5466.74      7.54e-06\npolygon 29             37      5261.94      7.25e-06\npolygon 30            111    662927.00      9.14e-04\npolygon 31             69     56313.40      7.76e-05\npolygon 32            143    145139.00      2.00e-04\npolygon 33            397   2488210.00      3.43e-03\npolygon 34             90    115991.00      1.60e-04\npolygon 35             98     62682.90      8.64e-05\npolygon 36            165    338736.00      4.67e-04\npolygon 37            130     94046.50      1.30e-04\npolygon 38             93    430642.00      5.94e-04\npolygon 39             16      2010.46      2.77e-06\npolygon 40            415   3253840.00      4.49e-03\npolygon 41             30     10838.20      1.49e-05\npolygon 42             53     34400.30      4.74e-05\npolygon 43             26      8347.58      1.15e-05\npolygon 44             74     58223.40      8.03e-05\npolygon 45            327   2169210.00      2.99e-03\npolygon 46            177    467446.00      6.44e-04\npolygon 47             46    699702.00      9.65e-04\npolygon 48              6     16841.00      2.32e-05\npolygon 49             13     70087.30      9.66e-05\npolygon 50              4      9459.63      1.30e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 725376000 square units\nFraction of frame area: 0.401\n\n\n\nchildcareSG_ppp = childcare_ppp[sg_owin]\n\n\nsummary(childcareSG_ppp)\n\nMarked planar point pattern:  1545 points\nAverage intensity 2.129929e-06 points per square unit\n\nCoordinates are given to 11 decimal places\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n     1545 character character \n\nWindow: polygonal boundary\n50 separate polygons (1 hole)\n                 vertices         area relative.area\npolygon 1 (hole)       30     -7081.18     -9.76e-06\npolygon 2              55     82537.90      1.14e-04\npolygon 3              90    415092.00      5.72e-04\npolygon 4              49     16698.60      2.30e-05\npolygon 5              38     24249.20      3.34e-05\npolygon 6             976  23344700.00      3.22e-02\npolygon 7             721   1927950.00      2.66e-03\npolygon 8            1992   9992170.00      1.38e-02\npolygon 9             330   1118960.00      1.54e-03\npolygon 10            175    925904.00      1.28e-03\npolygon 11            115    928394.00      1.28e-03\npolygon 12             24      6352.39      8.76e-06\npolygon 13            190    202489.00      2.79e-04\npolygon 14             37     10170.50      1.40e-05\npolygon 15             25     16622.70      2.29e-05\npolygon 16             10      2145.07      2.96e-06\npolygon 17             66     16184.10      2.23e-05\npolygon 18           5195 636837000.00      8.78e-01\npolygon 19             76    312332.00      4.31e-04\npolygon 20            627  31891300.00      4.40e-02\npolygon 21             20     32842.00      4.53e-05\npolygon 22             42     55831.70      7.70e-05\npolygon 23             67   1313540.00      1.81e-03\npolygon 24            734   4690930.00      6.47e-03\npolygon 25             16      3194.60      4.40e-06\npolygon 26             15      4872.96      6.72e-06\npolygon 27             15      4464.20      6.15e-06\npolygon 28             14      5466.74      7.54e-06\npolygon 29             37      5261.94      7.25e-06\npolygon 30            111    662927.00      9.14e-04\npolygon 31             69     56313.40      7.76e-05\npolygon 32            143    145139.00      2.00e-04\npolygon 33            397   2488210.00      3.43e-03\npolygon 34             90    115991.00      1.60e-04\npolygon 35             98     62682.90      8.64e-05\npolygon 36            165    338736.00      4.67e-04\npolygon 37            130     94046.50      1.30e-04\npolygon 38             93    430642.00      5.94e-04\npolygon 39             16      2010.46      2.77e-06\npolygon 40            415   3253840.00      4.49e-03\npolygon 41             30     10838.20      1.49e-05\npolygon 42             53     34400.30      4.74e-05\npolygon 43             26      8347.58      1.15e-05\npolygon 44             74     58223.40      8.03e-05\npolygon 45            327   2169210.00      2.99e-03\npolygon 46            177    467446.00      6.44e-04\npolygon 47             46    699702.00      9.65e-04\npolygon 48              6     16841.00      2.32e-05\npolygon 49             13     70087.30      9.66e-05\npolygon 50              4      9459.63      1.30e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 725376000 square units\nFraction of frame area: 0.401\n\n\n\nplot(childcareSG_ppp)\n\nWarning in default.charmap(ntypes, chars): Too many types to display every type\nas a different character\n\n\nWarning: Only 10 out of 1545 symbols are shown in the symbol map\n\n\n\n\n\n\n\n\n\n\npg &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"PUNGGOL\")\ntm &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"TAMPINES\")\nck &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"CHOA CHU KANG\")\njw &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"JURONG WEST\")\n\n\npar(mfrow=c(2,2))\nplot(pg, main = \"Ponggol\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\nplot(tm, main = \"Tampines\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\nplot(ck, main = \"Choa Chu Kang\")\n\nWarning: plotting the first 10 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\nplot(jw, main = \"Jurong West\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\npg_owin = as.owin(pg)\ntm_owin = as.owin(tm)\nck_owin = as.owin(ck)\njw_owin = as.owin(jw)\n\n\nchildcare_pg_ppp = childcare_ppp_jit[pg_owin]\nchildcare_tm_ppp = childcare_ppp_jit[tm_owin]\nchildcare_ck_ppp = childcare_ppp_jit[ck_owin]\nchildcare_jw_ppp = childcare_ppp_jit[jw_owin]\n\n\nchildcare_pg_ppp.km = rescale.ppp(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale.ppp(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale.ppp(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale.ppp(childcare_jw_ppp, 1000, \"km\")\n\n\npar(mfrow=c(2,2))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\n\nWarning in default.charmap(ntypes, chars): Too many types to display every type\nas a different character\n\n\nWarning: Only 10 out of 61 symbols are shown in the symbol map\n\nplot(childcare_tm_ppp.km, main=\"Tampines\")\n\nWarning in default.charmap(ntypes, chars): Too many types to display every type\nas a different character\n\n\nWarning: Only 10 out of 89 symbols are shown in the symbol map\n\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\n\nWarning in default.charmap(ntypes, chars): Too many types to display every type\nas a different character\n\n\nWarning: Only 10 out of 61 symbols are shown in the symbol map\n\nplot(childcare_jw_ppp.km, main=\"Jurong West\")\n\nWarning in default.charmap(ntypes, chars): Too many types to display every type\nas a different character\n\n\nWarning: Only 10 out of 88 symbols are shown in the symbol map\n\n\n\n\n\n\n\n\n\n\n9. Analyzing Spatial Point Process Using G-Function\nThe G-function measures the distribution of the nearest neighbor distances among points in a point pattern. It helps in understanding whether the points are clustered, randomly distributed, or regularly spaced.\n\n9.1 Choa Chu Kang Planning Area\n\n9.1.1 Computing G-Function Estimation\n\nG_CK = Gest(childcare_ck_ppp, correction = \"border\")\nplot(G_CK, xlim=c(0,500))\n\n\n\n\n\n\n\n\n\nWhy: I computed the G-function to analyze the distribution of nearest neighbor distances in the Choa Chu Kang area.\nFunctions:\n\nGest(): Computes the empirical G-function for a point pattern.\nplot(): Visualizes the G-function to observe the pattern of point distributions.\n\n\n\n\n9.1.2 Performing Complete Spatial Randomness (CSR) Test\n\nG_CK.csr &lt;- envelope(childcare_ck_ppp, Gest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(G_CK.csr)\n\n\n\n\n\n\n\n\n\nWhy: The CSR test evaluates if the observed pattern deviates significantly from a random distribution.\nFunctions:\n\nenvelope(): Generates simulation envelopes for hypothesis testing.\nplot(): Displays the observed G-function against the CSR envelope.\n\n\n\n\n\n9.2 Tampines Planning Area\n\n9.2.1 Computing G-Function Estimation\n\nG_tm = Gest(childcare_tm_ppp, correction = \"best\")\nplot(G_tm)\n\n\n\n\n\n\n\n\n\n\n9.2.2 Performing Complete Spatial Randomness Test\n\nG_tm.csr &lt;- envelope(childcare_tm_ppp, Gest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(G_tm.csr)\n\n\n\n\n\n\n\n\n\n\n\n\n10. Analyzing Spatial Point Process Using F-Function\nThe F-function measures the distribution of distances from arbitrary locations (not necessarily points) to the nearest point in a point pattern.\n\n10.1 Choa Chu Kang Planning Area\n\n10.1.1 Computing F-Function Estimation\n\nF_CK = Fest(childcare_ck_ppp)\nplot(F_CK)\n\n\n\n\n\n\n\n\n\nWhy: I used the F-function to analyze the distribution of distances from random locations to the nearest childcare center in Choa Chu Kang.\nFunctions:\n\nFest(): Computes the empirical F-function for a point pattern.\n\n\n\n\n10.1.2 Performing Complete Spatial Randomness Test\n\nF_CK.csr &lt;- envelope(childcare_ck_ppp, Fest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(F_CK.csr)\n\n\n\n\n\n\n\n\n\n\n\n10.2 Tampines Planning Area\n\n10.2.1 Computing F-Function Estimation\n\nF_tm = Fest(childcare_tm_ppp, correction = \"best\")\nplot(F_tm)\n\n\n\n\n\n\n\n\n\n\n10.2.2 Performing Complete Spatial Randomness Test\n\nF_tm.csr &lt;- envelope(childcare_tm_ppp, Fest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(F_tm.csr)\n\n\n\n\n\n\n\n\n\n\n\n\n11. Analyzing Spatial Point Process Using K-Function\nThe K-function measures the number of points within a given distance of other points in a point pattern, providing insight into clustering over different scales.\n\n11.1 Choa Chu Kang Planning Area\n\n11.1.1 Computing K-Function Estimate\n\nK_ck = Kest(childcare_ck_ppp, correction = \"Ripley\")\nplot(K_ck, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n\n\n\nWhy: The K-function helps in understanding clustering or regularity at multiple scales in the Choa Chu Kang area.\nFunctions:\n\nKest(): Computes the empirical K-function for a point pattern.\n\n\n\n\n11.1.2 Performing Complete Spatial Randomness Test\n\nK_ck.csr &lt;- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(K_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\")\n\n\n\n\n\n\n\n\n\n\n\n11.2 Tampines Planning Area\n\n11.2.1 Computing K-Function Estimate\n\nK_tm = Kest(childcare_tm_ppp, correction = \"Ripley\")\nplot(K_tm, . -r ~ r, \n     ylab= \"K(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\n\n\n\n\n\n\n11.2.2 Performing Complete Spatial Randomness Test\n\nK_tm.csr &lt;- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(K_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"K(d)-r\", xlim=c(0,500))\n\n\n\n\n\n\n\n\n\n\n\n\n12. Analyzing Spatial Point Process Using L-Function\nThe L-function is a variance-stabilized transformation of the K-function, making it easier to interpret clustering or regularity.\n\n12.1 Choa Chu Kang Planning Area\n\n12.1.1 Computing L-Function Estimation\n\nL_ck = Lest(childcare_ck_ppp, correction = \"Ripley\")\nplot(L_ck, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n\n\n\nWhy: The L-function provides a clearer interpretation of clustering in the Choa Chu Kang area.\nFunctions:\n\nLest(): Computes the empirical L-function for a point pattern.\n\n\n\n\n12.1.2 Performing Complete Spatial Randomness Test\n\nL_ck.csr &lt;- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(L_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\n\n\n\n\n\n\n\n\n\n12.2 Tampines Planning Area\n\n12.2.1 Computing L-Function Estimation\n\nL_tm = Lest(childcare_tm_ppp, correction = \"Ripley\")\nplot(L_tm, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\n\n\n\n\n\n\n12.2.2 Performing Complete Spatial Randomness Test\n\nL_tm.csr &lt;- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(L_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"L(d)-r\", xlim=c(0,500))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "1. Overview\nSpatial Point Pattern Analysis examines the distribution pattern of points on a surface. These points can represent the locations of:\n\nEvents, such as crimes, traffic accidents, or disease outbreaks.\nBusiness services, like coffee shops and fast food outlets, or facilities such as childcare and eldercare centers.\n\nIn this exercise, I utilize functions from the spatstat package to explore the spatial point processes of childcare centers in Singapore.\nKey Questions:\n\nAre the childcare centers in Singapore randomly distributed across the country?\nIf not, where are the areas with a higher concentration of childcare centers?\n\n\n\n2. The Data\nTo answer these questions, I used three datasets:\n\nCHILDCARE: A point dataset with location and attribute information for childcare centers in Singapore. This dataset, in GeoJSON format, was downloaded from Data.gov.sg.\nMP14_SUBZONE_WEB_PL: A polygon dataset representing the 2014 Master Plan Planning Subzone boundaries provided by the Urban Redevelopment Authority (URA) in ESRI Shapefile format, also from Data.gov.sg.\nCostalOutline: A polygon dataset outlining the national boundary of Singapore, provided by the Singapore Land Authority (SLA) in ESRI Shapefile format.\n\n\n\n3. Installing and Loading the R Packages\nI installed and loaded the necessary R packages to handle spatial data, perform point pattern analysis, and create thematic maps:\n\npacman::p_load(sf, raster, spatstat, tmap, tidyverse)\n\n\npacman::p_load(): Ensures that the required packages are installed and loaded. The packages include:\n\nsf: For handling and analyzing spatial vector data.\nraster: For raster data manipulation.\nspatstat: For spatial point pattern analysis.\ntmap: For creating thematic maps.\ntidyverse: For general data manipulation and visualization.\n\n\n\n\n4. Spatial Data Wrangling\n\n4.1 Importing the Spatial Data\nI imported the datasets and ensured they all use the same coordinate reference system (CRS) for consistency in spatial analysis.\n\nchildcare_sf &lt;- st_read(\"data/child-care-services-geojson.geojson\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `child-care-services-geojson' from data source \n  `C:\\EasonXu-HY99\\IS415\\Hands-on_Ex\\Hands-on_Ex03\\data\\child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nst_transform(): Converts the spatial data to the Singapore-specific projected CRS (EPSG: 3414).\n\n\nsg_sf &lt;- st_read(dsn = \"data\", layer = \"CostalOutline\") \n\nReading layer `CostalOutline' from data source \n  `C:\\EasonXu-HY99\\IS415\\Hands-on_Ex\\Hands-on_Ex03\\data' using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n\n\n\nmpsz_sf &lt;- st_read(dsn = \"data\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\EasonXu-HY99\\IS415\\Hands-on_Ex\\Hands-on_Ex03\\data' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nst_crs(childcare_sf)  \n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\nst_crs(mpsz_sf)       \n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\nst_crs(sg_sf)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\nst_crs(): Checks the CRS of each dataset to ensure they are compatible for spatial operations.\n\n\nmpsz_sf &lt;- st_set_crs(mpsz_sf, 3414)\n\nWarning: st_crs&lt;- : replacing crs does not reproject data; use st_transform for\nthat\n\nsg_sf &lt;- st_set_crs(sg_sf, 3414)\n\nWarning: st_crs&lt;- : replacing crs does not reproject data; use st_transform for\nthat\n\n\n\nst_set_crs(): Assigns the specified CRS (EPSG: 3414) to the datasets if not already defined, ensuring all datasets are in the same spatial reference.\n\n\nchildcare_sf &lt;- st_transform(childcare_sf, crs = 3414)\n\n\nRe-applied the transformation to make sure the childcare dataset uses the correct CRS.\n\n\nst_crs(childcare_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\nst_crs(mpsz_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\nst_crs(sg_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\nConfirmed the CRS settings for all datasets.\n\n\n\n4.2 Mapping the Geospatial Data Sets\nTo visualize the spatial datasets, I created static and interactive maps using the tmap package:\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(sg_sf) +\n  tm_polygons(col = \"grey\", border.col = \"black\") +\ntm_shape(mpsz_sf) +  \n  tm_polygons(col = \"grey\", border.col = \"black\") +\ntm_shape(childcare_sf) +  \n  tm_dots(col = \"black\", size = 0.1)\n\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\"): Sets the mode for static plotting.\ntm_shape(): Specifies the spatial object to be used in the map.\ntm_polygons(): Plots polygon features with specified fill and border colors.\ntm_dots(): Adds point symbols to the map for representing the childcare centers.\n\nFor an interactive map:\n\ntmap_mode('view')\n\ntmap mode set to interactive viewing\n\ntm_shape(childcare_sf) + tm_dots()\n\n\n\n\n\n\ntmap_mode('view'): Switches to interactive viewing mode, allowing dynamic exploration of the spatial data.\n\nReturning to static plotting mode:\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\n\n\nResets to static plotting after using the interactive mode.\n\n\n\n\n5. Geospatial Data Wrangling\n\n5.1 Converting sf Data Frames to sp’s Spatial* Class\nTo perform certain spatial analyses, I needed to convert sf data frames into sp’s Spatial* class objects.\n\nchildcare &lt;- as_Spatial(childcare_sf)\nmpsz &lt;- as_Spatial(mpsz_sf)\nsg &lt;- as_Spatial(sg_sf)\n\n\nas_Spatial(): Converts an sf object into an sp object.\n\n\nsummary(childcare)\n\nObject of class SpatialPointsDataFrame\nCoordinates:\n               min      max\ncoords.x1 11203.01 45404.24\ncoords.x2 25667.60 49300.88\ncoords.x3     0.00     0.00\nIs projected: TRUE \nproj4string :\n[+proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1\n+x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0\n+units=m +no_defs]\nNumber of points: 1545\nData attributes:\n     Name           Description       \n Length:1545        Length:1545       \n Class :character   Class :character  \n Mode  :character   Mode  :character  \n\n\n\nsummary(mpsz)\n\nObject of class SpatialPolygonsDataFrame\nCoordinates:\n        min      max\nx  2667.538 56396.44\ny 15748.721 50256.33\nIs projected: TRUE \nproj4string :\n[+proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1\n+x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0\n+units=m +no_defs]\nData attributes:\n    OBJECTID       SUBZONE_NO      SUBZONE_N          SUBZONE_C        \n Min.   :  1.0   Min.   : 1.000   Length:323         Length:323        \n 1st Qu.: 81.5   1st Qu.: 2.000   Class :character   Class :character  \n Median :162.0   Median : 4.000   Mode  :character   Mode  :character  \n Mean   :162.0   Mean   : 4.625                                        \n 3rd Qu.:242.5   3rd Qu.: 6.500                                        \n Max.   :323.0   Max.   :17.000                                        \n    CA_IND           PLN_AREA_N         PLN_AREA_C          REGION_N        \n Length:323         Length:323         Length:323         Length:323        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n   REGION_C           INC_CRC            FMEL_UPD_D             X_ADDR     \n Length:323         Length:323         Min.   :2014-12-05   Min.   : 5093  \n Class :character   Class :character   1st Qu.:2014-12-05   1st Qu.:21864  \n Mode  :character   Mode  :character   Median :2014-12-05   Median :28465  \n                                       Mean   :2014-12-05   Mean   :27257  \n                                       3rd Qu.:2014-12-05   3rd Qu.:31674  \n                                       Max.   :2014-12-05   Max.   :50425  \n     Y_ADDR        SHAPE_Leng        SHAPE_Area      \n Min.   :19579   Min.   :  871.5   Min.   :   39438  \n 1st Qu.:31776   1st Qu.: 3709.6   1st Qu.:  628261  \n Median :35113   Median : 5211.9   Median : 1229894  \n Mean   :36106   Mean   : 6524.4   Mean   : 2420882  \n 3rd Qu.:39869   3rd Qu.: 6942.6   3rd Qu.: 2106483  \n Max.   :49553   Max.   :68083.9   Max.   :69748299  \n\n\n\nsummary(sg)\n\nObject of class SpatialPolygonsDataFrame\nCoordinates:\n        min      max\nx  2663.926 56047.79\ny 16357.981 50244.03\nIs projected: TRUE \nproj4string :\n[+proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1\n+x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0\n+units=m +no_defs]\nData attributes:\n    GDO_GID          MSLINK          MAPID    COSTAL_NAM       \n Min.   : 1.00   Min.   : 1.00   Min.   :0   Length:60         \n 1st Qu.:15.75   1st Qu.:17.75   1st Qu.:0   Class :character  \n Median :30.50   Median :33.50   Median :0   Mode  :character  \n Mean   :30.50   Mean   :33.77   Mean   :0                     \n 3rd Qu.:45.25   3rd Qu.:49.25   3rd Qu.:0                     \n Max.   :60.00   Max.   :67.00   Max.   :0                     \n\n\n\n\n5.2 Converting the Spatial* Class into Generic sp Format\nI further converted the sp objects into more generic formats used by other spatial analysis functions.\n\nchildcare_sp &lt;- as(childcare, \"SpatialPoints\")\nsg_sp &lt;- as(sg, \"SpatialPolygons\")\n\n\nWhy: Converting to generic sp formats allows compatibility with a wider range of functions and analyses in R.\nFunctions:\n\nas(): Converts objects from one class to another, in this case, converting to “SpatialPoints” and “SpatialPolygons”.\n\n\nChecking the converted objects:\n\nchildcare_sp\n\nclass       : SpatialPoints \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nsg_sp\n\nclass       : SpatialPolygons \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nChallenge: Understanding the differences between the Spatial* classes and generic sp objects is crucial for using the correct format in different analyses.\n\n\n\n5.3 Converting the Generic sp Format into spatstat’s ppp Format\nTo analyze spatial point patterns using spatstat, I converted the generic sp objects into ppp (planar point pattern) format.\n\nchildcare_ppp &lt;- as.ppp(childcare_sf)\n\nWarning in as.ppp.sf(childcare_sf): only first attribute column is used for\nmarks\n\nchildcare_ppp\n\nMarked planar point pattern: 1545 points\nmarks are of storage type  'character'\nwindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n\n\n\nWhy: The ppp format is specifically designed for spatial point pattern analysis in spatstat.\nFunctions:\n\nas.ppp(): Converts spatial objects into the ppp format.\n\n\nVisualizing and summarizing the ppp object:\n\nplot(childcare_ppp)\n\nWarning in default.charmap(ntypes, chars): Too many types to display every type\nas a different character\n\n\nWarning: Only 10 out of 1545 symbols are shown in the symbol map\n\n\n\n\n\n\n\n\n\n\nsummary(childcare_ppp)\n\nMarked planar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\nCoordinates are given to 11 decimal places\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n     1545 character character \n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units\n\n\n\nplot(): Visualizes the spatial distribution of points in the ppp object.\nsummary(): Provides a detailed summary of the ppp object, including the number of points and window properties.\n\n\n\n5.4 Handling Duplicated Points\nI checked for and handled any duplicated points in the dataset to ensure the accuracy of the spatial analysis.\n\nany(duplicated(childcare_ppp))\n\n[1] FALSE\n\n\n\nWhy: Detecting duplicated points is crucial as they can skew spatial point pattern analyses.\nFunctions:\n\nany(): Checks if there are any TRUE values in a logical vector, indicating duplicates in this case.\nduplicated(): Identifies duplicated points in the ppp object.\n\n\nChecking the multiplicity of points:\n\nmultiplicity(childcare_ppp)\n\n   [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [75] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [112] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [149] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [186] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [223] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [260] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [297] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [334] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [371] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [408] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [445] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [482] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [519] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [556] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [593] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [630] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [667] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [704] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [741] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [778] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [815] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [852] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [889] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [926] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [963] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1000] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1037] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1074] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1111] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1148] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1185] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1222] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1259] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1296] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1333] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1370] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1407] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1444] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1481] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1518] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n\n\n\nsum(multiplicity(childcare_ppp) &gt; 1)\n\n[1] 0\n\n\n\nmultiplicity(): Returns the number of times each point occurs.\nsum(): Sums the total number of duplicate points.\n\nVisualizing duplicated points:\n\ntmap_mode('view')\n\ntmap mode set to interactive viewing\n\ntm_shape(childcare) + tm_dots(alpha=0.4, size=0.05)\n\n\n\n\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\n\n\nWhy: Visualizing the data helps identify and understand the location and extent of duplicated points.\n\nHandling duplicates by jittering points:\n\nchildcare_ppp_jit &lt;- rjitter(childcare_ppp, retry=TRUE, nsim=1, drop=TRUE)\n\n\nany(duplicated(childcare_ppp_jit))\n\n[1] FALSE\n\n\n\nrjitter(): Randomly displaces points to reduce overlap, helping to handle duplicates while retaining the general spatial pattern.\n\n\n\n5.5 Creating owin Object\nI created an owin object to define the observation window for point pattern analysis.\n\nsg_owin &lt;- as.owin(sg_sf)\n\n\nWhy: Defining an observation window is necessary for controlling the area within which spatial point patterns are analyzed.\nFunctions:\n\nas.owin(): Converts a spatial object into an owin object, defining a spatial observation window.\n\n\nPlotting and summarizing the owin object:\n\nplot(sg_owin)\n\n\n\n\n\n\n\n\n\nsummary(sg_owin)\n\nWindow: polygonal boundary\n50 separate polygons (1 hole)\n                 vertices         area relative.area\npolygon 1 (hole)       30     -7081.18     -9.76e-06\npolygon 2              55     82537.90      1.14e-04\npolygon 3              90    415092.00      5.72e-04\npolygon 4              49     16698.60      2.30e-05\npolygon 5              38     24249.20      3.34e-05\npolygon 6             976  23344700.00      3.22e-02\npolygon 7             721   1927950.00      2.66e-03\npolygon 8            1992   9992170.00      1.38e-02\npolygon 9             330   1118960.00      1.54e-03\npolygon 10            175    925904.00      1.28e-03\npolygon 11            115    928394.00      1.28e-03\npolygon 12             24      6352.39      8.76e-06\npolygon 13            190    202489.00      2.79e-04\npolygon 14             37     10170.50      1.40e-05\npolygon 15             25     16622.70      2.29e-05\npolygon 16             10      2145.07      2.96e-06\npolygon 17             66     16184.10      2.23e-05\npolygon 18           5195 636837000.00      8.78e-01\npolygon 19             76    312332.00      4.31e-04\npolygon 20            627  31891300.00      4.40e-02\npolygon 21             20     32842.00      4.53e-05\npolygon 22             42     55831.70      7.70e-05\npolygon 23             67   1313540.00      1.81e-03\npolygon 24            734   4690930.00      6.47e-03\npolygon 25             16      3194.60      4.40e-06\npolygon 26             15      4872.96      6.72e-06\npolygon 27             15      4464.20      6.15e-06\npolygon 28             14      5466.74      7.54e-06\npolygon 29             37      5261.94      7.25e-06\npolygon 30            111    662927.00      9.14e-04\npolygon 31             69     56313.40      7.76e-05\npolygon 32            143    145139.00      2.00e-04\npolygon 33            397   2488210.00      3.43e-03\npolygon 34             90    115991.00      1.60e-04\npolygon 35             98     62682.90      8.64e-05\npolygon 36            165    338736.00      4.67e-04\npolygon 37            130     94046.50      1.30e-04\npolygon 38             93    430642.00      5.94e-04\npolygon 39             16      2010.46      2.77e-06\npolygon 40            415   3253840.00      4.49e-03\npolygon 41             30     10838.20      1.49e-05\npolygon 42             53     34400.30      4.74e-05\npolygon 43             26      8347.58      1.15e-05\npolygon 44             74     58223.40      8.03e-05\npolygon 45            327   2169210.00      2.99e-03\npolygon 46            177    467446.00      6.44e-04\npolygon 47             46    699702.00      9.65e-04\npolygon 48              6     16841.00      2.32e-05\npolygon 49             13     70087.30      9.66e-05\npolygon 50              4      9459.63      1.30e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 725376000 square units\nFraction of frame area: 0.401\n\n\n\n\n5.6 Combining Point Events Object and owin Object\nI combined the ppp and owin objects to focus on the analysis within the specified spatial boundary.\n\nchildcareSG_ppp = childcare_ppp[sg_owin]\n\n\nsummary(childcareSG_ppp)\n\nMarked planar point pattern:  1545 points\nAverage intensity 2.129929e-06 points per square unit\n\nCoordinates are given to 11 decimal places\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n     1545 character character \n\nWindow: polygonal boundary\n50 separate polygons (1 hole)\n                 vertices         area relative.area\npolygon 1 (hole)       30     -7081.18     -9.76e-06\npolygon 2              55     82537.90      1.14e-04\npolygon 3              90    415092.00      5.72e-04\npolygon 4              49     16698.60      2.30e-05\npolygon 5              38     24249.20      3.34e-05\npolygon 6             976  23344700.00      3.22e-02\npolygon 7             721   1927950.00      2.66e-03\npolygon 8            1992   9992170.00      1.38e-02\npolygon 9             330   1118960.00      1.54e-03\npolygon 10            175    925904.00      1.28e-03\npolygon 11            115    928394.00      1.28e-03\npolygon 12             24      6352.39      8.76e-06\npolygon 13            190    202489.00      2.79e-04\npolygon 14             37     10170.50      1.40e-05\npolygon 15             25     16622.70      2.29e-05\npolygon 16             10      2145.07      2.96e-06\npolygon 17             66     16184.10      2.23e-05\npolygon 18           5195 636837000.00      8.78e-01\npolygon 19             76    312332.00      4.31e-04\npolygon 20            627  31891300.00      4.40e-02\npolygon 21             20     32842.00      4.53e-05\npolygon 22             42     55831.70      7.70e-05\npolygon 23             67   1313540.00      1.81e-03\npolygon 24            734   4690930.00      6.47e-03\npolygon 25             16      3194.60      4.40e-06\npolygon 26             15      4872.96      6.72e-06\npolygon 27             15      4464.20      6.15e-06\npolygon 28             14      5466.74      7.54e-06\npolygon 29             37      5261.94      7.25e-06\npolygon 30            111    662927.00      9.14e-04\npolygon 31             69     56313.40      7.76e-05\npolygon 32            143    145139.00      2.00e-04\npolygon 33            397   2488210.00      3.43e-03\npolygon 34             90    115991.00      1.60e-04\npolygon 35             98     62682.90      8.64e-05\npolygon 36            165    338736.00      4.67e-04\npolygon 37            130     94046.50      1.30e-04\npolygon 38             93    430642.00      5.94e-04\npolygon 39             16      2010.46      2.77e-06\npolygon 40            415   3253840.00      4.49e-03\npolygon 41             30     10838.20      1.49e-05\npolygon 42             53     34400.30      4.74e-05\npolygon 43             26      8347.58      1.15e-05\npolygon 44             74     58223.40      8.03e-05\npolygon 45            327   2169210.00      2.99e-03\npolygon 46            177    467446.00      6.44e-04\npolygon 47             46    699702.00      9.65e-04\npolygon 48              6     16841.00      2.32e-05\npolygon 49             13     70087.30      9.66e-05\npolygon 50              4      9459.63      1.30e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 725376000 square units\nFraction of frame area: 0.401\n\n\n\nplot(childcareSG_ppp)\n\nWarning in default.charmap(ntypes, chars): Too many types to display every type\nas a different character\n\n\nWarning: Only 10 out of 1545 symbols are shown in the symbol map\n\n\n\n\n\n\n\n\n\n\nWhy: Combining the point events with the observation window ensures that the analysis is conducted only within the desired spatial extent.\n\n\n\n\n6. First-Order Spatial Point Patterns Analysis\n\n6.1 Kernel Density Estimation\n\n6.1.1 Computing Kernel Density Estimation Using Automatic Bandwidth Selection Method\n\nkde_childcareSG_bw &lt;- density(childcareSG_ppp, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\") \n\n\nplot(kde_childcareSG_bw)\n\n\n\n\n\n\n\n\n\nbw &lt;- bw.diggle(childcareSG_ppp)\nbw\n\n   sigma \n298.4095 \n\n\n\nWhy: Kernel Density Estimation (KDE) helps identify areas with higher point concentration. The bandwidth selection method (bw.diggle) is used to optimize the KDE for the data’s distribution.\nFunctions:\n\ndensity(): Computes the KDE for the point pattern.\nbw.diggle(): Selects the bandwidth automatically using Diggle’s method, which is suitable for spatial data with edge corrections.\n\n\n\n\n6.1.2 Rescaling KDE Values\n\nchildcareSG_ppp.km &lt;- rescale.ppp(childcareSG_ppp, 1000, \"km\")\n\n\nkde_childcareSG.bw &lt;- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG.bw)\n\n\n\n\n\n\n\n\n\nWhy: Rescaling helps in interpreting the KDE in a more familiar unit (e.g., kilometers).\nFunctions:\n\nrescale.ppp(): Rescales the spatial coordinates of the ppp object.\n\n\n\n\n\n6.2 Working with Different Automatic Bandwidth Methods\n\nbw.CvL(childcareSG_ppp.km)\n\n   sigma \n4.543278 \n\n\n\nbw.scott(childcareSG_ppp.km)\n\n sigma.x  sigma.y \n2.224898 1.450966 \n\n\n\nbw.ppl(childcareSG_ppp.km)\n\n    sigma \n0.3897114 \n\n\n\nbw.diggle(childcareSG_ppp.km)\n\n    sigma \n0.2984095 \n\n\n\nWhy: Exploring different bandwidth methods allows for comparison and selection of the best fit for the data.\nFunctions:\n\nbw.CvL(), bw.scott(), bw.ppl(), bw.diggle(): Different methods for selecting the bandwidth in KDE.\n\n\nVisualizing KDE with different bandwidths:\n\nkde_childcareSG.ppl &lt;- density(childcareSG_ppp.km, sigma=bw.ppl, edge=TRUE, kernel=\"gaussian\")\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"bw.diggle\")\nplot(kde_childcareSG.ppl, main = \"bw.ppl\")\n\n\n\n\n\n\n\n\n\n\n6.3 Working with Different Kernel Methods\n\npar(mfrow=c(2,2))\nplot(density(childcareSG_ppp.km, sigma=bw.ppl, edge=TRUE,  kernel=\"gaussian\"), main=\"Gaussian\")\nplot(density(childcareSG_ppp.km, sigma=bw.ppl, edge=TRUE, kernel=\"epanechnikov\"), main=\"Epanechnikov\")\n\nWarning in density.ppp(childcareSG_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\nplot(density(childcareSG_ppp.km, sigma=bw.ppl, edge=TRUE, kernel=\"quartic\"), main=\"Quartic\")\n\nWarning in density.ppp(childcareSG_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\nplot(density(childcareSG_ppp.km, sigma=bw.ppl, edge=TRUE, kernel=\"disc\"), main=\"Disc\")\n\nWarning in density.ppp(childcareSG_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\n\n\n\n\n\n\n\n\n\nWhy: Different kernel functions can affect the KDE results. Comparing different kernels helps determine the most appropriate method for the data.\nFunctions:\n\ndensity() with different kernel options (gaussian, epanechnikov, quartic, disc): Computes KDE using different smoothing kernels.\n\n\n\n\n\n7. Fixed and Adaptive KDE\n\n7.1 Computing KDE Using Fixed Bandwidth\n\nkde_childcareSG_600 &lt;- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG_600)\n\n\n\n\n\n\n\n\n\nWhy: A fixed bandwidth KDE uses a constant smoothing parameter (sigma) across the entire study area, providing a uniform level of smoothing. This approach is useful for identifying general patterns in the distribution of points.\nFunctions:\n\ndensity(): Computes kernel density estimates for point patterns. The sigma parameter specifies the bandwidth.\n\n\n\n\n7.2 Computing KDE Using Adaptive Bandwidth\n\nkde_childcareSG_adaptive &lt;- adaptive.density(childcareSG_ppp.km, method=\"kernel\")\nplot(kde_childcareSG_adaptive)\n\n\n\n\n\n\n\n\n\nWhy: An adaptive bandwidth KDE adjusts the smoothing parameter based on local point density, providing finer detail in areas with high point concentration and smoother estimates in sparse areas. This method is useful for identifying local clusters.\nFunctions:\n\nadaptive.density(): Computes KDE with adaptive bandwidth, adjusting the bandwidth according to point density.\n\n\nComparing fixed and adaptive bandwidth:\n\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"Fixed bandwidth\")\nplot(kde_childcareSG_adaptive, main = \"Adaptive bandwidth\")\n\n\n\n\n\n\n\n\n\nWhy: Comparing both methods visually helps to understand how different bandwidth strategies affect the KDE.\n\n\n\n7.3 Converting KDE Output into Grid Object\n\ngridded_kde_childcareSG_bw &lt;- as(kde_childcareSG.bw, \"SpatialGridDataFrame\")\nspplot(gridded_kde_childcareSG_bw)\n\n\n\n\n\n\n\n\n\nWhy: Converting KDE output into a grid format allows for easier visualization and manipulation within various GIS tools.\nFunctions:\n\nas(): Converts objects from one class to another.\nspplot(): Creates spatial plots of gridded data.\n\n\n\n7.3.1 Converting Gridded Output into Raster\n\nkde_childcareSG_bw_raster &lt;- raster(kde_childcareSG.bw)\n\n\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : layer \nvalues     : -8.476185e-15, 28.51831  (min, max)\n\n\n\nWhy: Raster conversion facilitates the integration of KDE results with other raster-based analyses or visualization techniques.\nFunctions:\n\nraster(): Converts a spatial object into a raster format.\n\n\n\n\n7.3.2 Assigning Projection Systems\n\nprojection(kde_childcareSG_bw_raster) &lt;- CRS(\"+init=EPSG:3414\")\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +units=m +no_defs \nsource     : memory\nnames      : layer \nvalues     : -8.476185e-15, 28.51831  (min, max)\n\n\n\nWhy: Assigning the correct CRS ensures that spatial analyses and visualizations are accurate and geographically meaningful.\nFunctions:\n\nprojection(): Assigns or retrieves the CRS of a raster object.\n\n\n\n\n\n7.4 Visualizing the Output in tmap\n\ntm_shape(kde_childcareSG_bw_raster) + \n  tm_raster(\"layer\", palette = \"viridis\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\n\n\n\n\n\n\n\n\nWhy: Visualizing KDE results with tmap provides a more intuitive and aesthetically pleasing representation of spatial data.\nFunctions:\n\ntm_shape(): Specifies the spatial object to be visualized.\ntm_raster(): Visualizes raster data with a color gradient.\ntm_layout(): Customizes the layout of the map.\n\n\n\n\n7.5 Comparing Spatial Point Patterns Using KDE\n\n7.5.1 Extracting Study Areas\n\npg &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"PUNGGOL\")\ntm &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"TAMPINES\")\nck &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"CHOA CHU KANG\")\njw &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"JURONG WEST\")\n\n\nWhy: Extracting specific study areas allows focused analysis on different regions to compare spatial point patterns.\nFunctions:\n\nfilter(): Subsets data based on specified conditions.\n\n\nPlotting study areas:\n\npar(mfrow=c(2,2))\nplot(pg, main = \"Ponggol\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\nplot(tm, main = \"Tampines\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\nplot(ck, main = \"Choa Chu Kang\")\n\nWarning: plotting the first 10 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\nplot(jw, main = \"Jurong West\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\n\n7.5.2 Creating owin Object\n\npg_owin = as.owin(pg)\ntm_owin = as.owin(tm)\nck_owin = as.owin(ck)\njw_owin = as.owin(jw)\n\n\nWhy: Converting study areas into owin objects defines the observation window for point pattern analysis within each area.\nFunctions:\n\nas.owin(): Converts a spatial object into an owin format.\n\n\n\n\n7.5.3 Combining Childcare Points and the Study Area\n\nchildcare_pg_ppp = childcare_ppp_jit[pg_owin]\nchildcare_tm_ppp = childcare_ppp_jit[tm_owin]\nchildcare_ck_ppp = childcare_ppp_jit[ck_owin]\nchildcare_jw_ppp = childcare_ppp_jit[jw_owin]\n\n\nWhy: Combining points with their respective study areas allows for localized point pattern analysis.\n\nRescaling point patterns:\n\nchildcare_pg_ppp.km = rescale.ppp(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale.ppp(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale.ppp(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale.ppp(childcare_jw_ppp, 1000, \"km\")\n\n\nWhy: Rescaling the data to kilometers facilitates comparison across different study areas.\nFunctions:\n\nrescale.ppp(): Rescales the coordinates of point pattern objects.\n\n\nVisualizing rescaled point patterns:\n\npar(mfrow=c(2,2))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\n\nWarning in default.charmap(ntypes, chars): Too many types to display every type\nas a different character\n\n\nWarning: Only 10 out of 61 symbols are shown in the symbol map\n\nplot(childcare_tm_ppp.km, main=\"Tampines\")\n\nWarning in default.charmap(ntypes, chars): Too many types to display every type\nas a different character\n\n\nWarning: Only 10 out of 90 symbols are shown in the symbol map\n\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\n\nWarning in default.charmap(ntypes, chars): Too many types to display every type\nas a different character\n\n\nWarning: Only 10 out of 61 symbols are shown in the symbol map\n\nplot(childcare_jw_ppp.km, main=\"Jurong West\")\n\nWarning in default.charmap(ntypes, chars): Too many types to display every type\nas a different character\n\n\nWarning: Only 10 out of 88 symbols are shown in the symbol map\n\n\n\n\n\n\n\n\n\n\n\n7.5.4 Computing KDE\n\npar(mfrow=c(2,2))\nplot(density(childcare_pg_ppp.km, sigma=bw.diggle, edge=TRUE,  kernel=\"gaussian\"), main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\"), main=\"Tempines\")\nplot(density(childcare_ck_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\"), main=\"Choa Chu Kang\")\nplot(density(childcare_jw_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\"), main=\"Jurong West\")\n\n\n\n\n\n\n\n\n\nWhy: Computing KDE for each area helps identify and compare spatial distribution patterns within different regions.\n\n\n\n7.5.5 Computing Fixed Bandwidth KDE\n\npar(mfrow=c(2,2))\nplot(density(childcare_ck_ppp.km, sigma=0.25, edge=TRUE,  kernel=\"gaussian\"), main=\"Chou Chu Kang\")\nplot(density(childcare_jw_ppp.km, sigma=0.25, edge=TRUE, kernel=\"gaussian\"), main=\"Jurong West\")\nplot(density(childcare_pg_ppp.km, sigma=0.25, edge=TRUE, kernel=\"gaussian\"), main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, sigma=0.25, edge=TRUE,  kernel=\"gaussian\"), main=\"Tampines\")\n\n\n\n\n\n\n\n\n\nWhy: Using a fixed bandwidth allows for direct comparison of KDE results across different study areas with a uniform smoothing parameter.\n\n\n\n\n\n8. Nearest Neighbor Analysis\n\n8.1 Testing Spatial Point Patterns Using Clark and Evans Test\n\nclarkevans.test(childcareSG_ppp, correction=\"none\", clipregion=\"sg_owin\", alternative=c(\"clustered\"), nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcareSG_ppp\nR = 0.55631, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n\n\nWhy: The Clark and Evans test determines whether a point pattern is more clustered, random, or regular compared to a Poisson distribution.\nFunctions:\n\nclarkevans.test(): Performs the Clark and Evans test for spatial point patterns.\n\n\n\n\n8.2 Clark and Evans Test: Choa Chu Kang Area\n\nclarkevans.test(childcare_ck_ppp, correction=\"none\", clipregion=NULL, alternative=c(\"two.sided\"), nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_ck_ppp\nR = 0.98126, p-value = 0.7794\nalternative hypothesis: two-sided\n\n\n\n\n8.3 Clark and Evans Test: Tampines Planning Area\n\nclarkevans.test(childcare_tm_ppp, correction=\"none\", clipregion=NULL, alternative=c(\"two.sided\"), nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_tm_ppp\nR = 0.80496, p-value = 0.0004004\nalternative hypothesis: two-sided\n\n\n\nWhy: Performing the Clark and Evans test on different areas allows for localized analysis of spatial point patterns to identify variations in clustering.\n\nContinue to Page 2"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "In R, set.seed() is a function used to set the seed of the random number generator. This is important when you want to ensure reproducibility in your code, especially when you’re working with functions that involve random number generation, such as simulations, sampling, or generating random numbers. (from ChatGPT)\nWhen you use set.seed() with a specific integer value, it initializes the random number generator to a specific state. This means that every time you run the same code with the same seed, you will get the same sequence of random numbers. This is particularly useful when you want to share your code with others or when you want to debug your code, as it ensures that your results are consistent and reproducible. (from ChatGPT)\n\nset.seed(123)  # Set the seed to 123\nsample(1:10, 5)# Output: 3 9 4 7 6\n\n[1]  3 10  2  8  6\n\n\nIf you run the same code again with set.seed(123), you will get the same output every time. (from ChatGPT)\n====================================================================\n\ninstall.packages(\"maptools\", repos = \"https://packagemanager.posit.co/cran/2023-10-13\")\n\n\nst_combine() returns a single, combined geometry, with no resolved boundaries; returned geometries may well be invalid. It simply groups geometries together without performing any topological operations or considering the relationships between the geometries.\nOn the other hand, st_union():\nst_union() returns a single geometry that represents the union of all geometries. Unlike st_combine(), st_union() performs topological operations to resolve boundaries and overlaps between geometries. It merges overlapping or touching geometries into one cohesive shape, ensuring that the returned geometry is valid. This function is often used when you need a true geometric union where boundaries are properly accounted for and combined.\n\n\npacman::p_load(sf, raster, spatstat, tmap, tidyverse)\nmpsz_sf &lt;- st_read(dsn = \"data\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\EasonXu-HY99\\IS415\\In-class_Ex\\In-class_Ex03\\data' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\nsg_sf &lt;- mpsz_sf %&gt;%\n  st_union()\n\nst_union() is used to derive the coatal outline sf tibble data.frme\n\nacled_sf &lt;- readr::read_csv(\"data/ACLED_Myanmar.csv\") %&gt;%\n  st_as_sf(coords = c( \"longitude\",\"latitude\"), crs = 4326) %&gt;%\n  st_transform(crs = 32647) %&gt;%\n    mutate(event_date = dmy(event_date))\n\nRows: 55574 Columns: 31\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (20): event_id_cnty, event_date, disorder_type, event_type, sub_event_ty...\ndbl (11): year, time_precision, inter1, inter2, interaction, iso, latitude, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "title": "In-class Exercise 4",
    "section": "",
    "text": "pacman::p_load(sf, raster, spatstat, sparr, tmap, tidyverse)\n\n\nkbb &lt;- st_read(dsn = \"data/rawdata\", layer = \"Kepulauan_Bangka_Belitung\")\n\n\nkbb_sf &lt;- st_read(dsn = \"data/rawdata\", layer = \"Kepulauan_Bangka_Belitung\") %&gt;%\n  st_union() %&gt;%\n  st_zm(drop = TRUE, what = \"ZM\") %&gt;%\n  st_transform(crs = 32748)\n\nReading layer `Kepulauan_Bangka_Belitung' from data source \n  `C:\\EasonXu-HY99\\IS415\\In-class_Ex\\In-class_Ex04\\data\\rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 298 features and 27 fields\nGeometry type: POLYGON\nDimension:     XYZ\nBounding box:  xmin: 105.1085 ymin: -3.116593 xmax: 106.8488 ymax: -1.501603\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nst_as_s2(): dropping Z and/or M coordinate\n\n\nConverting OWIN\n\nkbb_owin &lt;- as.owin(kbb_sf)\nkbb_owin\n\nwindow: polygonal boundary\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n\n\n\nclass(kbb_owin)\n\n[1] \"owin\"\n\n\nImporting and preparing Forest Fire data\n\nfire_sf &lt;- read_csv(\"data/rawdata/forestfires.csv\") %&gt;%\n  st_as_sf(coords = c(\"longitude\", \"latitude\"), crs = 4326) %&gt;%\n  st_transform(crs = 32748)\n\nRows: 741 Columns: 15\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (3): satellite, instrument, daynight\ndbl  (11): latitude, longitude, brightness, scan, track, acq_time, confidenc...\ndate  (1): acq_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nread_csv is from the readr package\n\nfire_sf &lt;- fire_sf %&gt;%\n  mutate(DayofYear = yday(acq_date)) %&gt;%\n  mutate(Month_num = month(acq_date)) %&gt;%\n  mutate(Month_fac = month(acq_date, label = TRUE, abbr = FALSE))\n\nlubridate package could be very useful to handle date data\n\nVisualising the Fire Points\n\ntm_shape(kbb_sf) + tm_polygons() + tm_shape(fire_sf) + tm_dots()\n\n\n\n\n\n\n\n\n\ntm_shape(kbb_sf) + tm_polygons() + tm_shape(fire_sf) + tm_dots(size = 0.1) + tm_facets(by = \"Month_fac\", free.coords = FALSE, drop.units = TRUE)\n\n\n\n\n\n\n\n\nNext,\nExtracting forest fires by month\n\nfire_month &lt;- fire_sf %&gt;%\n  select(Month_num)\n\nCreating ppp\n\nfire_month_ppp &lt;- as.ppp(fire_month)\nfire_month_ppp\n\nMarked planar point pattern: 741 points\nmarks are numeric, of storage type  'double'\nwindow: rectangle = [521564.1, 695791] x [9658137, 9828767] units\n\n\n\nsummary(fire_month_ppp)\n\nMarked planar point pattern:  741 points\nAverage intensity 2.49258e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   8.000   9.000   8.579  10.000  12.000 \n\nWindow: rectangle = [521564.1, 695791] x [9658137, 9828767] units\n                    (174200 x 170600 units)\nWindow area = 29728200000 square units\n\n\n\nany(duplicated(fire_month_ppp))\n\n[1] FALSE\n\n\nIncluding Owin Object\n\nfire_month_owin &lt;- fire_month_ppp[kbb_owin]\nsummary(fire_month_owin)\n\nMarked planar point pattern:  741 points\nAverage intensity 6.424519e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   8.000   9.000   8.579  10.000  12.000 \n\nWindow: polygonal boundary\n2 separate polygons (no holes)\n           vertices        area relative.area\npolygon 1     47493 11533600000      1.00e+00\npolygon 2       256      306427      2.66e-05\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n                     (193500 x 178600 units)\nWindow area = 11533900000 square units\nFraction of frame area: 0.334\n\n\n\nplot(fire_month_owin)\n\n\n\n\n\n\n\n\nComputing Spatio-Temporal KDE\n\nst_kde &lt;- spattemp.density(fire_month_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(st_kde)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 15102.47 (spatial)\n  lambda = 0.0304 (temporal)\n\nNo. of observations\n  741 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [512066.8, 705559.4] x [9655398, 9834006]\n\nTemporal bound\n  [1, 12]\n\nEvaluation\n  128 x 128 x 12 trivariate lattice\n  Density range: [1.233458e-27, 8.202976e-10]\n\n\nPlotting the Spatio-temporal KDE object\n\ntims &lt;- c(7,8,9,10,11,12)\npar(mfcol = c(2,3))\nfor(i in tims)(\n  plot(st_kde, i,\n       override.par=FALSE,\n       fix.range=TRUE,\n       main=paste(\"KDE at month\", i))\n)\n\n\n\n\n\n\n\n\n\nfire_yday_ppp &lt;- fire_sf %&gt;%\n  select(DayofYear) %&gt;%\n  as.ppp()\n\n\nfire_yday_owin &lt;- fire_yday_ppp[kbb_owin]\nsummary(fire_yday_owin)\n\nMarked planar point pattern:  741 points\nAverage intensity 6.424519e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   10.0   213.0   258.0   245.9   287.0   352.0 \n\nWindow: polygonal boundary\n2 separate polygons (no holes)\n           vertices        area relative.area\npolygon 1     47493 11533600000      1.00e+00\npolygon 2       256      306427      2.66e-05\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n                     (193500 x 178600 units)\nWindow area = 11533900000 square units\nFraction of frame area: 0.334\n\n\n\nkde_yday &lt;- spattemp.density(\n  fire_yday_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(kde_yday)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 15102.47 (spatial)\n  lambda = 6.3198 (temporal)\n\nNo. of observations\n  741 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [512066.8, 705559.4] x [9655398, 9834006]\n\nTemporal bound\n  [10, 352]\n\nEvaluation\n  128 x 128 x 343 trivariate lattice\n  Density range: [3.959516e-27, 2.751287e-12]\n\n\n\nplot(kde_yday)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExplore the animation"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/data/rawdata/Kepulauan_Bangka_Belitung.html",
    "href": "In-class_Ex/In-class_Ex04/data/rawdata/Kepulauan_Bangka_Belitung.html",
    "title": "IS415 - Xu Haiyang",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     \n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "title": "Hands_on Exercise 4",
    "section": "",
    "text": "A spatio-temporal point process (also known as a space-time or spatial-temporal point process) is a random collection of points where each point represents the time and location of an event. These events can include disease outbreaks, sightings or births of species, or occurrences of natural disasters like fires, earthquakes, and volcanic eruptions.\nWith the growing availability of geographically and temporally indexed data, analyzing spatio-temporal point patterns has become increasingly important in various fields. In this chapter, I will demonstrate how to use different R packages to run spatio-temporal point pattern analyses. The example will focus on forest fire events in Kepulauan Bangka Belitung, Indonesia, from January 1, 2023, to December 31, 2023."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#overview",
    "title": "Hands_on Exercise 4",
    "section": "",
    "text": "A spatio-temporal point process (also known as a space-time or spatial-temporal point process) is a random collection of points where each point represents the time and location of an event. These events can include disease outbreaks, sightings or births of species, or occurrences of natural disasters like fires, earthquakes, and volcanic eruptions.\nWith the growing availability of geographically and temporally indexed data, analyzing spatio-temporal point patterns has become increasingly important in various fields. In this chapter, I will demonstrate how to use different R packages to run spatio-temporal point pattern analyses. The example will focus on forest fire events in Kepulauan Bangka Belitung, Indonesia, from January 1, 2023, to December 31, 2023."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#the-data",
    "title": "Hands_on Exercise 4",
    "section": "The Data",
    "text": "The Data\nFor this exercise, I will use two datasets:\n\nforestfires: A CSV file containing the locations of forest fires detected by the MODIS sensor. The data is available from the Fire Information for Resource Management System. I will only use the forest fires within Kepulauan Bangka Belitung.\nKepulauan_Bangka_Belitung: An ESRI shapefile containing sub-district boundaries (kelurahan) of Kepulauan Bangka Belitung. The data was downloaded from the Indonesia Geospatial Portal. This shapefile originally covers all of Indonesia, but I will extract only the relevant sub-districts."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#installing-and-loading-the-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#installing-and-loading-the-r-packages",
    "title": "Hands_on Exercise 4",
    "section": "Installing and Loading the R Packages",
    "text": "Installing and Loading the R Packages\nTo begin, I installed and loaded the necessary packages:\n\npacman::p_load(sf, raster, spatstat, sparr, tmap, tidyverse, animation, magick)\n\n\npacman::p_load(): This function ensures that the required packages are installed and loaded if not already available. The key packages used here include:\n\nsf: For spatial vector data manipulation.\nraster: For raster data manipulation.\nspatstat: For spatial point pattern analysis.\nsparr: For spatio-temporal point pattern analysis.\ntmap: For thematic mapping.\ntidyverse: For data manipulation."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#importing-and-preparing-study-area",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#importing-and-preparing-study-area",
    "title": "Hands_on Exercise 4",
    "section": "Importing and Preparing Study Area",
    "text": "Importing and Preparing Study Area\nI imported the shapefile for Kepulauan Bangka Belitung and prepared it for analysis:\n\nkbb &lt;- st_read(dsn = \"data/rawdata\", layer = \"Kepulauan_Bangka_Belitung\")\n\n\nkbb_sf &lt;- st_read(dsn = \"data/rawdata\", layer = \"Kepulauan_Bangka_Belitung\") %&gt;%\n  st_union() %&gt;%\n  st_zm(drop = TRUE, what = \"ZM\") %&gt;%\n  st_transform(crs = 32748)\n\nReading layer `Kepulauan_Bangka_Belitung' from data source \n  `C:\\EasonXu-HY99\\IS415\\Hands-on_Ex\\Hands-on_Ex04\\data\\rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 298 features and 27 fields\nGeometry type: POLYGON\nDimension:     XYZ\nBounding box:  xmin: 105.1085 ymin: -3.116593 xmax: 106.8488 ymax: -1.501603\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nst_as_s2(): dropping Z and/or M coordinate\n\n\n\nWhy: I unioned and transformed the spatial data into the appropriate coordinate reference system (EPSG: 32748) to ensure consistency with the fire data.\nFunctions:\n\nst_union(): Combines geometries into a single geometry.\nst_zm(): Removes Z (elevation) and M (measure) dimensions if present.\nst_transform(): Projects the spatial data to the specified CRS.\n\n\nNext, I converted the spatial data into an observation window for further analysis:\n\nkbb_owin &lt;- as.owin(kbb_sf)\nkbb_owin\n\nwindow: polygonal boundary\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n\n\n\nclass(kbb_owin)\n\n[1] \"owin\"\n\n\n\nWhy: Converting the shapefile into an owin object allows it to be used in point pattern analysis.\nFunctions:\n\nas.owin(): Converts the spatial object into a window object for use with the spatstat package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#importing-and-preparing-forest-fire-data",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#importing-and-preparing-forest-fire-data",
    "title": "Hands_on Exercise 4",
    "section": "Importing and Preparing Forest Fire Data",
    "text": "Importing and Preparing Forest Fire Data\nI imported the forest fire data from a CSV file and transformed it into an sf object:\n\nfire_sf &lt;- read_csv(\"data/rawdata/forestfires.csv\") %&gt;%\n  st_as_sf(coords = c(\"longitude\", \"latitude\"), crs = 4326) %&gt;%\n  st_transform(crs = 32748)\n\nRows: 741 Columns: 15\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (3): satellite, instrument, daynight\ndbl  (11): latitude, longitude, brightness, scan, track, acq_time, confidenc...\ndate  (1): acq_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nWhy: The forest fire data is converted into an sf object for spatial analysis and then projected to the same CRS as the study area.\nFunctions:\n\nread_csv(): Reads CSV data into a data frame.\nst_as_sf(): Converts the data frame into an sf object using the longitude and latitude columns as coordinates.\n\n\n\nHandling Date Data\nI extracted additional information from the date column:\n\nfire_sf &lt;- fire_sf %&gt;%\n  mutate(DayofYear = yday(acq_date)) %&gt;%\n  mutate(Month_num = month(acq_date)) %&gt;%\n  mutate(Month_fac = month(acq_date, label = TRUE, abbr = FALSE))\n\n\nWhy: I extracted the day of the year and month from the acquisition date to facilitate monthly and day-based analysis.\nFunctions:\n\nyday(): Extracts the day of the year from a date.\nmonth(): Extracts the month from a date, with an option for labeled months."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualizing-the-fire-points",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualizing-the-fire-points",
    "title": "Hands_on Exercise 4",
    "section": "Visualizing the Fire Points",
    "text": "Visualizing the Fire Points\nTo visualize the fire points over the study area:\n\ntm_shape(kbb_sf) + tm_polygons() + tm_shape(fire_sf) + tm_dots()\n\n\n\n\n\n\n\n\n\nWhy: This basic visualization helps confirm that the fire points are correctly aligned with the study area.\n\nNext, I created a faceted map showing the fire points by month:\n\ntm_shape(kbb_sf) + tm_polygons() + tm_shape(fire_sf) + tm_dots(size = 0.1) + tm_facets(by = \"Month_fac\", free.coords = FALSE, drop.units = TRUE)\n\n\n\n\n\n\n\n\n\nWhy: Faceted maps display fire points month by month, revealing temporal patterns in the fire events."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#extracting-and-creating-point-pattern-object",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#extracting-and-creating-point-pattern-object",
    "title": "Hands_on Exercise 4",
    "section": "Extracting and Creating Point Pattern Object",
    "text": "Extracting and Creating Point Pattern Object\nI extracted the fire events by month:\n\nfire_month &lt;- fire_sf %&gt;%\n  select(Month_num)\n\nThen, I created a point pattern object (ppp) for the fire events:\n\nfire_month_ppp &lt;- as.ppp(fire_month)\nfire_month_ppp\n\nMarked planar point pattern: 741 points\nmarks are numeric, of storage type  'double'\nwindow: rectangle = [521564.1, 695791] x [9658137, 9828767] units\n\n\n\nsummary(fire_month_ppp)\n\nMarked planar point pattern:  741 points\nAverage intensity 2.49258e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   8.000   9.000   8.579  10.000  12.000 \n\nWindow: rectangle = [521564.1, 695791] x [9658137, 9828767] units\n                    (174200 x 170600 units)\nWindow area = 29728200000 square units\n\n\n\nWhy: Creating a ppp object allows me to analyze the fire events using spatial point pattern methods.\nFunctions:\n\nas.ppp(): Converts an sf object into a point pattern object.\nsummary(): Provides a summary of the point pattern object, including the number of points and window properties.\n\n\nChecking for duplicate points:\n\nany(duplicated(fire_month_ppp))\n\n[1] FALSE\n\n\nIncluding the observation window:\n\nfire_month_owin &lt;- fire_month_ppp[kbb_owin]\nsummary(fire_month_owin)\n\nMarked planar point pattern:  741 points\nAverage intensity 6.424519e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   8.000   9.000   8.579  10.000  12.000 \n\nWindow: polygonal boundary\n2 separate polygons (no holes)\n           vertices        area relative.area\npolygon 1     47493 11533600000      1.00e+00\npolygon 2       256      306427      2.66e-05\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n                     (193500 x 178600 units)\nWindow area = 11533900000 square units\nFraction of frame area: 0.334\n\n\n\nplot(fire_month_owin)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#computing-spatio-temporal-kde",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#computing-spatio-temporal-kde",
    "title": "Hands_on Exercise 4",
    "section": "Computing Spatio-Temporal KDE",
    "text": "Computing Spatio-Temporal KDE\nI computed the spatio-temporal kernel density estimation (STKDE) for the fire events:\n\nst_kde &lt;- spattemp.density(fire_month_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(st_kde)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 15102.47 (spatial)\n  lambda = 0.0304 (temporal)\n\nNo. of observations\n  741 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [512066.8, 705559.4] x [9655398, 9834006]\n\nTemporal bound\n  [1, 12]\n\nEvaluation\n  128 x 128 x 12 trivariate lattice\n  Density range: [1.233458e-27, 8.202976e-10]\n\n\n\nWhy: STKDE estimates the intensity of fire events over time and space, revealing spatio-temporal patterns in the data.\nFunctions:\n\nspattemp.density(): Computes spatio-temporal kernel density estimation.\n\n\n\nPlotting the Spatio-Temporal KDE Object\n\ntims &lt;- c(7,8,9,10,11,12)\npar(mfcol = c(2,3))\nfor(i in tims)(\n  plot(st_kde, i,\n       override.par=FALSE,\n       fix.range=TRUE,\n       main=paste(\"KDE at month\", i))\n)\n\n\n\n\n\n\n\n\n\nWhy: This loop plots the STKDE results for selected months, helping to visualize the intensity of fire events across different time periods."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#computing-stkde-by-day-of-year",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#computing-stkde-by-day-of-year",
    "title": "Hands_on Exercise 4",
    "section": "Computing STKDE by Day of Year",
    "text": "Computing STKDE by Day of Year\nI repeated the STKDE analysis by day of the year:\n\nfire_yday_ppp &lt;- fire_sf %&gt;%\n  select(DayofYear) %&gt;%\n  as.ppp()\n\n\nfire_yday_owin &lt;- fire_yday_ppp[kbb_owin]\nsummary(fire_yday_owin)\n\nMarked planar point pattern:  741 points\nAverage intensity 6.424519e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   10.0   213.0   258.0   245.9   287.0   352.0 \n\nWindow: polygonal boundary\n2 separate polygons (no holes)\n           vertices        area relative.area\npolygon 1     47493 11533600000      1.00e+00\npolygon 2       256      306427      2.66e-05\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n                     (193500 x 178600 units)\nWindow area = 11533900000 square units\nFraction of frame area: 0.334\n\n\n\nkde_yday &lt;- spattemp.density(\n  fire_yday_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(kde_yday)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 15102.47 (spatial)\n  lambda = 6.3198 (temporal)\n\nNo. of observations\n  741 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [512066.8, 705559.4] x [9655398, 9834006]\n\nTemporal bound\n  [10, 352]\n\nEvaluation\n  128 x 128 x 343 trivariate lattice\n  Density range: [3.959516e-27, 2.751287e-12]\n\n\n\nWhy: This analysis provides a finer temporal resolution of the fire events, revealing how fire intensity changes throughout the year.\n\n\nsaveGIF({\n  for (i in 10:352) {  \n    plot(kde_yday, tselect = i)  \n  }\n}, movie.name = \"kde_yday.gif\", interval = 0.1)\n\nOutput at: kde_yday.gif\n\n\n[1] TRUE\n\ngif &lt;- image_read(\"kde_yday.gif\")\n\nprint(gif)\n\n# A tibble: 343 × 7\n   format width height colorspace matte filesize density\n   &lt;chr&gt;  &lt;int&gt;  &lt;int&gt; &lt;chr&gt;      &lt;lgl&gt;    &lt;int&gt; &lt;chr&gt;  \n 1 GIF      480    480 sRGB       FALSE        0 72x72  \n 2 GIF      480    480 sRGB       FALSE        0 72x72  \n 3 GIF      480    480 sRGB       FALSE        0 72x72  \n 4 GIF      480    480 sRGB       FALSE        0 72x72  \n 5 GIF      480    480 sRGB       FALSE        0 72x72  \n 6 GIF      480    480 sRGB       FALSE        0 72x72  \n 7 GIF      480    480 sRGB       FALSE        0 72x72  \n 8 GIF      480    480 sRGB       FALSE        0 72x72  \n 9 GIF      480    480 sRGB       FALSE        0 72x72  \n10 GIF      480    480 sRGB       FALSE        0 72x72  \n# ℹ 333 more rows"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "title": "Hands-on Exercise 5",
    "section": "",
    "text": "In this hands-on exercise, I focused on spatial analysis within Hunan province, using two primary data sets:\n\nHunan County Boundary Layer: A geospatial data set in ESRI shapefile format representing the county boundaries in Hunan province.\nHunan_2012.csv: A CSV file containing selected local development indicators for Hunan from the year 2012.\n\nI started by loading the necessary R packages using the pacman package for efficiency.\n\npacman::p_load(sf, spdep, tmap, tidyverse, knitr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#getting-the-data-into-r-environment",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#getting-the-data-into-r-environment",
    "title": "Hands-on Exercise 5",
    "section": "Getting the Data into R Environment",
    "text": "Getting the Data into R Environment\n\nImporting the Shapefile\nI imported the Hunan county boundary shapefile into the R environment using st_read() from the sf package. This function allowed me to load spatial data and keep the geometrical information intact for further spatial operations.\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\EasonXu-HY99\\IS415\\Hands-on_Ex\\Hands-on_Ex05\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\nImporting the CSV File\nNext, I imported the local development indicator data from the CSV file using read_csv() from the readr package. This aspatial data contains various local indicators that I will integrate with the spatial data.\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nPerforming Relational Join\nI performed a relational join between the spatial (shapefile) and aspatial (CSV) data using the left_join() function from the dplyr package. This allowed me to merge the development indicators into the spatial data, linking both datasets using a common identifier.\n\nhunan &lt;- left_join(hunan,hunan2012)%&gt;%\n  select(1:4, 7, 15)\n\nJoining with `by = join_by(County)`\n\n\n\n\nVisualizing Regional Development Indicators\nTo visualize the spatial distribution of the GDP per capita (GDPPC) across counties, I created a basemap that displays the county boundaries and labels using the tmap package. I then used qtm() to quickly generate a thematic map of the GDPPC indicator.\n\nbasemap &lt;- tm_shape(hunan) + tm_polygons() + tm_text(\"NAME_3\", size=0.5)\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\nThis visualization provided an initial look at how GDPPC varies spatially across the counties in Hunan.\n\n\nComputing Contiguity Spatial Weights\n\nQueen Contiguity Neighbors\nI began by computing Queen contiguity neighbors, which considers counties as neighbors if they share either a boundary or a vertex. I used poly2nb() from the spdep package to generate the Queen contiguity-based neighbors. The summary of the resulting neighbor object gave me insights into the number of neighbors each county has.\n\nwm_q &lt;- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nTo further understand the neighboring structure, I explored the neighbors of the first county in the dataset and retrieved the GDPPC values of the neighboring counties.\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\n\nhunan$NAME_3[c(2,3,4,57,85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\nRook Contiguity Neighbors\nNext, I computed Rook contiguity neighbors, which only considers counties as neighbors if they share a boundary (but not just a vertex). This method is more restrictive compared to Queen contiguity.\n\nwm_r &lt;- poly2nb(hunan, queen=FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\n\n\n\nVisualizing Contiguity Weights\nBefore visualizing the neighbors, I calculated the centroids of each county using the st_centroid() function. The centroids are used as the coordinates for plotting the neighbor connections.\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\n\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\n\ncoords &lt;- cbind(longitude, latitude)\n\n\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\n\nPlotting Queen Contiguity Neighbors\nI visualized the Queen contiguity neighbors by plotting the county boundaries and connecting neighboring counties with lines. Counties that are neighbors are highlighted in red.\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\n\n\n\n\n\n\n\n\n\n\nPlotting Rook Contiguity Neighbors\nSimilarly, I plotted the Rook contiguity neighbors. This helped me compare how the different contiguity methods represent spatial relationships.\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n\n\n\n\nComparing Queen and Rook Contiguity Maps\nTo better understand the differences between Queen and Rook contiguity, I plotted both maps side by side for comparison.\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"Queen Contiguity\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\nplot(hunan$geometry, border=\"lightgrey\", main=\"Rook Contiguity\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#computing-distance-based-neighbors",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#computing-distance-based-neighbors",
    "title": "Hands-on Exercise 5",
    "section": "Computing Distance-Based Neighbors",
    "text": "Computing Distance-Based Neighbors\n\nDetermining the Cut-off Distance\nI used k-nearest neighbors (knn) to determine the appropriate cut-off distance for creating distance-based neighbors. The function knn2nb() was used to compute the neighbors based on proximity, and I extracted the distances between the nearest neighbors using nbdists().\n\n#coords &lt;- coordinates(hunan)\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\n\n\nComputing a Fixed Distance Weight Matrix\nBased on the results from the knn analysis, I computed a fixed distance weight matrix using dnearneigh(). This matrix captures spatial relationships between counties based on a maximum cut-off distance of 62 units.\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nI further explored the structure of this weight matrix and analyzed the number of neighbors each county has within this distance threshold.\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\nTable and Connected Components Analysis\nTo explore the connectivity of counties based on their spatial relationships, I created a table showing the number of neighbors each county has. This helps to identify spatial isolation or well-connected regions.\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\nNext, I identified the connected components in the weight matrix using n.comp.nb() to determine how many disconnected regions (components) exist in the data. This is important for understanding how well the spatial network covers the study area.\n\nn_comp &lt;- n.comp.nb(wm_d62)\nn_comp$nc\n\n[1] 1\n\n\nThe table below shows the component each county belongs to, which can be used to visually inspect whether all counties are connected or if there are isolated regions.\n\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\n\n\nPlotting the Fixed Distance Weight Matrix\nI visualized the spatial relationships between counties based on a fixed distance weight matrix. The first plot shows connections between counties based on this distance, while the second plot highlights the 1st nearest neighbors.\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\n\n\n\n\nTo visualize both 1st nearest neighbors and distance-based neighbors side by side, I arranged them in a two-panel plot:\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"1st nearest neighbours\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\nplot(hunan$geometry, border=\"lightgrey\", main=\"Distance link\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)\n\n\n\n\n\n\n\n\n\n\nComputing Adaptive Distance Weight Matrix\nAn adaptive distance weight matrix ensures each county has a set number of neighbors, regardless of distance. I used the knn2nb() function with k=6, meaning each county has six nearest neighbors. This approach adapts to local density variations across the region.\n\nknn6 &lt;- knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\n\n\nPlotting Distance-Based Neighbors\nThe plot below visualizes the adaptive distance-based neighbors, highlighting how each county has exactly six nearest neighbors.\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n\n\n\n\nInverse Distance Weighting (IDW)\nInverse Distance Weighting (IDW) assigns weights to neighboring counties based on their distance. Closer counties are assigned higher weights. The nbdists() function calculates distances between counties, and lapply() applies the inverse distance formula to create the weights.\n\ndist &lt;- nbdists(wm_q, coords, longlat = TRUE)\nids &lt;- lapply(dist, function(x) 1/(x))\nids\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034\n\n\n\n\nRow-Standardized Weights Matrix\nA row-standardized weights matrix ensures that the sum of weights for each county is equal to 1, which allows for a balanced influence from neighboring counties. This matrix was generated using the nb2listw() function.\n\nrswm_q &lt;- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\nrswm_q$weights[10]\n\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n\nAdditionally, I created an inverse distance weight matrix and explored its weights.\n\nrswm_ids &lt;- nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\n\nrswm_ids$weights[1]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#application-of-spatial-weight-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#application-of-spatial-weight-matrix",
    "title": "Hands-on Exercise 5",
    "section": "Application of Spatial Weight Matrix",
    "text": "Application of Spatial Weight Matrix\n\nSpatial Lag with Row-Standardized Weights\nTo understand spatial autocorrelation, I calculated the spatial lag of GDP per capita (GDPPC). This lag reflects the influence of neighboring counties’ GDPPC values on each county, highlighting potential regional dependencies.\n\nGDPPC.lag &lt;- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nI then joined the spatial lag results with the original data for visualization.\n\nlag.list &lt;- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag.list)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag GDPPC\")\nhunan &lt;- left_join(hunan,lag.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\n\nhead(hunan)\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC lag GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667  24847.20\n2 Changde 21100 Hanshou      County Hanshou 20981  22724.80\n3 Changde 21101  Jinshi County City  Jinshi 34592  24143.25\n4 Changde 21102      Li      County      Li 24473  27737.50\n5 Changde 21103   Linli      County   Linli 25554  27270.25\n6 Changde 21104  Shimen      County  Shimen 27137  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nTo visualize the spatial lag of GDPPC alongside the original values, I created thematic maps.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_gdppc &lt;- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\nSpatial Lag as a Sum of Neighboring Values\nIn this section, I computed the spatial lag as a sum of neighboring values of GDP per capita (GDPPC) using equal weights for all neighbors. This approach gives equal importance to each neighboring county when calculating the spatial lag.\nI first created the weights for each neighbor by setting them to 1, effectively treating all neighbors equally.\n\nb_weights &lt;- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 &lt;- nb2listw(wm_q, glist = b_weights, style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nNext, I computed the spatial lag as a sum of the GDPPC values of the neighboring counties:\n\nlag_sum &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag_sum)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag_sum GDPPC\")\n\nI reviewed the computed lag values:\n\nlag_sum\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nThe results were then merged back with the original Hunan dataset for further analysis and visualization:\n\nhunan &lt;- left_join(hunan, lag.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nI visualized the original GDPPC values and the summed lag values side by side:\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc &lt;- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\nSpatial Window Average and Sum\nI then computed the spatial window average and spatial window sum of GDPPC values. In this context, each county is treated as its own neighbor along with the surrounding counties, so the calculation includes the county itself in the sum and average.\nTo start, I included each county in its own neighbor set using include.self() and then created a list of spatial weights.\n\nwm_qs &lt;- include.self(wm_q)\n\n\nwm_qs[[1]]\n\n[1]  1  2  3  4 57 85\n\n\n\nwm_qs &lt;- nb2listw(wm_qs)\nwm_qs\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n\n\nI calculated the spatial window average of GDPPC for each county:\n\nlag_w_avg_gpdpc &lt;- lag.listw(wm_qs, hunan$GDPPC)\nlag_w_avg_gpdpc\n\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\nI then prepared the results and merged them back into the Hunan dataset:\n\nlag.list.wm_qs &lt;- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))\nlag_wm_qs.res &lt;- as.data.frame(lag.list.wm_qs)\ncolnames(lag_wm_qs.res) &lt;- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\n\nhunan &lt;- left_join(hunan, lag_wm_qs.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nTo inspect the spatial window average alongside the spatial lag:\n\nhunan %&gt;%\n  select(\"County\", \"lag GDPPC\", \"lag_window_avg GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag GDPPC\nlag_window_avg GDPPC\ngeometry\n\n\n\n\nAnxiang\n24847.20\n24650.50\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n22724.80\n22434.17\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n24143.25\n26233.00\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n27737.50\n27084.60\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n27270.25\n26927.00\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n21248.80\n22230.17\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n43747.00\n47621.20\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n33582.71\n37160.12\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n45651.17\n49224.71\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n32027.62\n29886.89\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n32671.00\n26627.50\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n20810.00\n22690.17\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n25711.50\n25366.40\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n30672.33\n25825.75\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n33457.75\n30329.00\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n31689.20\n32682.83\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n20269.00\n25948.62\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n23901.60\n23987.67\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n25126.17\n25463.14\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n21903.43\n21904.38\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n22718.60\n23127.50\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n25918.80\n25949.83\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n20307.00\n20018.75\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n20023.80\n19524.17\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n16576.80\n18955.00\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n18667.00\n17800.40\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n14394.67\n15883.00\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n19848.80\n18831.33\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n15516.33\n14832.50\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518.00\n17965.00\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n17572.00\n17159.89\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n15200.12\n16199.44\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n18413.80\n18764.50\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n14419.33\n26878.75\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n24094.50\n23188.86\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n22019.83\n20788.14\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n12923.50\n12365.20\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n14756.00\n15985.00\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n13869.80\n13764.83\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n12296.67\n11907.43\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n15775.17\n17128.14\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n14382.86\n14593.62\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n11566.33\n11644.29\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n13199.50\n12706.00\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n23412.00\n21712.29\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n39541.00\n43548.25\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n36186.60\n35049.00\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n16559.60\n16226.83\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n20772.50\n19294.40\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n19471.20\n18156.00\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n19827.33\n19954.75\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n15466.80\n18145.17\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n12925.67\n12132.75\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n18577.17\n18419.29\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n14943.00\n14050.83\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n24913.00\n23619.75\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n25093.00\n24552.71\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n24428.80\n24733.67\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n17003.00\n16762.60\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n21143.75\n20932.60\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n20435.00\n19467.75\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n17131.33\n18334.00\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n24569.75\n22541.00\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n23835.50\n26028.00\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360.00\n29128.50\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n47383.40\n46569.00\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n55157.75\n47576.60\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n37058.00\n36545.50\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n21546.67\n20838.50\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n23348.67\n22531.00\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n42323.67\n42115.50\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n28938.60\n27619.00\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n25880.80\n27611.33\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n47345.67\n44523.29\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n18711.33\n18127.43\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n29087.29\n28746.38\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n20748.29\n20734.50\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n35933.71\n33880.62\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n15439.71\n14716.38\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n29787.50\n28516.22\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n18145.00\n18086.14\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n21617.00\n21244.50\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n29203.89\n29568.80\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n41363.67\n48119.71\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n22259.09\n22310.75\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n44939.56\n43151.60\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n16902.00\n17133.40\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n16930.00\n17009.33\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nFinally, I visualized the spatial window average of GDPPC:\n\nw_avg_gdppc &lt;- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\nSpatial Window Sum\nNext, I computed the spatial window sum of GDPPC values, which sums up the values for each county and its neighbors.\n\nwm_qs &lt;- include.self(wm_q)\nwm_qs\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\n\nb_weights &lt;- lapply(wm_qs, function(x) 0*x + 1)\nb_weights[1]\n\n[[1]]\n[1] 1 1 1 1 1 1\n\n\n\nb_weights2 &lt;- nb2listw(wm_qs, glist = b_weights, style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 536 1072 14160\n\n\nI calculated the spatial window sum of GDPPC values:\n\nw_sum_gdppc &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 147903 134605 131165 135423 134635 133381 238106 297281 344573 268982\n[11] 106510 136141 126832 103303 151645 196097 207589 143926 178242 175235\n[21] 138765 155699 160150 117145 113730  89002  63532 112988  59330  35930\n[31] 154439 145795 112587 107515 162322 145517  61826  79925  82589  83352\n[41] 119897 116749  81510  63530 151986 174193 210294  97361  96472 108936\n[51]  79819 108871  48531 128935  84305 188958 171869 148402  83813 104663\n[61] 155742  73336 112705  78084  58257 279414 237883 219273  83354  90124\n[71] 168462 165714 165668 311663 126892 229971 165876 271045 117731 256646\n[81] 126603 127467 295688 336838 267729 431516  85667  51028\n\n\nThe results were prepared and merged back into the Hunan dataset:\n\nw_sum_gdppc.res &lt;- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) &lt;- c(\"NAME_3\", \"w_sum GDPPC\")\n\n\nhunan &lt;- left_join(hunan, w_sum_gdppc.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nI reviewed the spatial window sum alongside the spatial lag sum:\n\nhunan %&gt;%\n  select(\"County\", \"lag_sum GDPPC\", \"w_sum GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag_sum GDPPC\nw_sum GDPPC\ngeometry\n\n\n\n\nAnxiang\n124236\n147903\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n113624\n134605\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n96573\n131165\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n110950\n135423\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n109081\n134635\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n106244\n133381\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n174988\n238106\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n235079\n297281\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n273907\n344573\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n256221\n268982\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n98013\n106510\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n104050\n136141\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n102846\n126832\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n92017\n103303\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n133831\n151645\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n158446\n196097\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n141883\n207589\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n119508\n143926\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n150757\n178242\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n153324\n175235\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n113593\n138765\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n129594\n155699\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n142149\n160150\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n100119\n117145\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n82884\n113730\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n74668\n89002\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n43184\n63532\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n99244\n112988\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n46549\n59330\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518\n35930\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n140576\n154439\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n121601\n145795\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n92069\n112587\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n43258\n107515\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n144567\n162322\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n132119\n145517\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n51694\n61826\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n59024\n79925\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n69349\n82589\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n73780\n83352\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n94651\n119897\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n100680\n116749\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n69398\n81510\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n52798\n63530\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n140472\n151986\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n118623\n174193\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n180933\n210294\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n82798\n97361\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n83090\n96472\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n97356\n108936\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n59482\n79819\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n77334\n108871\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n38777\n48531\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n111463\n128935\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n74715\n84305\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n174391\n188958\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n150558\n171869\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n122144\n148402\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n68012\n83813\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n84575\n104663\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n143045\n155742\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n51394\n73336\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n98279\n112705\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n47671\n78084\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360\n58257\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n236917\n279414\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n220631\n237883\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n185290\n219273\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n64640\n83354\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n70046\n90124\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n126971\n168462\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n144693\n165714\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n129404\n165668\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n284074\n311663\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n112268\n126892\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n203611\n229971\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n145238\n165876\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n251536\n271045\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n108078\n117731\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n238300\n256646\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n108870\n126603\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n108085\n127467\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n262835\n295688\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n248182\n336838\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n244850\n267729\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n404456\n431516\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n67608\n85667\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n33860\n51028\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nLastly, I visualized the spatial window sum of GDPPC:\n\nw_sum_gdppc &lt;- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html",
    "title": "Take-Home Exercise 1:Geospatial Analytics for Social Good: Application of Spatial and Spatio-temporal Point Patterns Analysis to discover the geographical distribution of Armed Conflict in Myanmar",
    "section": "",
    "text": "Millions of lives are devastated every year by armed conflicts, as wars continue to leave communities shattered. While the 1990s and early 2000s saw a decline in global conflict, the situation has deteriorated significantly since 2012. This new wave of conflict was sparked by the Arab uprisings in 2011, leading to wars in Libya, Syria, and Yemen. The instability in Libya further contributed to a prolonged crisis in the Sahel region. Subsequent major confrontations include the 2020 Azerbaijani-Armenian war over Nagorno-Karabakh and the brutal fighting in Ethiopia’s Tigray region. Myanmar’s military coup in 2021 and Russia’s 2022 invasion of Ukraine further escalated global violence. More recently, Sudan and Gaza have been devastated by conflict in 2023. As a result, more people today are being displaced, killed, and driven into humanitarian crises than at any time in recent decades.\n\n\nGeospatial analytics provides powerful tools to understand and address the complex societal problems driven by armed conflict. Through spatial point pattern analysis, researchers can gain deeper insights into the distribution of conflict events and their impact over time and space. This study focuses on Myanmar, a nation that has experienced escalating violence since the 2021 military coup. By applying spatial and spatio-temporal point pattern analysis techniques, this study aims to uncover patterns in the geographical distribution of armed conflict in Myanmar between 2021 and mid-2024.\n\n\n\nThe primary objective of this analysis is to utilize geospatial methodologies to examine the spatial and temporal trends of armed conflict in Myanmar. Specifically, this study will:\n\nInvestigate the spatial distribution of four key types of events: Battles, Explosion/Remote violence, Strategic developments, and Violence against civilians.\nAnalyze the quarterly frequency and intensity of conflict events from January 2021 to June 2024.\nApply spatial and spatio-temporal point pattern techniques to identify and map hotspots and clusters of conflict activity.\n\n\n\n\n\nArmed Conflict Data: The data used in this analysis is derived from the Armed Conflict Location & Event Data Project (ACLED), an internationally recognized source of data on violent conflict and protests worldwide. The dataset spans from January 2021 to June 2024, focusing on specific types of events in Myanmar.\nGIS Data: The geographical boundaries for analysis are based on geospatial data from the Myanmar Information Management Unit (MIMU). The dataset includes administrative boundaries at three levels: states and regions (admin1), districts (admin2), which will be integrated with the ACLED conflict data for spatial analysis."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#context",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#context",
    "title": "Take-Home Exercise 1:Geospatial Analytics for Social Good: Application of Spatial and Spatio-temporal Point Patterns Analysis to discover the geographical distribution of Armed Conflict in Myanmar",
    "section": "",
    "text": "Millions of lives are devastated every year by armed conflicts, as wars continue to leave communities shattered. While the 1990s and early 2000s saw a decline in global conflict, the situation has deteriorated significantly since 2012. This new wave of conflict was sparked by the Arab uprisings in 2011, leading to wars in Libya, Syria, and Yemen. The instability in Libya further contributed to a prolonged crisis in the Sahel region. Subsequent major confrontations include the 2020 Azerbaijani-Armenian war over Nagorno-Karabakh and the brutal fighting in Ethiopia’s Tigray region. Myanmar’s military coup in 2021 and Russia’s 2022 invasion of Ukraine further escalated global violence. More recently, Sudan and Gaza have been devastated by conflict in 2023. As a result, more people today are being displaced, killed, and driven into humanitarian crises than at any time in recent decades.\n\n\nGeospatial analytics provides powerful tools to understand and address the complex societal problems driven by armed conflict. Through spatial point pattern analysis, researchers can gain deeper insights into the distribution of conflict events and their impact over time and space. This study focuses on Myanmar, a nation that has experienced escalating violence since the 2021 military coup. By applying spatial and spatio-temporal point pattern analysis techniques, this study aims to uncover patterns in the geographical distribution of armed conflict in Myanmar between 2021 and mid-2024.\n\n\n\nThe primary objective of this analysis is to utilize geospatial methodologies to examine the spatial and temporal trends of armed conflict in Myanmar. Specifically, this study will:\n\nInvestigate the spatial distribution of four key types of events: Battles, Explosion/Remote violence, Strategic developments, and Violence against civilians.\nAnalyze the quarterly frequency and intensity of conflict events from January 2021 to June 2024.\nApply spatial and spatio-temporal point pattern techniques to identify and map hotspots and clusters of conflict activity.\n\n\n\n\n\nArmed Conflict Data: The data used in this analysis is derived from the Armed Conflict Location & Event Data Project (ACLED), an internationally recognized source of data on violent conflict and protests worldwide. The dataset spans from January 2021 to June 2024, focusing on specific types of events in Myanmar.\nGIS Data: The geographical boundaries for analysis are based on geospatial data from the Myanmar Information Management Unit (MIMU). The dataset includes administrative boundaries at three levels: states and regions (admin1), districts (admin2), which will be integrated with the ACLED conflict data for spatial analysis."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#data-1",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#data-1",
    "title": "Take-Home Exercise 1:Geospatial Analytics for Social Good: Application of Spatial and Spatio-temporal Point Patterns Analysis to discover the geographical distribution of Armed Conflict in Myanmar",
    "section": "2. Data",
    "text": "2. Data\nIn this section, I focus on loading and understanding both geospatial and aspatial data required for the analysis.\n\n2.1 Geospatial Data\nI begin by loading the Myanmar administrative boundary data using the sf package. This data includes two administrative levels: state/region (admin1) and district (admin2). These boundaries are crucial for analyzing the geographical distribution of armed conflict events across Myanmar at different levels of granularity.\n\npacman::p_load(sf, tidyverse, lubridate, spatstat, tmap, animation, magick, ggplot2, sparr)\n\n\nsf: I used sf to handle geospatial data, specifically reading and manipulating shapefiles for Myanmar’s administrative boundaries. This package simplifies working with spatial data by integrating it with data frames and providing a set of tools for spatial analysis and visualization.\ntidyverse: I included tidyverse to facilitate data manipulation and visualization. Its tools, like dplyr for data wrangling and ggplot2 for plotting, are essential for efficiently processing both spatial and non-spatial data.\nlubridate: This package is loaded to handle date and time information in future steps. It simplifies parsing and manipulating timestamps, which will be important when analyzing the temporal aspects of the armed conflict data.\nspatstat: I used spatstat for spatial point pattern analysis. It provides advanced tools for detecting clustering or dispersion of events within the spatial data, which is crucial for understanding the distribution of conflict points.\ntmap: I loaded tmap for creating high-quality thematic maps. This package allows both static and interactive visualizations of spatial data, offering more customization than the basic plot() function.\nanimation & magick: These packages are included to create animations and handle image processing. They will be useful later for generating dynamic visualizations or exporting images of the spatial data for reports and presentations.\nggplot2: As part of tidyverse, ggplot2 is used to create static visualizations. It provides powerful customization options for plotting spatial and non-spatial data, ensuring clear and detailed graphics for analysis.\nsparr: I included sparr for density estimation and relative risk analysis. It is essential for identifying geographical hotspots and understanding spatial risk, which is critical when analyzing conflict patterns.\n\nNext, I load the administrative boundary data for the state/region (admin1) and district (admin2) levels:\n\nadmin1 = st_read(dsn = \"data/geospatial/admin1\", layer = \"mmr_polbnda2_adm1_250k_mimu_1\")\n\nReading layer `mmr_polbnda2_adm1_250k_mimu_1' from data source \n  `C:\\EasonXu-HY99\\IS415\\Take-Home_Ex\\Take-Home_Ex01\\data\\geospatial\\admin1' \n  using driver `ESRI Shapefile'\nSimple feature collection with 18 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\nadmin2 = st_read(dsn = \"data/geospatial/admin2\", layer = \"mmr_polbnda_adm2_250k_mimu\")\n\nReading layer `mmr_polbnda_adm2_250k_mimu' from data source \n  `C:\\EasonXu-HY99\\IS415\\Take-Home_Ex\\Take-Home_Ex01\\data\\geospatial\\admin2' \n  using driver `ESRI Shapefile'\nSimple feature collection with 80 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\nTo explore the geometrical data for both layers:\n\nst_geometry(admin1)\n\nGeometry set for 18 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((95.20798 15.6904, 95.21097 15.6...\n\n\nMULTIPOLYGON (((96.17964 19.49327, 96.18219 19....\n\n\nMULTIPOLYGON (((95.70458 19.19143, 95.71076 19....\n\n\nMULTIPOLYGON (((93.36931 24.09112, 93.38098 24....\n\n\nMULTIPOLYGON (((97.59674 28.52616, 97.5925 28.5...\n\nst_geometry(admin2)\n\nGeometry set for 80 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((95.12637 18.50512, 95.12969 18....\n\n\nMULTIPOLYGON (((95.04462 15.74789, 95.04638 15....\n\n\nMULTIPOLYGON (((95.38231 17.41092, 95.38468 17....\n\n\nMULTIPOLYGON (((94.6942 16.41819, 94.6936 16.41...\n\n\nMULTIPOLYGON (((94.27572 15.85924, 94.2752 15.8...\n\n\nI then examine the structure of the datasets using glimpse():\n\nglimpse(admin1)\n\nRows: 18\nColumns: 7\n$ OBJECTID &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18\n$ ST       &lt;chr&gt; \"Ayeyarwady\", \"Bago (East)\", \"Bago (West)\", \"Chin\", \"Kachin\",…\n$ ST_PCODE &lt;chr&gt; \"MMR017\", \"MMR007\", \"MMR008\", \"MMR004\", \"MMR001\", \"MMR002\", \"…\n$ ST_RG    &lt;chr&gt; \"Region\", \"Region\", \"Region\", \"State\", \"State\", \"State\", \"Sta…\n$ ST_MMR   &lt;chr&gt; \"ဧရာဝတီတိုင်းဒေသကြီး\", \"ပဲခူးတိုင်းဒေသကြီး (အရှေ့)\", \"ပဲခူးတိုင်းဒေသကြီး (အနောက်)…\n$ PCode_V  &lt;dbl&gt; 9.4, 9.4, 9.4, 9.4, 9.4, 9.4, 9.4, 9.4, 9.4, 9.4, 9.4, 9.4, 9…\n$ geometry &lt;MULTIPOLYGON [°]&gt; MULTIPOLYGON (((95.20798 15..., MULTIPOLYGON (((96.17964 19..…\n\nglimpse(admin2)\n\nRows: 80\nColumns: 8\n$ OBJECTID &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18…\n$ ST       &lt;chr&gt; \"Ayeyarwady\", \"Ayeyarwady\", \"Ayeyarwady\", \"Ayeyarwady\", \"Ayey…\n$ ST_PCODE &lt;chr&gt; \"MMR017\", \"MMR017\", \"MMR017\", \"MMR017\", \"MMR017\", \"MMR017\", \"…\n$ DT       &lt;chr&gt; \"Hinthada\", \"Labutta\", \"Maubin\", \"Myaungmya\", \"Pathein\", \"Pya…\n$ DT_PCODE &lt;chr&gt; \"MMR017D002\", \"MMR017D004\", \"MMR017D005\", \"MMR017D003\", \"MMR0…\n$ DT_MMR   &lt;chr&gt; \"ဟင်္သာတခရိုင်\", \"လပွတ္တာခရိုင်\", \"မအူပင်ခရိုင်\", \"မြောင်းမြခရိုင်\", \"ပုသိမ်ခရိုင်\", \"…\n$ PCode_V  &lt;dbl&gt; 9.4, 9.4, 9.4, 9.4, 9.4, 9.4, 9.4, 9.4, 9.4, 9.4, 9.4, 9.4, 9…\n$ geometry &lt;MULTIPOLYGON [°]&gt; MULTIPOLYGON (((95.12637 18..., MULTIPOLYGON (((…\n\n\nFinally, I generate quick visualizations of the state/region and district boundaries:\n\npar(mfrow = c(1, 2))\n\nplot(admin1[\"ST\"], main = \"State/Region\")\n\n\n\n\n\n\n\nplot(admin2[\"ST\"], main = \"District\")\n\n\n\n\n\n\n\n\n\n\n2.2 Aspatial Data\nNext, I load the aspatial armed conflict data from ACLED, which contains detailed event information about conflicts in Myanmar. This dataset will be used alongside the geospatial data to analyze the distribution of these events.\n\nACLED &lt;- read_csv(\"data/aspatial/ACLED_Myanmar.csv\")\n\nRows: 51553 Columns: 31\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (20): event_id_cnty, event_date, disorder_type, event_type, sub_event_ty...\ndbl (11): year, time_precision, inter1, inter2, interaction, iso, latitude, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThe dataset is read into R using the read_csv() function, which imports it as a data frame for further processing.\n\nlist(ACLED)\n\n[[1]]\n# A tibble: 51,553 × 31\n   event_id_cnty event_date    year time_precision disorder_type      event_type\n   &lt;chr&gt;         &lt;chr&gt;        &lt;dbl&gt;          &lt;dbl&gt; &lt;chr&gt;              &lt;chr&gt;     \n 1 MMR64313      30 June 2024  2024              1 Political violence Battles   \n 2 MMR64320      30 June 2024  2024              1 Political violence Battles   \n 3 MMR64321      30 June 2024  2024              1 Political violence Battles   \n 4 MMR64322      30 June 2024  2024              1 Strategic develop… Strategic…\n 5 MMR64323      30 June 2024  2024              1 Political violence Battles   \n 6 MMR64324      30 June 2024  2024              1 Strategic develop… Strategic…\n 7 MMR64325      30 June 2024  2024              1 Political violence Battles   \n 8 MMR64326      30 June 2024  2024              1 Political violence Battles   \n 9 MMR64328      30 June 2024  2024              1 Political violence Battles   \n10 MMR64330      30 June 2024  2024              1 Political violence Battles   \n# ℹ 51,543 more rows\n# ℹ 25 more variables: sub_event_type &lt;chr&gt;, actor1 &lt;chr&gt;, assoc_actor_1 &lt;chr&gt;,\n#   inter1 &lt;dbl&gt;, actor2 &lt;chr&gt;, assoc_actor_2 &lt;chr&gt;, inter2 &lt;dbl&gt;,\n#   interaction &lt;dbl&gt;, civilian_targeting &lt;chr&gt;, iso &lt;dbl&gt;, region &lt;chr&gt;,\n#   country &lt;chr&gt;, admin1 &lt;chr&gt;, admin2 &lt;chr&gt;, admin3 &lt;chr&gt;, location &lt;chr&gt;,\n#   latitude &lt;dbl&gt;, longitude &lt;dbl&gt;, geo_precision &lt;dbl&gt;, source &lt;chr&gt;,\n#   source_scale &lt;chr&gt;, notes &lt;chr&gt;, fatalities &lt;dbl&gt;, tags &lt;chr&gt;, …\n\n\nI inspect the structure of the dataset using list(), ensuring that it contains the expected columns, such as event dates, event types, and geographical information (longitude and latitude).\n\n\n2.3 Data Preprocessing\nTo begin, I check the coordinate reference system (CRS) of the admin1 and admin2 layers to confirm the data uses an appropriate spatial projection. This ensures the data aligns correctly during analysis.\n\nst_crs(admin1)\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\nst_crs(admin2)\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\n\nThe function st_crs() retrieves the CRS for both datasets. Ensuring consistency in the CRS is critical for accurate spatial analysis.\n\nadmin1_utm &lt;- st_transform(admin1, 32647)\nadmin2_utm &lt;- st_transform(admin2, 32647)\n\nBoth layers are transformed to UTM Zone 47N (EPSG: 32647), a projection suitable for regional analysis. The st_transform() function reprojects the spatial data to ensure all layers are compatible during further analysis.\n\nst_crs(admin1_utm)\n\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n\nst_crs(admin2_utm)\n\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n\n\nAfter the transformation, I check the CRS of the transformed data to confirm the projection has been applied successfully.\nNext, I convert the aspatial ACLED data into a spatial object by assigning longitude and latitude coordinates and transforming it to match the same UTM Zone 47N projection as the administrative boundary layers.\n\nACLED_sf &lt;- st_as_sf(ACLED,\n                     coords = c(\"longitude\", \"latitude\"),\n                     crs = 4326) %&gt;%\n  st_transform(crs = 32647)\n\nUsing st_as_sf(), I convert the aspatial ACLED data into a simple feature (sf) object, specifying the longitude and latitude columns as coordinates. The initial CRS is set to EPSG: 4326 (WGS84), which is commonly used for geographic coordinates, and is then transformed to UTM 47N to match the boundary layers.\n\nglimpse(ACLED_sf)\n\nRows: 51,553\nColumns: 30\n$ event_id_cnty      &lt;chr&gt; \"MMR64313\", \"MMR64320\", \"MMR64321\", \"MMR64322\", \"MM…\n$ event_date         &lt;chr&gt; \"30 June 2024\", \"30 June 2024\", \"30 June 2024\", \"30…\n$ year               &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 202…\n$ time_precision     &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ disorder_type      &lt;chr&gt; \"Political violence\", \"Political violence\", \"Politi…\n$ event_type         &lt;chr&gt; \"Battles\", \"Battles\", \"Battles\", \"Strategic develop…\n$ sub_event_type     &lt;chr&gt; \"Armed clash\", \"Armed clash\", \"Armed clash\", \"Chang…\n$ actor1             &lt;chr&gt; \"People's Defense Force - Mandalay\", \"People's Defe…\n$ assoc_actor_1      &lt;chr&gt; \"MDA - AGF: Madaya - The Authentic Genes Force; SST…\n$ inter1             &lt;dbl&gt; 3, 3, 3, 1, 3, 1, 1, 2, 1, 1, 1, 1, 3, 3, 3, 7, 1, …\n$ actor2             &lt;chr&gt; \"Military Forces of Myanmar (2021-)\", \"Military For…\n$ assoc_actor_2      &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"Uniden…\n$ inter2             &lt;dbl&gt; 1, 1, 1, 0, 1, 0, 2, 1, 2, 2, 2, 3, 1, 1, 7, 0, 0, …\n$ interaction        &lt;dbl&gt; 13, 13, 13, 10, 13, 10, 12, 12, 12, 12, 12, 13, 13,…\n$ civilian_targeting &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ iso                &lt;dbl&gt; 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 1…\n$ region             &lt;chr&gt; \"Southeast Asia\", \"Southeast Asia\", \"Southeast Asia…\n$ country            &lt;chr&gt; \"Myanmar\", \"Myanmar\", \"Myanmar\", \"Myanmar\", \"Myanma…\n$ admin1             &lt;chr&gt; \"Mandalay\", \"Mandalay\", \"Mandalay\", \"Sagaing\", \"Sag…\n$ admin2             &lt;chr&gt; \"Mandalay\", \"Pyinoolwin\", \"Pyinoolwin\", \"Shwebo\", \"…\n$ admin3             &lt;chr&gt; \"Patheingyi\", \"Singu\", \"Thabeikkyin\", \"Khin-U\", \"My…\n$ location           &lt;chr&gt; \"Aung Tha Pyay\", \"Pin Lel Gyi\", \"Thabeikkyin\", \"Khi…\n$ geo_precision      &lt;dbl&gt; 2, 1, 2, 2, 2, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1, …\n$ source             &lt;chr&gt; \"Democratic Voice of Burma; Irrawaddy\", \"Irrawaddy\"…\n$ source_scale       &lt;chr&gt; \"National\", \"National\", \"National\", \"Subnational-Na…\n$ notes              &lt;chr&gt; \"On 30 June 2024, near Aung Tha Pyay village (Pathe…\n$ fatalities         &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ tags               &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ timestamp          &lt;dbl&gt; 1720552468, 1720552468, 1720552468, 1720552468, 172…\n$ geometry           &lt;POINT [m]&gt; POINT (214961 2452068), POINT (198303.2 24994…\n\n\nTo streamline the dataset, I select only the necessary columns for analysis, such as event dates, event types, actor information, location, and fatalities.\n\nACLED_sf &lt;- ACLED_sf %&gt;%\n  select(event_date, year, event_type, actor1, actor2, interaction, admin1, admin2, source_scale, fatalities, timestamp)\n\n\nACLED_sf &lt;- ACLED_sf %&gt;%\n  mutate(event_date = as.Date(event_date, format = \"%d %B %Y\")) \n\nNext, I format the event_date column into a proper Date object using mutate() and as.Date(). This ensures that the date column is correctly interpreted and can be used for temporal filtering and analysis.\n\nACLED_sf &lt;- ACLED_sf %&gt;%\n  filter(event_type %in% c(\"Battles\", \n                           \"Explosions/Remote violence\", \n                           \"Strategic developments\", \n                           \"Violence against civilians\"))\n\nI filter the dataset to focus on specific types of conflict events that are most relevant to the analysis: Battles, Explosions/Remote violence, Strategic developments, and Violence against civilians. This step reduces noise in the data and ensures the analysis is targeted at the most critical event types.\n\nhead(ACLED_sf)\n\nSimple feature collection with 6 features and 11 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 76997.72 ymin: 2428487 xmax: 214961 ymax: 2533434\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 6 × 12\n  event_date  year event_type            actor1 actor2 interaction admin1 admin2\n  &lt;date&gt;     &lt;dbl&gt; &lt;chr&gt;                 &lt;chr&gt;  &lt;chr&gt;        &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt; \n1 2024-06-30  2024 Battles               Peopl… Milit…          13 Manda… Manda…\n2 2024-06-30  2024 Battles               Peopl… Milit…          13 Manda… Pyino…\n3 2024-06-30  2024 Battles               Peopl… Milit…          13 Manda… Pyino…\n4 2024-06-30  2024 Strategic developmen… Milit… &lt;NA&gt;            10 Sagai… Shwebo\n5 2024-06-30  2024 Battles               PKDF … Milit…          13 Sagai… Sagai…\n6 2024-06-30  2024 Strategic developmen… Milit… &lt;NA&gt;            10 Sagai… Yinma…\n# ℹ 4 more variables: source_scale &lt;chr&gt;, fatalities &lt;dbl&gt;, timestamp &lt;dbl&gt;,\n#   geometry &lt;POINT [m]&gt;\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\n\ntm_shape(admin1_utm) +\n  tm_polygons(col = \"grey\", border.col = \"black\") +\ntm_shape(ACLED_sf) +\n  tm_dots(col = \"black\", size = 0.01)\n\n\n\n\n\n\n\n\nI create a static map showing the state boundaries from the admin1_utm dataset and the conflict event locations from ACLED_sf. Using tm_shape() and tm_polygons(), I plot the state boundaries in grey, and with tm_dots(), I overlay the conflict event points in black. This map provides a clear visual representation of the geographical distribution of conflict events across Myanmar.\nTo narrow down the focus of the analysis, I decided to identify the state with the highest number of conflict events. This allows for a more detailed examination of conflict patterns in a specific region.\nI first calculated the total number of events per administrative area (admin1) and visualized the distribution using a histogram. This provides an overview of the event counts across different regions, helping to identify the area with the most activity.\n\nevent_counts_by_admin1 &lt;- ACLED_sf %&gt;%\n  group_by(admin1) %&gt;%\n  summarize(event_count = n()) %&gt;%\n  arrange(desc(event_count))  \n\nUsing group_by() and summarize(), I calculated the number of events in each admin1 area, then arranged the areas in descending order to highlight the regions with the highest number of events.\n\nggplot(event_counts_by_admin1, aes(x = reorder(admin1, -event_count), y = event_count)) +\n  geom_bar(stat = \"identity\", fill = \"skyblue\") +\n  coord_flip() +  \n  labs(title = \"Number of Events by Admin1 Area\",\n       x = \"Admin1 Area\",\n       y = \"Number of Events\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nI used ggplot2 to create a bar plot that visually represents the number of conflict events by admin1 area. The coord_flip() function was used to rotate the plot for better readability, and the bars are ordered by event count. The color scheme and minimal theme improve clarity, with labels clearly indicating the focus of the plot.\nAfter reviewing the histogram, I chose to focus on the Sagaing area, as it had the highest number of events. To filter the dataset, I selected only the events that occurred in Sagaing.\n\nACLED_sf &lt;- ACLED_sf %&gt;%\n  filter(admin1 == \"Sagaing\")\n\nI applied the filter() function to retain only the conflict events within Sagaing, reducing the dataset to focus on this specific region. This will allow for a more granular analysis of conflict events in Sagaing.\n\nhead(ACLED_sf)\n\nSimple feature collection with 6 features and 11 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 76997.72 ymin: 2428487 xmax: 202272.4 ymax: 2689238\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 6 × 12\n  event_date  year event_type            actor1 actor2 interaction admin1 admin2\n  &lt;date&gt;     &lt;dbl&gt; &lt;chr&gt;                 &lt;chr&gt;  &lt;chr&gt;        &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt; \n1 2024-06-30  2024 Strategic developmen… Milit… &lt;NA&gt;            10 Sagai… Shwebo\n2 2024-06-30  2024 Battles               PKDF … Milit…          13 Sagai… Sagai…\n3 2024-06-30  2024 Strategic developmen… Milit… &lt;NA&gt;            10 Sagai… Yinma…\n4 2024-06-29  2024 Battles               PKDF … Milit…          13 Sagai… Sagai…\n5 2024-06-28  2024 Battles               KIO/K… Milit…          12 Sagai… Katha \n6 2024-06-27  2024 Battles               Peopl… Milit…          13 Sagai… Monywa\n# ℹ 4 more variables: source_scale &lt;chr&gt;, fatalities &lt;dbl&gt;, timestamp &lt;dbl&gt;,\n#   geometry &lt;POINT [m]&gt;\n\n\nNext, I filtered the admin2_utm layer to isolate the district boundaries for Sagaing. This will allow me to visualize the conflict events within the context of Sagaing’s district divisions.\n\nsagaing &lt;- admin2_utm %&gt;% filter(ST == \"Sagaing\")\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\nI set the tmap mode to static plotting to create a visual representation of the conflict events in Sagaing.\n\ntm_shape(sagaing) +\n  tm_polygons(col = \"grey\", border.col = \"black\") +\ntm_shape(ACLED_sf) +\n  tm_dots(col = \"black\", size = 0.01) +\ntm_layout(title = \"Events in Sagaing Area\", legend.outside = TRUE)\n\n\n\n\n\n\n\n\nI used tmap to create a map showing the district boundaries of Sagaing and overlaid the conflict events as black dots. The grey polygons represent the districts, while the event points are plotted in black. The map is titled “Events in Sagaing Area,” and the layout includes an external legend to enhance clarity."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "title": "In-class Exercise 5",
    "section": "",
    "text": "pacman::p_load(sf, spdep, tmap, tidyverse, knitr, GWmodel)\n\n\nhunan = st_read(dsn = \"data/geospatial\", layer = \"Hunan\")\n\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\nhunan &lt;- left_join(hunan,hunan2012)%&gt;%\n  select(1:3, 7, 15, 16, 31, 32)\n\n\nwrite_rds(hunan, \"data/rds/hunan.rds\")\n\n\nhunan_sp &lt;- hunan %&gt;%\n  as_Spatial()\n\n\nbw_AIC &lt;- bw.gwr(GDPPC ~1,\n                 data = hunan_sp,\n                 approach = \"AIC\",\n                 adaptive = TRUE,\n                 kernel = \"bisquare\",\n                 longlat = T)\n\nAdaptive bandwidth (number of nearest neighbours): 62 AICc value: 1923.156 \nAdaptive bandwidth (number of nearest neighbours): 46 AICc value: 1920.469 \nAdaptive bandwidth (number of nearest neighbours): 36 AICc value: 1917.324 \nAdaptive bandwidth (number of nearest neighbours): 29 AICc value: 1916.661 \nAdaptive bandwidth (number of nearest neighbours): 26 AICc value: 1914.897 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \n\nbw_AIC\n\n[1] 22\n\n\n\nbw_CV &lt;- bw.gwr(GDPPC ~ 1,\n                 data = hunan_sp,\n                 approach = \"CV\",\n                 adaptive = TRUE,\n                 kernel = \"bisquare\",\n                 longlat = T)\n\nAdaptive bandwidth: 62 CV score: 15515442343 \nAdaptive bandwidth: 46 CV score: 14937956887 \nAdaptive bandwidth: 36 CV score: 14408561608 \nAdaptive bandwidth: 29 CV score: 14198527496 \nAdaptive bandwidth: 26 CV score: 13898800611 \nAdaptive bandwidth: 22 CV score: 13662299974 \nAdaptive bandwidth: 22 CV score: 13662299974 \n\nbw_CV\n\n[1] 22\n\n\n\nbw_CV &lt;- bw.gwr(GDPPC ~ 1,\n                 data = hunan_sp,\n                 approach = \"CV\",\n                 adaptive = FALSE,\n                 kernel = \"bisquare\",\n                 longlat = T)\nbw_CV\n\n\ngwstat &lt;- gwss(data = hunan_sp,\n               vars = \"GDPPC\",\n               bw = bw_AIC,\n               kernel = \"bisquare\",\n               adaptive = TRUE,\n               longlat = T)\n\n\ngwstat_df &lt;- as.data.frame(gwstat$SDF)\n\n\nhunan_gstat &lt;- cbind(hunan, gwstat_df)\n\n\ntm_shape(hunan_gstat) + tm_fill(\"GDPPC_LM\", n = 5, style = \"quantile\") + \n  tm_borders(alpha = 0.5) + \n  tm_layout(main.title = \"Distribution of geographically weighted mean\",\n            main.title.position = \"center\",\n            main.title.size = 2.0,\n            legend.text.size = 1.2,\n            legend.height = 1.50,\n            legend.width = 1.50,\n            frame = TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "In spatial policy, one of the main development objective of the local government and planners is to ensure equal distribution of development in the province. Our task in this study, hence, is to apply appropriate spatial statistical methods to discover if development are even distributed geographically. If the answer is No. Then, our next question will be “is there sign of spatial clustering?”. And, if the answer for this question is yes, then our next question will be “where are these clusters?”\nIn this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of Hunan Provice, People Republic of China.\n\n\n\nTwo data sets will be used in this hands-on exercise, they are:\n\nHunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\npacman::p_load(sf, spdep, tmap, tidyverse, ggplot2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#getting-started",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "In spatial policy, one of the main development objective of the local government and planners is to ensure equal distribution of development in the province. Our task in this study, hence, is to apply appropriate spatial statistical methods to discover if development are even distributed geographically. If the answer is No. Then, our next question will be “is there sign of spatial clustering?”. And, if the answer for this question is yes, then our next question will be “where are these clusters?”\nIn this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of Hunan Provice, People Republic of China.\n\n\n\nTwo data sets will be used in this hands-on exercise, they are:\n\nHunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\npacman::p_load(sf, spdep, tmap, tidyverse, ggplot2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#getting-the-data-into-r-environment",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#getting-the-data-into-r-environment",
    "title": "Hands-on Exercise 6",
    "section": "Getting the Data Into R Environment",
    "text": "Getting the Data Into R Environment\n\nImport shapefile into r environment\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\EasonXu-HY99\\IS415\\Hands-on_Ex\\Hands-on_Ex06\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\nImport csv file into r environment\n\nhunan2012 &lt;- read.csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\nPerforming relational join\n\nhunan &lt;- left_join(hunan,hunan2012) %&gt;%\n  select(1:3, 7, 15, 16, 31, 32)\n\nJoining with `by = join_by(County)`\n\n\n\n\nVisualising Regional Development Indicator\n\nequal &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)\n\n\n\n\n\n\n\n\n\nEqual Interval Classification: I have tried visualizing the data using equal intervals, which divides the GDP per capita range into 5 equal-sized bins.\nQuantile Classification: I also used quantile classification to ensure that each class contains an equal number of observations.\nThe tmap_arrange() function has allowed me to display these two maps side by side for easy comparison."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#global-measures-of-spatial-autocorrelation",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#global-measures-of-spatial-autocorrelation",
    "title": "Hands-on Exercise 6",
    "section": "Global Measures of Spatial Autocorrelation",
    "text": "Global Measures of Spatial Autocorrelation\n\nComputing Contiguity Spatial Weights\nI have tried creating a contiguity-based spatial weights matrix using the poly2nb() function:\n\nwm_q &lt;- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\n\nThe function poly2nb() creates a spatial neighbors object based on the adjacency of polygons (counties) in the shapefile. The argument queen=TRUE ensures that the Queen’s criterion for contiguity is used, meaning that two counties are considered neighbors if they share a common border or vertex.\n\n\n\nRow-standardised weights matrix\nI have also tried converting the contiguity-based spatial weights into a row-standardized spatial weights matrix:\n\nrswm_q &lt;- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\nThe nb2listw() function transforms the contiguity neighbors object into a list-based spatial weights object. I used the style=\"W\" option to apply row-standardization, which ensures that the sum of weights for each county is 1. The zero.policy = TRUE argument allows counties with no neighbors to be handled properly."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#global-measures-of-spatial-autocorrelation-morans-i",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#global-measures-of-spatial-autocorrelation-morans-i",
    "title": "Hands-on Exercise 6",
    "section": "Global Measures of Spatial Autocorrelation: Moran’s I",
    "text": "Global Measures of Spatial Autocorrelation: Moran’s I\n\nMaron’s I test\nTo evaluate the global spatial autocorrelation, I have tried performing Moran’s I test:\n\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\n\nThe moran.test() function calculates Moran’s I, which measures the degree of spatial autocorrelation for the GDP per capita variable. I used the row-standardized weights matrix rswm_q. The zero.policy = TRUE argument manages counties with no neighbors, and na.action=na.omit handles missing values by omitting them.\n\n\n\nComputing Monte Carlo Moran’s I\nI have also tried to compute the Monte Carlo simulation of Moran’s I to assess the significance of spatial autocorrelation:\n\nset.seed(1234)\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\n\nThe moran.mc() function performs a Monte Carlo simulation of Moran’s I with 999 permutations. Setting a seed (set.seed(1234)) ensures reproducibility of the random simulations.\n\n\n\nVisualising Monte Carlo Moran’s I\nI have tried calculating the mean, variance, and summary statistics of the simulated Moran’s I values:\n\nmean(bperm$res[1:999])\n\n[1] -0.01504572\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.004371574\n\n\n\nsummary(bperm$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\nThese functions compute the mean, variance, and summary of the simulated Moran’s I values to better understand the distribution of simulated results.\n\nFinally, I have visualized the distribution of the simulated Moran’s I values:\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\n\n\n\n\n\nThe histogram represents the distribution of simulated Moran’s I values. The vertical red line (abline(v=0)) indicates the value of 0, helping to compare the distribution of Moran’s I against the expected value in a random distribution.\n\nQuestion: What statistical observation can you draw fro mthe output above?\nFrom the histogram of the Monte Carlo Moran’s I simulation, several key observations can be made:\n\nSimulated Moran’s I Distribution: The distribution of Moran’s I values from 999 random simulations is centered around zero, which supports the null hypothesis of no spatial autocorrelation. This suggests that, under random conditions, Moran’s I values for GDP per capita in Hunan would likely be near zero, indicating no significant spatial pattern.\nSymmetry: The distribution is fairly symmetric, with most values between -0.1 and 0.1. This symmetry reflects the randomness of the spatial data, as values are close to what would be expected under spatial randomness.\nReference Line at Zero: The red line at zero indicates the benchmark for Moran’s I under the null hypothesis. Comparing the observed Moran’s I (calculated earlier) to this simulated distribution helps determine if there is significant spatial autocorrelation.\nStatistical Conclusion: If the observed Moran’s I is far from zero and lies outside the range of most simulated values, it would indicate significant spatial autocorrelation, either positive (clustering) or negative (dispersion).\n\nChallenge: Instead of using Base Graph to plot the values, plot the values by using ggplot2 package.\n\nbperm_df &lt;- data.frame(morans_I = bperm$res)\n\nggplot(bperm_df, aes(x = morans_I)) +\n  geom_histogram(bins = 20, fill = \"lightgray\", color = \"black\") +\n  geom_vline(xintercept = 0, color = \"red\", linetype = \"dashed\") +\n  labs(title = \"Histogram of Simulated Moran's I\",\n       x = \"Simulated Moran's I\",\n       y = \"Frequency\") +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#global-measures-of-spatial-autocorrelation-gearys-c",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#global-measures-of-spatial-autocorrelation-gearys-c",
    "title": "Hands-on Exercise 6",
    "section": "Global Measures of Spatial Autocorrelation: Geary’s C",
    "text": "Global Measures of Spatial Autocorrelation: Geary’s C\n\nGeary’s C test\nI have tried using the following code to compute the Geary’s C statistic, a measure of global spatial autocorrelation:\n\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q   \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\n\nThe geary.test() function calculates Geary’s C for the GDP per capita variable, using the spatial weights matrix rswm_q. Geary’s C typically ranges between 0 and 2, where values closer to 0 indicate strong positive spatial autocorrelation, while values closer to 2 indicate strong negative autocorrelation.\n\n\n\nComputing Monte Carlo Geary’s C\nI have also performed a Monte Carlo simulation for Geary’s C to assess the significance of spatial autocorrelation:\n\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\n\nThe geary.mc() function performs a Monte Carlo test with 999 permutations to generate a reference distribution for Geary’s C. The seed (set.seed(1234)) ensures reproducibility of the simulation results.\n\n\n\nVisualising the Monte Carlo Geary’s C\nI have computed and visualized the results of the Monte Carlo simulation for Geary’s C:\n\nmean(bperm$res[1:999])\n\n[1] 1.004402\n\n\n\nThis computes the mean of the simulated Geary’s C values.\n\n\nvar(bperm$res[1:999])\n\n[1] 0.007436493\n\n\n\nThis computes the variance of the simulated Geary’s C values.\n\n\nsummary(bperm$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\nThis generates a summary of the simulated Geary’s C values, showing the distribution and important statistics.\n\n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\") \n\n\n\n\n\n\n\n\n\nThe hist() function creates a histogram to visualize the distribution of the simulated Geary’s C values. The red vertical line (abline(v=1)) represents the expected value under the null hypothesis (Geary’s C = 1), where no spatial autocorrelation is present.\n\nQuestion: What statistical observation can you draw from the output?\nFrom the histogram of the Monte Carlo simulation for Geary’s C, several key observations can be made:\n\nSimulated Geary’s C Distribution: The histogram shows the distribution of 999 simulated Geary’s C values centered around 1, which aligns with the null hypothesis of no spatial autocorrelation. Geary’s C values close to 1 suggest that there is no significant spatial clustering or dispersion.\nSymmetry: The distribution is approximately symmetric, with most values between 0.9 and 1.1. This indicates that, under random conditions, spatial patterns are expected to yield Geary’s C values near 1.\nReference Line at Geary’s C = 1: The red vertical line at 1 represents the expected value under the null hypothesis. If the observed Geary’s C (from the actual data) is far from 1, it would suggest either positive or negative spatial autocorrelation.\nStatistical Conclusion: If the observed Geary’s C is lower than 1, it would suggest positive spatial autocorrelation (clustering), while a value higher than 1 would indicate negative spatial autocorrelation (dispersion). The distribution of the simulated values helps to assess how likely it is that the observed Geary’s C results from random spatial patterns."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#spatial-correlogram",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#spatial-correlogram",
    "title": "Hands-on Exercise 6",
    "section": "Spatial Correlogram",
    "text": "Spatial Correlogram\n\nCompute Moran’s I correlogram\nI have tried computing a spatial correlogram using Moran’s I to explore the spatial autocorrelation across different spatial lags. The code is as follows:\n\nMI_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\n\n\n\n\n\nThe sp.correlogram() function computes Moran’s I for different spatial lags (up to the 6th order in this case). This helps in understanding how spatial autocorrelation changes over increasing distances (spatial lags).\nThe wm_q object represents the spatial neighbors (using Queen’s contiguity), and hunan$GDPPC is the variable for which Moran’s I is computed.\nThe method=\"I\" specifies that Moran’s I should be used to measure spatial autocorrelation, and style=\"W\" applies row-standardization to the spatial weights matrix.\n\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nQuestion: What statistical observation can you draw from the plot above?\nFrom the Moran’s I correlogram, the following statistical observations can be made:\n\nPositive Spatial Autocorrelation at Short Distances: At the first lag (nearest neighbors), Moran’s I is around 0.4, indicating strong positive spatial autocorrelation. This suggests that nearby counties in Hunan have similar GDP per capita values.\nDeclining Spatial Autocorrelation: As the lag increases, Moran’s I decreases. By the second and third lags, Moran’s I is still positive but weaker, meaning that spatial autocorrelation fades as we consider more distant neighbors.\nInsignificant Spatial Autocorrelation at Higher Lags: From the fourth lag onwards, Moran’s I approaches zero, implying no significant spatial autocorrelation at these greater distances. By the fifth and sixth lags, Moran’s I is slightly negative, indicating weak spatial dispersion, but not statistically significant.\n\n\n\nCompute Geary’s C correlogram and plot\nI have computed and plotted the Geary’s C correlogram to analyze spatial autocorrelation at different spatial lags. The code is as follows:\n\nGC_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\n\n\n\n\n\nThe sp.correlogram() function calculates Geary’s C for different spatial lags, assessing how spatial autocorrelation behaves across increasing distances (up to 6th order neighbors).\nThe plot shows the Geary’s C values for each lag, which help assess whether the spatial pattern exhibits clustering or dispersion as the distance increases.\n\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#local-indicators-of-spatial-associationlisa",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#local-indicators-of-spatial-associationlisa",
    "title": "Hands-on Exercise 6",
    "section": "Local Indicators of Spatial Association(LISA)",
    "text": "Local Indicators of Spatial Association(LISA)\n\nComputing Contiguity Spatial Weights\n\nwm_q &lt;- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\n\nThis creates a contiguity-based spatial weights matrix using Queen’s criterion to determine neighboring counties.\n\n\n\nRow-standardised weights matrix\n\nrswm_q &lt;- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\nThe spatial weights matrix is row-standardized so that each county’s weights sum to 1.\n\n\n\nComputing local Moran’s I\nI computed Local Moran’s I to measure the spatial autocorrelation at a local level for GDP per capita:\n\nfips &lt;- order(hunan$County)\nlocalMI &lt;- localmoran(hunan$GDPPC, rswm_q)\nhead(localMI)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\n\nThe localmoran() function computes Local Moran’s I, allowing me to identify areas of high or low clustering.\n\nI then printed the Local Moran’s I values for each county:\n\nprintCoefmat(data.frame(\n  localMI[fips,], \n  row.names=hunan$County[fips]),\n  check.names=FALSE)\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830\n\n\n\nMapping the local Moran’s I\n\nhunan.localMI &lt;- cbind(hunan,localMI) %&gt;%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\nMapping local Moran’s I values\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\n\n\nMapping local Moran’s I p-values\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\nMapping both local Moran’s I values and p-values\n\nlocalMI.map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\n\nThis displays the local Moran’s I statistics and their corresponding p-values in a side-by-side comparison for better visualization of spatial patterns and their significance."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#creating-a-lisa-cluster-map",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#creating-a-lisa-cluster-map",
    "title": "Hands-on Exercise 6",
    "section": "Creating a LISA Cluster Map",
    "text": "Creating a LISA Cluster Map\n\nPlotting Moran scatterplot\nI have used the following code to generate a Moran scatterplot for the GDP per capita (GDPPC) values in Hunan:\n\nnci &lt;- moran.plot(hunan$GDPPC, rswm_q,\n                  labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")\n\n\n\n\n\n\n\n\n\nThis scatterplot visualizes the relationship between the original GDPPC values and their spatial lag (i.e., the average values of neighboring counties), helping to assess spatial autocorrelation.\n\n\n\nPlotting Moran scatterplot with standardised variable\nNext, I standardized the GDPPC values and plotted another Moran scatterplot:\n\nhunan$Z.GDPPC &lt;- scale(hunan$GDPPC) %&gt;% \n  as.vector \n\n\nnci2 &lt;- moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")\n\n\n\n\n\n\n\n\n\nThe standardized (z-score) GDPPC values help to understand the relative position of each county’s GDPPC compared to the overall mean.\n\n\n\nPreparing LISA map classes\nTo classify the results of the Local Moran’s I into clusters, I created a new variable quadrant:\n\nquadrant &lt;- vector(mode=\"numeric\",length=nrow(localMI))\n\nI computed the spatial lag for GDPPC and deviations from the mean:\n\nhunan$lag_GDPPC &lt;- lag.listw(rswm_q, hunan$GDPPC)\nDV &lt;- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \n\n\nLM_I &lt;- localMI[,1] - mean(localMI[,1])    \n\n\nsignif &lt;- 0.05       \n\nI then classified the counties into quadrants based on the spatial lag and the local Moran’s I values:\n\nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4      \n\n\nquadrant[localMI[,5]&gt;signif] &lt;- 0\n\n\nquadrant &lt;- vector(mode=\"numeric\",length=nrow(localMI))\nhunan$lag_GDPPC &lt;- lag.listw(rswm_q, hunan$GDPPC)\nDV &lt;- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \nLM_I &lt;- localMI[,1]   \nsignif &lt;- 0.05       \nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4    \nquadrant[localMI[,5]&gt;signif] &lt;- 0\n\n\n\nPlotting LISA map\nI plotted the LISA cluster map to visualize the spatial distribution of local Moran’s I clusters:\n\nhunan.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\nTo display the GDPPC map alongside the LISA cluster map:\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nhunan.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(gdppc, LISAmap, \n             asp=1, ncol=2)\n\n\n\n\n\n\n\n\nQuestion: What statistical observations can you draw from the LISA map above?\nFrom the LISA maps, the following statistical observations can be made:\n\nLocal Moran’s I Statistics (Left Map):\n\nThe map highlights the local Moran’s I values for GDP per capita. Dark green areas indicate regions with strong positive spatial autocorrelation, suggesting that high GDP per capita values are clustered together (high-high clusters).\nA prominent cluster of high Moran’s I values is observed in the eastern part of Hunan, indicating that high GDP per capita values are spatially clustered in this area.\nThere are smaller areas with negative Moran’s I values (in orange), representing spatial outliers, where local values differ significantly from neighboring regions (e.g., low surrounded by high, or vice versa).\n\nLocal Moran’s I P-Values (Right Map):\n\nThis map shows the statistical significance of the local Moran’s I values. Dark blue areas represent regions where the clustering is highly significant (p &lt; 0.001).\nThe eastern cluster, where high Moran’s I values were found, shows strong statistical significance, confirming that the clustering of high GDP per capita is not random.\nOther regions with varying shades of blue also exhibit significant spatial autocorrelation, but the clustering in the eastern part remains the most statistically significant."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#hot-spot-and-cold-spot-area-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#hot-spot-and-cold-spot-area-analysis",
    "title": "Hands-on Exercise 6",
    "section": "Hot Spot and Cold Spot Area Analysis",
    "text": "Hot Spot and Cold Spot Area Analysis\n\nGetis and Ord’s G-Statistics\nThe Getis and Ord’s G-statistics is a spatial statistical method used to detect spatial clusters of high (hot spots) or low (cold spots) values within a defined proximity. In this analysis, hot spots represent areas where high values cluster together with similarly high values in neighboring areas, while cold spots indicate clusters of low values.\nThe analysis involves three main steps:\n\nDeriving the spatial weight matrix\nComputing Gi statistics\nMapping Gi statistics\n\n\n\nDeriving distance-based weight matrix\n\nDeriving the centroid\nTo compute the spatial weight matrix, I first derived the centroids (longitude and latitude) for each county in Hunan:\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\n\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\n\ncoords &lt;- cbind(longitude, latitude)\n\n\n\nDetermine the cut-off distance\nI determined the cut-off distance for neighborhood definition by using nearest neighbors:\n\n#coords &lt;- coordinates(hunan)\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\n\n\nComputing fixed distance weight matrix\nI computed the weight matrix based on a fixed distance of 62 km:\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\n\nwm62_lw &lt;- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\n\n\n\nComputing adaptive distance weight matrix\nI also calculated an adaptive distance weight matrix using 8 nearest neighbors:\n\nknn &lt;- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\n\nknn_lw &lt;- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#computing-gi-statistics",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#computing-gi-statistics",
    "title": "Hands-on Exercise 6",
    "section": "Computing Gi statistics",
    "text": "Computing Gi statistics\n\nGi statistics using fixed distance\nI computed the local Gi statistics (hot/cold spots) based on the fixed distance weights:\n\nfips &lt;- order(hunan$County)\ngi.fixed &lt;- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"internals\")\n               Gi      E(Gi)        V(Gi)        Z(Gi) Pr(z != E(Gi))\n [1,] 0.064192949 0.05747126 2.375922e-04  0.436075843   6.627817e-01\n [2,] 0.042300020 0.04597701 1.917951e-04 -0.265505650   7.906200e-01\n [3,] 0.044961480 0.04597701 1.933486e-04 -0.073033665   9.417793e-01\n [4,] 0.039475779 0.03448276 1.461473e-04  0.413017033   6.795941e-01\n [5,] 0.049767939 0.04597701 1.927263e-04  0.273070579   7.847990e-01\n [6,] 0.008825335 0.01149425 4.998177e-05 -0.377510776   7.057941e-01\n [7,] 0.050807266 0.02298851 9.435398e-05  2.863898821   4.184617e-03\n [8,] 0.083966739 0.04597701 1.848292e-04  2.794350420   5.200409e-03\n [9,] 0.115751554 0.04597701 1.789361e-04  5.216125401   1.827045e-07\n[10,] 0.049115587 0.04597701 1.891013e-04  0.228236603   8.194623e-01\n[11,] 0.045819180 0.03448276 1.420884e-04  0.951035346   3.415864e-01\n[12,] 0.049183846 0.05747126 2.387633e-04 -0.536334231   5.917276e-01\n[13,] 0.048429181 0.04597701 1.924532e-04  0.176761556   8.596957e-01\n[14,] 0.034733752 0.02298851 9.651140e-05  1.195564020   2.318667e-01\n[15,] 0.011262043 0.01149425 4.945294e-05 -0.033020610   9.736582e-01\n[16,] 0.065131196 0.04597701 1.931870e-04  1.378081093   1.681783e-01\n[17,] 0.027587075 0.03448276 1.385862e-04 -0.585756761   5.580390e-01\n[18,] 0.029409313 0.03448276 1.461397e-04 -0.419680565   6.747188e-01\n[19,] 0.061466754 0.05747126 2.383385e-04  0.258805141   7.957856e-01\n[20,] 0.057656917 0.05747126 2.371303e-04  0.012056111   9.903808e-01\n[21,] 0.066518379 0.06896552 2.820326e-04 -0.145716531   8.841452e-01\n[22,] 0.045599896 0.04597701 1.928108e-04 -0.027158687   9.783332e-01\n[23,] 0.030646753 0.03448276 1.449523e-04 -0.318615290   7.500183e-01\n[24,] 0.035635552 0.04597701 1.906613e-04 -0.748946051   4.538897e-01\n[25,] 0.032606647 0.04597701 1.932888e-04 -0.961700582   3.362000e-01\n[26,] 0.035001352 0.04597701 1.897172e-04 -0.796851342   4.255374e-01\n[27,] 0.012746354 0.02298851 9.812587e-05 -1.033949773   3.011596e-01\n[28,] 0.061287917 0.06896552 2.773884e-04 -0.460979158   6.448136e-01\n[29,] 0.014277403 0.02298851 9.683314e-05 -0.885240161   3.760271e-01\n[30,] 0.009622875 0.01149425 4.924586e-05 -0.266671512   7.897221e-01\n[31,] 0.014258398 0.02298851 9.705244e-05 -0.886168613   3.755267e-01\n[32,] 0.005453443 0.01149425 4.986245e-05 -0.855476971   3.922871e-01\n[33,] 0.043283712 0.05747126 2.367109e-04 -0.922143185   3.564539e-01\n[34,] 0.020763514 0.03448276 1.393165e-04 -1.162328599   2.451020e-01\n[35,] 0.081261843 0.06896552 2.794398e-04  0.735582222   4.619850e-01\n[36,] 0.057419907 0.05747126 2.338437e-04 -0.003358489   9.973203e-01\n[37,] 0.013497133 0.02298851 9.624821e-05 -0.967459309   3.333145e-01\n[38,] 0.019289310 0.03448276 1.455643e-04 -1.259299080   2.079223e-01\n[39,] 0.025996272 0.04597701 1.892938e-04 -1.452256513   1.464303e-01\n[40,] 0.016092694 0.03448276 1.424776e-04 -1.540671121   1.233968e-01\n[41,] 0.035952614 0.05747126 2.379439e-04 -1.395011407   1.630124e-01\n[42,] 0.031690963 0.05747126 2.350604e-04 -1.681505286   9.266481e-02\n[43,] 0.018750079 0.03448276 1.433314e-04 -1.314110709   1.888090e-01\n[44,] 0.015449080 0.02298851 9.638666e-05 -0.767944457   4.425202e-01\n[45,] 0.065760689 0.06896552 2.760533e-04 -0.192889342   8.470456e-01\n[46,] 0.098966900 0.05747126 2.326002e-04  2.720804542   6.512325e-03\n[47,] 0.085415780 0.05747126 2.385746e-04  1.809191360   7.042128e-02\n[48,] 0.038816536 0.05747126 2.343951e-04 -1.218469473   2.230456e-01\n[49,] 0.038931873 0.04597701 1.893501e-04 -0.511984469   6.086619e-01\n[50,] 0.055098610 0.06896552 2.760948e-04 -0.834546363   4.039732e-01\n[51,] 0.033405005 0.04597701 1.916312e-04 -0.908179070   3.637836e-01\n[52,] 0.043040784 0.06896552 2.829941e-04 -1.541081516   1.232969e-01\n[53,] 0.011297699 0.02298851 9.615920e-05 -1.192199867   2.331829e-01\n[54,] 0.040968457 0.05747126 2.356318e-04 -1.075080164   2.823388e-01\n[55,] 0.023629663 0.04597701 1.877170e-04 -1.631075961   1.028743e-01\n[56,] 0.006281129 0.01149425 4.916619e-05 -0.743472246   4.571958e-01\n[57,] 0.063918654 0.05747126 2.369553e-04  0.418842387   6.753313e-01\n[58,] 0.070325003 0.05747126 2.381374e-04  0.832943753   4.048765e-01\n[59,] 0.025947288 0.03448276 1.444058e-04 -0.710289083   4.775249e-01\n[60,] 0.039752578 0.04597701 1.915656e-04 -0.449718820   6.529132e-01\n[61,] 0.049934283 0.05747126 2.334965e-04 -0.493238743   6.218439e-01\n[62,] 0.030964195 0.04597701 1.920248e-04 -1.083386776   2.786368e-01\n[63,] 0.058129184 0.05747126 2.343319e-04  0.042979051   9.657182e-01\n[64,] 0.046096514 0.04597701 1.932637e-04  0.008596093   9.931414e-01\n[65,] 0.012459080 0.01149425 5.008051e-05  0.136337469   8.915545e-01\n[66,] 0.091447733 0.05747126 2.377744e-04  2.203411744   2.756574e-02\n[67,] 0.049575872 0.02298851 9.766513e-05  2.690329952   7.138140e-03\n[68,] 0.107907212 0.04597701 1.933581e-04  4.453703219   8.440175e-06\n[69,] 0.019616151 0.02298851 9.789454e-05 -0.340842743   7.332220e-01\n[70,] 0.032923393 0.03448276 1.454032e-04 -0.129318589   8.971056e-01\n[71,] 0.030317663 0.02298851 9.867859e-05  0.737806634   4.606320e-01\n[72,] 0.019437582 0.03448276 1.455870e-04 -1.246912658   2.124295e-01\n[73,] 0.055245460 0.04597701 1.932838e-04  0.666667559   5.049845e-01\n[74,] 0.074278054 0.05747126 2.383538e-04  1.088613505   2.763244e-01\n[75,] 0.013269580 0.02298851 9.719982e-05 -0.985792573   3.242349e-01\n[76,] 0.049407829 0.03448276 1.463785e-04  1.233609606   2.173484e-01\n[77,] 0.028605749 0.03448276 1.455139e-04 -0.487196415   6.261191e-01\n[78,] 0.039087662 0.02298851 9.801040e-05  1.626174042   1.039126e-01\n[79,] 0.031447120 0.04597701 1.877464e-04 -1.060416797   2.889550e-01\n[80,] 0.064005294 0.05747126 2.359641e-04  0.425361422   6.705732e-01\n[81,] 0.044606529 0.05747126 2.357330e-04 -0.837897118   4.020885e-01\n[82,] 0.063700493 0.06896552 2.801427e-04 -0.314565243   7.530918e-01\n[83,] 0.051142205 0.04597701 1.933560e-04  0.371456331   7.102977e-01\n[84,] 0.102121112 0.04597701 1.610278e-04  4.424392623   9.671399e-06\n[85,] 0.021901462 0.02298851 9.843172e-05 -0.109566928   9.127528e-01\n[86,] 0.064931813 0.04597701 1.929430e-04  1.364597995   1.723794e-01\n[87,] 0.031747344 0.04597701 1.909867e-04 -1.029658605   3.031703e-01\n[88,] 0.015893319 0.02298851 9.765131e-05 -0.718000620   4.727569e-01\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\n\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.fixed)) %&gt;%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\n\n\nMapping Gi values with fixed distance weights\nFinally, I mapped the Gi statistics using the following code to visualize hot and cold spots in Hunan:\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nQuestion: What statistical observation can you draw from the Gi map above?\nFrom the Gi map (right side), we can make the following observations:\n\nHot Spots: The areas shaded in red and dark red in the Gi map represent statistically significant hot spots. These regions, particularly in the eastern-central part of Hunan, indicate clusters where high GDP per capita values are spatially concentrated. The intensity of the red color suggests stronger clustering of high values in these areas.\nCold Spots: The blue-shaded areas indicate cold spots, where low GDP per capita values are clustered together. These regions, primarily in the southwestern and southeastern parts of the map, demonstrate significant clustering of low values, indicating poorer economic performance relative to the rest of Hunan.\nSpatial Clustering: The Gi statistic clearly identifies regions of spatial clustering for both high and low values. The clustering of high GDP per capita values in the central and eastern part of the province is aligned with areas that exhibit higher economic development, while the clustering of low values in the southern and western regions signals economically weaker areas.\nComparison to GDPPC Map (Left): Comparing the Gi map to the raw GDPPC distribution (left map), we can see that areas with higher GDP per capita also appear as hot spots in the Gi map, confirming the spatial clustering of economic wealth. Similarly, regions with low GDP per capita correspond to cold spots.\n\n\n\nGi statistics using adaptive distance\nI computed the Gi statistics for GDP per capita in Hunan using the adaptive spatial weights matrix:\n\nfips &lt;- order(hunan$County)\ngi.adaptive &lt;- localG(hunan$GDPPC, knn_lw)\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.adaptive)) %&gt;%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\nThe localG() function computes the Gi statistics, identifying hot and cold spots based on the adaptive spatial weights. The results are added to the hunan dataset as a new column, gstat_adaptive.\n\n\n\nMapping Gi values with adaptive distance weights\nI then mapped the Gi statistics using the following code:\n\ngdppc&lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)\n\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\n\nThe map visualizes the spatial distribution of the Gi statistics, where red indicates hot spots (clusters of high values) and blue indicates cold spots (clusters of low values).\n\n\n\nI arranged the original GDPPC map alongside the Gi map for comparison, which allows us to see how GDP per capita values correspond to spatial clustering patterns identified by the Gi statistic.\n\nQuestion: What statistical observation can you draw from the Gi map above?\nFrom the Gi map using adaptive distance (right side), we can observe the following:\n\nHot Spots: The red and dark red areas in the northeastern region indicate statistically significant hot spots. These regions exhibit strong clustering of high GDP per capita values, meaning that high economic prosperity is concentrated in this part of Hunan. The intensity of the red color suggests the clustering is particularly strong.\nCold Spots: The blue areas in the southwestern and southern regions represent significant cold spots, where clusters of low GDP per capita values are found. These regions are economically weaker, with neighboring counties also having low GDP per capita.\nComparison to GDPPC Map: Comparing the Gi map to the GDPPC map (left side), we see that areas with the highest GDP per capita values (in dark orange on the GDPPC map) align with the hot spots identified by the Gi statistic. Similarly, the cold spots correspond to the regions with the lowest GDP per capita values."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#quarterly-kernel-density-estimation-kde",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#quarterly-kernel-density-estimation-kde",
    "title": "Take-Home Exercise 1:Geospatial Analytics for Social Good: Application of Spatial and Spatio-temporal Point Patterns Analysis to discover the geographical distribution of Armed Conflict in Myanmar",
    "section": "3. Quarterly Kernel Density Estimation (KDE)",
    "text": "3. Quarterly Kernel Density Estimation (KDE)\nTo understand the spatial distribution of conflict events over time, I perform a Kernel Density Estimation (KDE) on a quarterly basis. This allows for the identification of patterns and hotspots in different quarters of the year.\nFirst, I create a new variable that represents the quarter of each event, combining the event year and quarter number.\n\nACLED_sf &lt;- ACLED_sf %&gt;%\n  mutate(quarter = paste0(year(event_date), \"-Q\", quarter(event_date)))\n\nThe mutate() function is used here to generate a quarter column, combining the year and quarter extracted from the event_date field using the year() and quarter() functions from the lubridate package. This step ensures that each event is categorized by the quarter in which it occurred.\n\nhead(ACLED_sf$quarter)\n\n[1] \"2024-Q2\" \"2024-Q2\" \"2024-Q2\" \"2024-Q2\" \"2024-Q2\" \"2024-Q2\"\n\n\nI then inspect the first few values of the quarter column to verify that the new variable has been created correctly.\n\nunique(ACLED_sf$quarter)\n\n [1] \"2024-Q2\" \"2024-Q1\" \"2023-Q4\" \"2023-Q3\" \"2023-Q2\" \"2023-Q1\" \"2022-Q4\"\n [8] \"2022-Q3\" \"2022-Q2\" \"2022-Q1\" \"2021-Q4\" \"2021-Q3\" \"2021-Q2\" \"2021-Q1\"\n\n\nNext, I check the unique quarter values to ensure all expected quarters are present, confirming that the data spans multiple time periods and is ready for quarterly analysis.\nTo perform the KDE for each quarter, I split the dataset into separate data frames based on the quarter variable.\n\nquarterly_data &lt;- split(ACLED_sf, ACLED_sf$quarter)\n\nThe split() function divides the dataset into a list of data frames, where each element corresponds to the events from a specific quarter. This allows for the independent analysis of each quarter’s event data.\nNext, I convert the spatial boundaries of Sagaing into an owin object, which is required for KDE using the spatstat package. The owin object represents the observation window for the spatial point pattern.\n\nsagaing_owin &lt;- as.owin(sagaing)\n\nThe as.owin() function transforms the Sagaing boundary (in sf format) into a spatstat-compatible owin object. This step is crucial as it defines the study area within which the Kernel Density Estimation will be conducted.\n\n3.1 ACLED (all events)\nIn this section, I generate a Kernel Density Estimation (KDE) for all conflict events in Sagaing, categorized by quarter. This allows me to visualize the density of events over time, identifying areas of higher conflict concentration for each quarter.\n\nsaveGIF({\n  for (q in names(quarterly_data)) {\n    \n    quarter_data &lt;- quarterly_data[[q]]\n    \n    ACLED_ppp &lt;- as.ppp(st_coordinates(quarter_data), W = sagaing_owin)\n    \n    ACLED_ppp &lt;- rjitter(ACLED_ppp, \n                         retry = TRUE,\n                         nsim = 1,\n                         drop = TRUE)\n    \n    ACLEDmm_ppp.km &lt;- rescale(ACLED_ppp, 1000, \"km\")\n    \n    kde_ACLEDmm_bw &lt;- density(ACLEDmm_ppp.km,\n                              sigma = bw.ppl,\n                              edge = TRUE,\n                              kernel = \"gaussian\")\n    \n    plot(kde_ACLEDmm_bw, main = paste(\"KDE for\", q))\n    \n  }\n}, movie.name = \"kde_ACLED.gif\", interval = 0.5, ani.width = 800, ani.height = 600)\n\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\n\n\nOutput at: kde_ACLED.gif\n\n\n[1] TRUE\n\n\nI begin by looping through the quarterly data, converting each quarter’s conflict events into a spatial point pattern object (ppp) using the as.ppp() function. I apply jittering using rjitter() to handle points that overlap or are too close, reducing visual artifacts. The points are then rescaled to kilometers using rescale() to ensure spatial units are consistent.\nFor each quarter, I compute the Kernel Density Estimation using the density() function, which applies a Gaussian kernel with bandwidth selected by the bw.ppl method. The results are plotted to visually inspect how conflict event densities evolve over each quarter.\n\nACLED_gif &lt;- image_read(\"kde_ACLED.gif\")\n\nprint(ACLED_gif)\n\n# A tibble: 14 × 7\n   format width height colorspace matte filesize density\n   &lt;chr&gt;  &lt;int&gt;  &lt;int&gt; &lt;chr&gt;      &lt;lgl&gt;    &lt;int&gt; &lt;chr&gt;  \n 1 GIF      800    600 sRGB       FALSE        0 72x72  \n 2 GIF      800    600 sRGB       FALSE        0 72x72  \n 3 GIF      800    600 sRGB       FALSE        0 72x72  \n 4 GIF      800    600 sRGB       FALSE        0 72x72  \n 5 GIF      800    600 sRGB       FALSE        0 72x72  \n 6 GIF      800    600 sRGB       FALSE        0 72x72  \n 7 GIF      800    600 sRGB       FALSE        0 72x72  \n 8 GIF      800    600 sRGB       FALSE        0 72x72  \n 9 GIF      800    600 sRGB       FALSE        0 72x72  \n10 GIF      800    600 sRGB       FALSE        0 72x72  \n11 GIF      800    600 sRGB       FALSE        0 72x72  \n12 GIF      800    600 sRGB       FALSE        0 72x72  \n13 GIF      800    600 sRGB       FALSE        0 72x72  \n14 GIF      800    600 sRGB       FALSE        0 72x72  \n\n\n\n\n\n\n\n\n\nAfter generating the KDE plots for each quarter, I save them as a GIF using saveGIF() and load the resulting animation using image_read(). This provides a dynamic view of conflict density changes over time.\nObservation\nThe Kernel Density Estimation (KDE) animation for ACLED events across all quarters reveals significant temporal and spatial variations in conflict activity within the Sagaing region. Throughout the animation, several recurring hotspots are observed in the southern part of Sagaing, with varying intensities across quarters. These areas consistently exhibit higher densities of conflict events, as indicated by the warm colors in the heatmap. Smaller, less intense hotspots are intermittently visible in the central and western parts of the region, but their presence and intensity fluctuate over time. The dynamic nature of the KDE highlights how conflict activity is concentrated in certain areas and time periods, while large portions of Sagaing remain relatively inactive. Overall, the animation provides a comprehensive view of the shifting landscape of conflict hotspots within the region.\n\n\n3.2 “Battles” event\nNext, I repeat the KDE analysis, but this time focusing exclusively on events categorized as “Battles.” This allows for a more specific analysis of how battle-related conflict events are distributed over time and space in the Sagaing region.\n\nsaveGIF({\n  for (q in names(quarterly_data)) {\n    \n    quarter_data &lt;- quarterly_data[[q]]\n    battles_data &lt;- quarter_data[quarter_data$event_type == \"Battles\", ]\n    \n    ACLED_ppp &lt;- as.ppp(st_coordinates(battles_data), W = sagaing_owin)\n    \n    ACLED_ppp &lt;- rjitter(ACLED_ppp, \n                         retry = TRUE,\n                         nsim = 1,\n                         drop = TRUE)\n    \n    ACLEDmm_ppp.km &lt;- rescale(ACLED_ppp, 1000, \"km\")\n    \n    kde_ACLEDmm_bw &lt;- density(ACLEDmm_ppp.km,\n                              sigma = bw.ppl,\n                              edge = TRUE,\n                              kernel = \"gaussian\")\n    \n    plot(kde_ACLEDmm_bw, main = paste(\"KDE (Battles) for\", q))\n    \n  }\n}, movie.name = \"kde_battles.gif\", interval = 0.5, ani.width = 800, ani.height = 600)\n\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\n\n\nOutput at: kde_battles.gif\n\n\n[1] TRUE\n\n\nSimilar to the previous KDE analysis, I split the quarterly data and filter it to focus solely on the “Battles” events. The same process of creating a spatial point pattern (ppp), jittering, rescaling, and computing the Kernel Density Estimation is applied for each quarter.\n\nBattles_gif &lt;- image_read(\"kde_battles.gif\")\n\nprint(Battles_gif)\n\n# A tibble: 14 × 7\n   format width height colorspace matte filesize density\n   &lt;chr&gt;  &lt;int&gt;  &lt;int&gt; &lt;chr&gt;      &lt;lgl&gt;    &lt;int&gt; &lt;chr&gt;  \n 1 GIF      800    600 sRGB       FALSE        0 72x72  \n 2 GIF      800    600 sRGB       FALSE        0 72x72  \n 3 GIF      800    600 sRGB       FALSE        0 72x72  \n 4 GIF      800    600 sRGB       FALSE        0 72x72  \n 5 GIF      800    600 sRGB       FALSE        0 72x72  \n 6 GIF      800    600 sRGB       FALSE        0 72x72  \n 7 GIF      800    600 sRGB       FALSE        0 72x72  \n 8 GIF      800    600 sRGB       FALSE        0 72x72  \n 9 GIF      800    600 sRGB       FALSE        0 72x72  \n10 GIF      800    600 sRGB       FALSE        0 72x72  \n11 GIF      800    600 sRGB       FALSE        0 72x72  \n12 GIF      800    600 sRGB       FALSE        0 72x72  \n13 GIF      800    600 sRGB       FALSE        0 72x72  \n14 GIF      800    600 sRGB       FALSE        0 72x72  \n\n\n\n\n\n\n\n\n\nObservation\nThe Kernel Density Estimation (KDE) for “Battle” events from 2021-Q1 to 2024-Q2 reveals dynamic shifts in conflict intensity across the Sagaing region over time. Throughout the quarters, the southwestern area consistently emerges as a hotspot for battle activity, with varying intensities as shown by the recurrent warm yellow and red areas. Over the course of the analysis, smaller clusters appear and disappear in the central and southeastern parts of Sagaing, indicating occasional battle flare-ups. The northern region remains largely inactive in terms of battle events, maintaining low density throughout the observed period. The overall pattern suggests that while battle activity is geographically concentrated in certain regions, there are fluctuations in intensity and spread over the course of the years. This provides a temporal perspective on the evolving conflict landscape in Sagaing, with the southern regions being most consistently affected by battle events.\n\n\n3.3 “Explosions/Remote violence” event\nIn this section, I generate a Kernel Density Estimation (KDE) specifically for events categorized as “Explosions/Remote violence” in Sagaing, allowing for a focused analysis of how these events are distributed spatially across different quarters.\n\nsaveGIF({\n  for (q in names(quarterly_data)) {\n    \n    quarter_data &lt;- quarterly_data[[q]]\n    er_data &lt;- quarter_data[quarter_data$event_type == \"Explosions/Remote violence\", ]\n    \n    ACLED_ppp &lt;- as.ppp(st_coordinates(er_data), W = sagaing_owin)\n    \n    ACLED_ppp &lt;- rjitter(ACLED_ppp, \n                         retry = TRUE,\n                         nsim = 1,\n                         drop = TRUE)\n    \n    ACLEDmm_ppp.km &lt;- rescale(ACLED_ppp, 1000, \"km\")\n    \n    kde_ACLEDmm_bw &lt;- density(ACLEDmm_ppp.km,\n                              sigma = bw.ppl,\n                              edge = TRUE,\n                              kernel = \"gaussian\")\n    \n    plot(kde_ACLEDmm_bw, main = paste(\"KDE (Explosion/Remote violence) for\", q))\n    \n  }\n}, movie.name = \"kde_er.gif\", interval = 0.5, ani.width = 800, ani.height = 600)\n\nWarning: Likelihood Cross-Validation criterion was maximised at left-hand end\nof interval [13.6, 330]; use argument 'srange' to specify a wider interval for\nbandwidth 'sigma'\n\n\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\n\n\nOutput at: kde_er.gif\n\n\n[1] TRUE\n\n\n\nER_gif &lt;- image_read(\"kde_er.gif\")\n\nprint(ER_gif)\n\n# A tibble: 14 × 7\n   format width height colorspace matte filesize density\n   &lt;chr&gt;  &lt;int&gt;  &lt;int&gt; &lt;chr&gt;      &lt;lgl&gt;    &lt;int&gt; &lt;chr&gt;  \n 1 GIF      800    600 sRGB       FALSE        0 72x72  \n 2 GIF      800    600 sRGB       FALSE        0 72x72  \n 3 GIF      800    600 sRGB       FALSE        0 72x72  \n 4 GIF      800    600 sRGB       FALSE        0 72x72  \n 5 GIF      800    600 sRGB       FALSE        0 72x72  \n 6 GIF      800    600 sRGB       FALSE        0 72x72  \n 7 GIF      800    600 sRGB       FALSE        0 72x72  \n 8 GIF      800    600 sRGB       FALSE        0 72x72  \n 9 GIF      800    600 sRGB       FALSE        0 72x72  \n10 GIF      800    600 sRGB       FALSE        0 72x72  \n11 GIF      800    600 sRGB       FALSE        0 72x72  \n12 GIF      800    600 sRGB       FALSE        0 72x72  \n13 GIF      800    600 sRGB       FALSE        0 72x72  \n14 GIF      800    600 sRGB       FALSE        0 72x72  \n\n\n\n\n\n\n\n\n\nObservation\nThe Kernel Density Estimation (KDE) animation for Explosion/Remote violence events from 2021-Q1 to 2024-Q2 reveals a concentrated and persistent hotspot in the central region of Sagaing. In 2021-Q1, the intensity of explosion-related events is highly localized, as indicated by the bright red-yellow area, with minimal activity elsewhere in the region. As the animation progresses, the central hotspot remains the primary area of conflict activity, showing fluctuations in intensity over time but consistently being the focal point for these types of events. The surrounding areas remain largely inactive, reflecting the spatially concentrated nature of these violent incidents. This temporal stability of the hotspot suggests a long-standing area of tension where explosion/remote violence events are concentrated.\n\n\n3.4 “Strategic developments” event\nThis section focuses on KDE analysis for events categorized as “Strategic developments,” providing insight into how these events are spatially distributed in Sagaing over time.\n\nsaveGIF({\n  for (q in names(quarterly_data)) {\n    \n    quarter_data &lt;- quarterly_data[[q]]\n    sd_data &lt;- quarter_data[quarter_data$event_type == \"Strategic developments\", ]\n    \n    ACLED_ppp &lt;- as.ppp(st_coordinates(sd_data), W = sagaing_owin)\n    \n    ACLED_ppp &lt;- rjitter(ACLED_ppp, \n                         retry = TRUE,\n                         nsim = 1,\n                         drop = TRUE)\n    \n    ACLEDmm_ppp.km &lt;- rescale(ACLED_ppp, 1000, \"km\")\n    \n    kde_ACLEDmm_bw &lt;- density(ACLEDmm_ppp.km,\n                              sigma = bw.ppl,\n                              edge = TRUE,\n                              kernel = \"gaussian\")\n    \n    plot(kde_ACLEDmm_bw, main = paste(\"KDE (Strategic developments) for\", q))\n    \n  }\n}, movie.name = \"kde_sd.gif\", interval = 0.5, ani.width = 800, ani.height = 600)\n\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\n\n\nOutput at: kde_sd.gif\n\n\n[1] TRUE\n\n\n\nSD_gif &lt;- image_read(\"kde_sd.gif\")\n\nprint(SD_gif)\n\n# A tibble: 14 × 7\n   format width height colorspace matte filesize density\n   &lt;chr&gt;  &lt;int&gt;  &lt;int&gt; &lt;chr&gt;      &lt;lgl&gt;    &lt;int&gt; &lt;chr&gt;  \n 1 GIF      800    600 sRGB       FALSE        0 72x72  \n 2 GIF      800    600 sRGB       FALSE        0 72x72  \n 3 GIF      800    600 sRGB       FALSE        0 72x72  \n 4 GIF      800    600 sRGB       FALSE        0 72x72  \n 5 GIF      800    600 sRGB       FALSE        0 72x72  \n 6 GIF      800    600 sRGB       FALSE        0 72x72  \n 7 GIF      800    600 sRGB       FALSE        0 72x72  \n 8 GIF      800    600 sRGB       FALSE        0 72x72  \n 9 GIF      800    600 sRGB       FALSE        0 72x72  \n10 GIF      800    600 sRGB       FALSE        0 72x72  \n11 GIF      800    600 sRGB       FALSE        0 72x72  \n12 GIF      800    600 sRGB       FALSE        0 72x72  \n13 GIF      800    600 sRGB       FALSE        0 72x72  \n14 GIF      800    600 sRGB       FALSE        0 72x72  \n\n\n\n\n\n\n\n\n\nObservation\nThe Kernel Density Estimation (KDE) for Strategic developments from 2021-Q1 to 2024-Q2 reveals a strong concentration of activity in the southern part of the Sagaing region. The hotspot, which is evident from the bright yellow and red areas, persists throughout the quarters, indicating that strategic developments are primarily localized in the southern region. Over time, the intensity of these events fluctuates but remains concentrated in the same geographical area, suggesting that this part of Sagaing consistently experiences significant strategic activities. The central and northern parts of the region show little to no activity, reflecting the highly localized nature of strategic developments. This pattern suggests a focused area of strategic importance within the southern zone of Sagaing, which could be linked to political or military operations in this region.\n\n\n3.5 “Violence against civilians” event\nIn this section, I perform a Kernel Density Estimation (KDE) for events categorized as “Violence against civilians.” This analysis aims to identify where and when these types of events occurred with the highest intensity within the Sagaing region, visualized across different quarters.\n\nsaveGIF({\n  for (q in names(quarterly_data)) {\n    \n    quarter_data &lt;- quarterly_data[[q]]\n    vac_data &lt;- quarter_data[quarter_data$event_type == \"Violence against civilians\" , ]\n    \n    ACLED_ppp &lt;- as.ppp(st_coordinates(vac_data), W = sagaing_owin)\n    \n    ACLED_ppp &lt;- rjitter(ACLED_ppp, \n                         retry = TRUE,\n                         nsim = 1,\n                         drop = TRUE)\n    \n    ACLEDmm_ppp.km &lt;- rescale(ACLED_ppp, 1000, \"km\")\n    \n    kde_ACLEDmm_bw &lt;- density(ACLEDmm_ppp.km,\n                              sigma = bw.ppl,\n                              edge = TRUE,\n                              kernel = \"gaussian\")\n    \n    plot(kde_ACLEDmm_bw, main = paste(\"KDE (Violence against civilians) for\", q))\n    \n  }\n}, movie.name = \"kde_vac.gif\", interval = 0.5, ani.width = 800, ani.height = 600)\n\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\n\n\nOutput at: kde_vac.gif\n\n\n[1] TRUE\n\n\n\nVAC_gif &lt;- image_read(\"kde_vac.gif\")\n\nprint(VAC_gif)\n\n# A tibble: 14 × 7\n   format width height colorspace matte filesize density\n   &lt;chr&gt;  &lt;int&gt;  &lt;int&gt; &lt;chr&gt;      &lt;lgl&gt;    &lt;int&gt; &lt;chr&gt;  \n 1 GIF      800    600 sRGB       FALSE        0 72x72  \n 2 GIF      800    600 sRGB       FALSE        0 72x72  \n 3 GIF      800    600 sRGB       FALSE        0 72x72  \n 4 GIF      800    600 sRGB       FALSE        0 72x72  \n 5 GIF      800    600 sRGB       FALSE        0 72x72  \n 6 GIF      800    600 sRGB       FALSE        0 72x72  \n 7 GIF      800    600 sRGB       FALSE        0 72x72  \n 8 GIF      800    600 sRGB       FALSE        0 72x72  \n 9 GIF      800    600 sRGB       FALSE        0 72x72  \n10 GIF      800    600 sRGB       FALSE        0 72x72  \n11 GIF      800    600 sRGB       FALSE        0 72x72  \n12 GIF      800    600 sRGB       FALSE        0 72x72  \n13 GIF      800    600 sRGB       FALSE        0 72x72  \n14 GIF      800    600 sRGB       FALSE        0 72x72  \n\n\n\n\n\n\n\n\n\nObservation\nThe Kernel Density Estimation (KDE) for Violence against civilians from 2021-Q1 to 2024-Q2 shows a prominent concentration of violence in the southern part of the Sagaing region. The heatmap reveals a consistent and persistent hotspot in this area, as indicated by the bright yellow and red colors. The central and northern parts of Sagaing experience significantly lower levels of violence, with the KDE remaining mostly blue, signifying low or no event density. Over time, the intensity in the southern region fluctuates but remains the primary area of violence against civilians. The steady presence of violence in this specific area suggests that it is a focal point for civilian-targeted conflicts, highlighting a potentially significant humanitarian issue concentrated in the southern part of Sagaing over the observed period."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#nd-order-spatial-point-patterns-analysis",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#nd-order-spatial-point-patterns-analysis",
    "title": "Take-Home Exercise 1:Geospatial Analytics for Social Good: Application of Spatial and Spatio-temporal Point Patterns Analysis to discover the geographical distribution of Armed Conflict in Myanmar",
    "section": "4. 2nd-Order Spatial Point Patterns Analysis",
    "text": "4. 2nd-Order Spatial Point Patterns Analysis\nIn this section, I begin by analyzing the number of events by district within the Sagaing region to identify the areas with the highest concentration of conflict events. This helps in narrowing down the focus to specific districts for further spatial analysis.\nFirst, I calculate and visualize the event counts by district (admin2) within Sagaing:\n\nevent_counts_by_admin2 &lt;- ACLED_sf %&gt;%\n  filter(admin1 == \"Sagaing\") %&gt;% \n  group_by(admin2) %&gt;% \n  summarize(event_count = n()) %&gt;% \n  arrange(desc(event_count))\n\nHere, I filter the dataset to only include events in Sagaing, then group by districts (admin2), and count the number of events in each district. This provides the basis for identifying which districts have the highest event numbers.\n\nggplot(event_counts_by_admin2, aes(x = reorder(admin2, -event_count), y = event_count)) +\n  geom_bar(stat = \"identity\", fill = \"skyblue\") +\n  coord_flip() +  \n  labs(title = \"Number of Events by District (Admin2) in Sagaing\",\n       x = \"District (Admin2)\",\n       y = \"Number of Events\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nUsing ggplot2, I create a bar chart to visualize the number of events in each district. The reorder() function orders the districts by event count, and coord_flip() rotates the axes for improved readability. The plot clearly highlights the districts with the highest conflict event numbers.\nBased on the histogram, I observe that “Shwebo” and “Yinmarbin” have the top 2 highest event numbers, both exceeding 1,250 events. I will now focus my analysis on these two districts.\nI begin by extracting the boundaries for Shwebo and Yinmarbin:\n\nsh &lt;- sagaing %&gt;%\n  filter(DT == \"Shwebo\")\nyi &lt;- sagaing %&gt;%\n  filter(DT == \"Yinmarbin\")\n\nThis step isolates the spatial polygons for Shwebo and Yinmarbin districts within the Sagaing region, allowing for a more focused spatial analysis in these two districts.\n\nsh_owin = as.owin(sh)\nyi_owin = as.owin(yi)\n\nNext, I convert the district boundaries into owin objects using the as.owin() function, which allows these spatial areas to be used in subsequent point pattern analyses.\nI then prepare the conflict event data for point pattern analysis by converting the ACLED_sf data into a point pattern (ppp) object and applying jittering to handle any overlapping points.\n\nACLED_ppp &lt;- as.ppp(ACLED_sf)\n\nWarning in as.ppp.sf(ACLED_sf): only first attribute column is used for marks\n\nACLED_ppp &lt;- rjitter(ACLED_ppp, \n                       retry = TRUE,\n                       nsim = 1,\n                       drop = TRUE)\n\nI subset the point pattern object to focus only on the events within the Shwebo and Yinmarbin districts:\n\nACLED_sh_ppp = ACLED_ppp[sh_owin]\nACLED_yi_ppp = ACLED_ppp[yi_owin]\n\nUsing the owin objects for Shwebo and Yinmarbin, I extract the conflict events that occurred specifically within the boundaries of these two districts. This prepares the data for detailed spatial point pattern analysis in Shwebo and Yinmarbin, allowing for further examination of spatial interactions, clustering, or dispersion within these key districts.\n\n4.1 G-Function Analysis\nThe G-function, or nearest-neighbor function, is a second-order spatial point pattern statistic that helps analyze the distribution of distances between points. It is useful for identifying clustering or dispersion tendencies within the spatial point pattern. In this section, I apply the G-function to both the Shwebo and Yinmarbin districts.\n\n4.1.1 Shwebo area\n\nG_SH = Gest(ACLED_sh_ppp, correction = \"border\")\nplot(G_SH, xlim = c(0,500))\n\n\n\n\n\n\n\n\nI begin by computing the G-function for the Shwebo area using the Gest() function. The correction = \"border\" option is applied to adjust for edge effects that can bias the results when points near the boundary have fewer neighbors. The plot shows the empirical G-function, providing insight into the spatial distribution of points up to 500 meters.\n\nG_SH.csr &lt;- envelope(ACLED_sh_ppp, Gest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\nNext, I compute an envelope of the G-function under Complete Spatial Randomness (CSR) using 999 simulations. This helps compare the observed spatial pattern with what would be expected if the events were randomly distributed.\n\nplot(G_SH.csr)\n\n\n\n\n\n\n\n\nObservation\nThe G-function (G_SH.csr) plot for the Shwebo area reveals the spatial distribution of conflict events relative to a Complete Spatial Randomness (CSR) model. The black line represents the observed G-function, while the grey lines represent the CSR envelope generated through simulations. The observed G-function rises above the CSR envelope for distances between approximately 50 to 150 meters, indicating significant clustering of events at these spatial scales. Beyond 150 meters, the observed G-function gradually approaches the CSR envelope, suggesting a decrease in clustering. This indicates that conflict events in Shwebo are not randomly distributed but instead exhibit spatial clustering, particularly at shorter distances, reflecting localized groupings of events within this area.\n\n\n4.1.2 Yinmarbin area\n\nG_YI = Gest(ACLED_yi_ppp, correction = \"best\")\nplot(G_YI)\n\n\n\n\n\n\n\n\nSimilarly, I compute the G-function for the Yinmarbin area, this time using the “best” correction to optimize the adjustment for edge effects. The plot shows the empirical G-function for the district.\n\nG_YI.csr &lt;- envelope(ACLED_yi_ppp, Gest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\nThe CSR envelope for Yinmarbin is generated with 999 simulations and includes all possible corrections to improve the accuracy of the comparison.\n\nplot(G_YI.csr)\n\n\n\n\n\n\n\n\nObservation\nThe G-function (G_YI.csr) plot for the Yinmarbin area shows the spatial distribution of conflict events in relation to the Complete Spatial Randomness (CSR) model. The observed G-function (black line) rises sharply and exceeds the CSR envelope (grey dashed lines) for distances up to around 150 meters, indicating significant clustering of conflict events at this scale. After 150 meters, the G-function flattens and remains above the CSR envelope, which suggests that clustering is persistent across larger distances, though less pronounced compared to shorter ranges. The spatial pattern of conflict events in Yinmarbin is clearly non-random, with a high degree of clustering evident particularly at short distances, suggesting localized concentrations of conflict within this region.\n\n\n\n4.2 F-Function Analysis\nThe F-function, or empty-space function, measures the distribution of distances from arbitrary locations in space to the nearest event. It provides an alternative way to assess the spatial distribution of events, complementing the G-function by focusing on the “gaps” between points.\n\n4.2.1 Shwebo area\n\nF_SH = Fest(ACLED_sh_ppp)\nplot(F_SH)\n\n\n\n\n\n\n\n\nThe F-function for Shwebo is computed using the Fest() function. This plot shows the distance distribution between random points in the area and the nearest conflict events, helping to identify whether the event points are clustered or dispersed.\n\nF_SH.csr &lt;- envelope(ACLED_sh_ppp, Fest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\nSimilar to the G-function, I generate a CSR envelope for the F-function using 999 simulations to compare the observed spatial pattern with random expectations.\n\nplot(F_SH.csr)\n\n\n\n\n\n\n\n\nObservation\nThe F-function (F_SH.csr) plot for the Shwebo area compares the spatial distribution of distances from random points to the nearest conflict event, relative to the Complete Spatial Randomness (CSR) model. The observed F-function (black line) remains below the CSR envelope (grey dashed lines) across most distances, particularly for distances under 1500 meters. This indicates that events are more dispersed than expected under CSR, with larger empty spaces between conflict events and random points in Shwebo. The observed pattern suggests a spatial regularity or inhibition effect, meaning that events are not densely clustered but instead spaced out across the region, with relatively few close neighbors.\n\n\n4.2.2 Yinmarbin area\n\nF_YI = Fest(ACLED_yi_ppp, correction = \"best\")\nplot(F_YI)\n\n\n\n\n\n\n\n\nFor Yinmarbin, I compute the F-function using the “best” correction to account for edge effects. This plot reveals the distribution of distances from random locations to the nearest conflict events.\n\nF_YI.csr &lt;- envelope(ACLED_yi_ppp, Fest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\nAn envelope of the F-function under CSR is generated with 999 simulations and all available corrections, ensuring robust comparison.\n\nplot(F_YI.csr)\n\n\n\n\n\n\n\n\nObservation\nThe F-function (F_YI.csr) plot for the Yinmarbin area indicates the distribution of distances from random points to the nearest conflict event compared to a Complete Spatial Randomness (CSR) model. The observed F-function (black line) lies below the CSR envelope (grey dashed lines) across most distances, particularly up to around 1500 meters. This suggests that events are more regularly spaced than would be expected under random distribution, indicating a lower likelihood of clustering in the immediate surroundings of conflict events. The results point to spatial dispersion or inhibition, with relatively large gaps between conflict events and random points across the Yinmarbin area. This indicates that conflict events are more evenly spaced rather than concentrated in close proximity to one another.\n\n\n\n4.3 K-Function Analysis\nThe K-function is a second-order spatial point pattern statistic that analyzes the spatial dependence between points at different distances. It helps detect clustering or regularity over varying scales, which is especially useful for understanding how events are distributed over space. Below is the analysis for both the Shwebo and Yinmarbin areas using the K-function.\n\n4.3.1 Shwebo area\n\nK_SH = Kest(ACLED_sh_ppp, correction = \"Ripley\")\nplot(K_SH, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n\n\nThe K-function for the Shwebo area is computed using Kest() with Ripley’s edge correction to account for boundary effects. The plot of K(d)-r shows the deviation from Complete Spatial Randomness (CSR) at different distances d. This helps identify whether the events are clustered (above the line) or regularly spaced (below the line) over varying spatial scales.\n\nK_SH.csr &lt;-envelope(ACLED_sh_ppp, Kest, nsim = 9, rank = 10, glocal = TRUE)\n\nGenerating 9 simulations of CSR  ...\n1, 2, \n[27:59 remaining, estimate finish 2024-09-22 18:31:23]\n3, \n[23:30 remaining, estimate finish 2024-09-22 18:30:45]\n4, \n[19:13 remaining, estimate finish 2024-09-22 18:30:10]\n5, \n[15:11 remaining, estimate finish 2024-09-22 18:29:47]\n6, \n[11:25 remaining, estimate finish 2024-09-22 18:29:52]\n7,  [7:35 remaining] 8,  [3:50 remaining] \n9.\n\nDone.\n\n\nTo evaluate the results against CSR, I generate an envelope using 9 simulations (nsim = 9) with global and local envelope comparisons (glocal = TRUE). This allows me to assess whether the observed spatial distribution significantly deviates from randomness.\n\nplot(K_SH.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\")\n\n\n\n\n\n\n\n\nObservation\nThe K-function (K_SH.csr) plot for the Shwebo area reveals significant clustering of conflict events over various spatial scales when compared to the Complete Spatial Randomness (CSR) model. The observed K-function (black line) consistently rises above the CSR envelope (grey dashed lines) across the distance range. This deviation indicates that conflict events are more clustered than expected under randomness, particularly over larger distances. As the distance d increases, the clustering effect becomes more pronounced, signifying that conflict events in Shwebo tend to occur in closer proximity to each other over a broad spatial range. This pattern suggests that conflict events in Shwebo are spatially aggregated, with noticeable clustering extending over considerable distances.\n\n\n4.3.2 Yinmarbin area\n\nK_YI = Kest(ACLED_yi_ppp, correction = \"Ripley\")\nplot(K_YI, . -r ~ r, \n     ylab= \"K(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\n\n\n\n\nThe K-function for Yinmarbin is similarly computed using Kest() with Ripley’s correction. The plot of K(d)-r shows the spatial dependency between conflict events over increasing distances, with d representing the distance in meters. I also restrict the plot to a maximum distance of 1000 meters for more focused analysis.\n\nK_YI.csr &lt;- envelope(ACLED_yi_ppp, Kest, nsim = 9, rank = 10, glocal=TRUE)\n\nGenerating 9 simulations of CSR  ...\n1, 2,  [6:19 remaining] 3,\n [5:32 remaining] 4,  [4:34 remaining] 5,  [3:38 remaining] 6,\n [2:43 remaining] 7,  [1:48 remaining] 8,  [54 sec remaining] \n9.\n\nDone.\n\n\nAn envelope for the K-function is generated for Yinmarbin, allowing for a comparison of the observed spatial pattern against the null hypothesis of CSR, using 9 simulations.\n\nplot(K_YI.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"K(d)-r\", xlim=c(0,500))\n\n\n\n\n\n\n\n\nError in UseMethod(\"distmap\") : \n  no applicable method for 'distmap' applied to an object of class \"im\"\n\n\nObservation\nThe K-function (K_YI.csr) plot for the Yinmarbin area indicates clustering of conflict events at various spatial scales. The observed K-function (black line) lies above the CSR envelope (grey dashed lines) for distances up to approximately 250 meters, suggesting significant clustering of events at these smaller spatial scales. Beyond 250 meters, the observed K-function approaches the CSR envelope, indicating that the clustering effect diminishes at larger distances. However, within the first 250 meters, the clustering of events is evident, meaning that conflict events in Yinmarbin are more likely to occur close to each other than would be expected under a random distribution.\n\n\n\n4.4 L-Function Analysis\nThe L-function is a variance-stabilized version of the K-function, which linearizes the results to make deviations from CSR easier to interpret. This section presents the L-function analysis for both the Shwebo and Yinmarbin areas.\n\n4.4.1 Shwebo area\n\nL_SH = Lest(ACLED_sh_ppp, correction = \"Ripley\")\nplot(L_SH, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n\n\nI compute the L-function for Shwebo using Lest(), with Ripley’s correction applied. The plot of L(d)-r shows how the spatial point pattern compares to CSR over varying distances d. Values above zero indicate clustering, while values below zero suggest regularity.\n\nL_SH.csr &lt;- envelope(ACLED_sh_ppp, Lest, nsim = 9, rank = 10, glocal=TRUE)\n\nGenerating 9 simulations of CSR  ...\n1, 2, \n[28:53 remaining, estimate finish 2024-09-22 19:30:30]\n3, \n[23:47 remaining, estimate finish 2024-09-22 19:29:12]\n4, \n[19:47 remaining, estimate finish 2024-09-22 19:29:08]\n5, \n[15:54 remaining, estimate finish 2024-09-22 19:29:17]\n6, \n[11:47 remaining, estimate finish 2024-09-22 19:28:55]\n7,  [7:59 remaining] 8,  [3:58 remaining] \n9.\n\nDone.\n\n\nThe CSR envelope is calculated with 9 simulations, enabling a comparison between the observed spatial pattern and the expected pattern under randomness.\n\nplot(L_SH.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\n\n\n\n\n\n\nObservation\nThe L-function (L_SH.csr) plot for the Shwebo area shows significant deviations from the Complete Spatial Randomness (CSR) model, as indicated by the observed L-function (black line) consistently remaining above the CSR envelope (grey dashed lines). The fact that the observed L-function is well above the CSR line across the distance range suggests that conflict events in the Shwebo area exhibit strong spatial clustering, particularly at larger distances. The clustering effect becomes more pronounced beyond 15,000 meters, where the L-function increases sharply. This indicates that conflict events are not randomly distributed but are instead aggregated over large spatial scales, pointing to concentrated zones of conflict activity in the Shwebo region.\n\n\n4.4.2 Yinmarbin area\nThe L-function analysis for Yinmarbin follows a similar approach to Shwebo, allowing for direct comparison of the two areas.\n\nL_YI = Lest(ACLED_yi_ppp, correction = \"Ripley\")\nplot(L_YI, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\n\n\n\n\nThe L-function for Yinmarbin is computed and plotted, with the L(d)-r graph showing how the events are distributed spatially up to 1000 meters. This provides insight into clustering or dispersion patterns at different scales.\n\nL_YI.csr &lt;- envelope(ACLED_yi_ppp, Lest, nsim = 9, rank = 10, glocal=TRUE)\n\nGenerating 9 simulations of CSR  ...\n1, 2,  [6:19 remaining] 3,\n [5:31 remaining] 4,  [4:40 remaining] 5,  [3:46 remaining] 6,\n [2:51 remaining] 7,  [1:54 remaining] 8,  [57 sec remaining] \n9.\n\nDone.\n\n\nI generate the CSR envelope for the L-function with 9 simulations, allowing for robust comparisons between the observed event distribution and the CSR model.\n\nplot(L_YI.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"L(d)-r\", xlim=c(0,500))\n\n\n\n\n\n\n\n\nObservation\nThe L-function (L_YI.csr) plot for the Yinmarbin area shows the observed L-function (black line) lying above the Complete Spatial Randomness (CSR) envelope (grey dashed lines), particularly at smaller spatial distances up to around 500 meters. This indicates significant clustering of conflict events at short spatial scales. As the distance increases, the L-function continues to rise, further confirming the clustering behavior of events within Yinmarbin. The consistent deviation from the CSR model implies that conflict events are spatially aggregated rather than randomly distributed, with strong clustering occurring over shorter distances and continuing as distances increase."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#quarterly-spatio-temporal-kernel-density-estimation-kde",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#quarterly-spatio-temporal-kernel-density-estimation-kde",
    "title": "Take-Home Exercise 1:Geospatial Analytics for Social Good: Application of Spatial and Spatio-temporal Point Patterns Analysis to discover the geographical distribution of Armed Conflict in Myanmar",
    "section": "5. Quarterly Spatio-Temporal Kernel Density Estimation (KDE)",
    "text": "5. Quarterly Spatio-Temporal Kernel Density Estimation (KDE)\nIn this section, I perform a Spatio-Temporal Kernel Density Estimation (KDE) to analyze how conflict events evolve across both space and time. This approach provides insights into the spatial patterns of conflict over different quarters, offering a comprehensive view of how the intensity and distribution of events change throughout the period from January 2021 to June 2024.\nFirst, I create a quarter variable in the dataset, representing the combination of the event year and quarter. This is important for structuring the spatio-temporal analysis.\n\nACLED_sf$quarter &lt;- paste0(year(ymd(ACLED_sf$event_date)), \"-Q\", quarter(ymd(ACLED_sf$event_date)))\n\nNext, I generate a sequence of unique quarter labels, ensuring all quarters within the specified date range are accounted for. These labels are based on the date range from January 2021 to June 2024.\n\nunique_quarters &lt;- seq(from = as.Date(\"2021-01-01\"), to = as.Date(\"2024-06-30\"), by = \"quarter\")\nquarter_labels &lt;- paste0(year(unique_quarters), \"-Q\", quarter(unique_quarters))\n\nI then convert the quarter variable into a numeric factor to facilitate its integration into the spatio-temporal KDE. Each quarter is assigned a unique numeric identifier.\n\nACLED_sf$quarter &lt;- as.numeric(factor(ACLED_sf$quarter, levels = quarter_labels))\n\nI select the quarter variable from the dataset, preparing it for use in the spatio-temporal point pattern analysis.\n\nACLED_quarter &lt;- ACLED_sf %&gt;%\n  select(quarter)\n\nNext, I convert the ACLED_quarter data into a spatial point pattern object (ppp), which is essential for performing KDE in a spatio-temporal context.\n\nACLED_quarter_ppp &lt;- as.ppp(ACLED_quarter)\nACLED_quarter_ppp\n\nMarked planar point pattern: 11128 points\nmarks are numeric, of storage type  'double'\nwindow: rectangle = [-16397.05, 256586.9] x [2393568.1, 2987342.4] units\n\n\nUsing the as.ppp() function, I create the point pattern object based on the conflict event quarters. This object contains the spatial coordinates and the temporal information (quarters) of the events.\nI subset the spatial point pattern to focus only on events within the Sagaing region, using the spatial window (owin) of Sagaing. This ensures that the KDE is calculated only for the specific region of interest.\n\nACLED_quarter_owin &lt;- ACLED_quarter_ppp[sagaing_owin]\nsummary(ACLED_quarter_owin)\n\nMarked planar point pattern:  11128 points\nAverage intensity 1.185406e-07 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 13 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   5.000   7.000   7.693  10.000  14.000 \n\nWindow: polygonal boundary\n37 separate polygons (36 holes)\n                  vertices         area relative.area\npolygon 1 (hole)        12 -9.22970e-02     -9.83e-13\npolygon 2 (hole)         3 -2.78346e-03     -2.97e-14\npolygon 3 (hole)         3 -4.99414e-03     -5.32e-14\npolygon 4 (hole)         3 -6.70916e-04     -7.15e-15\npolygon 5 (hole)         3 -4.99759e-03     -5.32e-14\npolygon 6 (hole)         6 -3.24429e-03     -3.46e-14\npolygon 7 (hole)        11 -5.35508e-02     -5.70e-13\npolygon 8 (hole)         3 -3.06875e-03     -3.27e-14\npolygon 9 (hole)         3 -7.63674e-03     -8.14e-14\npolygon 10 (hole)        3 -8.61831e-05     -9.18e-16\npolygon 11 (hole)        3 -2.44103e-02     -2.60e-13\npolygon 12 (hole)        3 -4.88140e-05     -5.20e-16\npolygon 13 (hole)        4 -1.74466e-04     -1.86e-15\npolygon 14 (hole)        4 -2.30891e-05     -2.46e-16\npolygon 15 (hole)        4 -6.25342e-08     -6.66e-19\npolygon 16 (hole)        4 -3.68040e-02     -3.92e-13\npolygon 17 (hole)        3 -1.27234e-06     -1.36e-17\npolygon 18 (hole)        4 -1.25504e-03     -1.34e-14\npolygon 19 (hole)        3 -1.56980e-02     -1.67e-13\npolygon 20 (hole)        4 -1.13609e-06     -1.21e-17\npolygon 21 (hole)        4 -8.02867e-02     -8.55e-13\npolygon 22 (hole)        4 -3.98058e-05     -4.24e-16\npolygon 23 (hole)        3 -3.55050e-03     -3.78e-14\npolygon 24 (hole)        3 -2.84064e-02     -3.03e-13\npolygon 25 (hole)        3 -8.07642e-04     -8.60e-15\npolygon 26 (hole)        4 -5.20949e-03     -5.55e-14\npolygon 27 (hole)        4 -3.21397e-04     -3.42e-15\npolygon 28 (hole)        4 -2.54957e-05     -2.72e-16\npolygon 29 (hole)        3 -4.29634e-04     -4.58e-15\npolygon 30 (hole)        6 -6.02382e-04     -6.42e-15\npolygon 31 (hole)        4 -4.91852e-04     -5.24e-15\npolygon 32            5887  9.38750e+10      1.00e+00\npolygon 33 (hole)        8 -5.14960e-02     -5.49e-13\npolygon 34 (hole)        3 -1.87101e-06     -1.99e-17\npolygon 35 (hole)       31 -2.12239e-01     -2.26e-12\npolygon 36 (hole)        6 -4.99398e-02     -5.32e-13\npolygon 37 (hole)        4 -6.87492e-03     -7.32e-14\nenclosing rectangle: [-17699.96, 308341.37] x [2390344.6, 3029739.1] units\n                     (326000 x 639400 units)\nWindow area = 9.3875e+10 square units\nFraction of frame area: 0.45\n\n\nI plot the spatio-temporal point pattern, which provides a visual representation of how conflict events are distributed across both space and time in the Sagaing region. This plot helps to visualize the spatial evolution of conflict across different quarters.\n\nplot(ACLED_quarter_owin)\n\n\n\n\n\n\n\n\nNext, I calculate the KDE for conflict events within the Sagaing region across multiple quarters. This allows me to observe the density and distribution of conflict events both spatially and temporally.\nI begin by computing the spatio-temporal KDE using the spattemp.density() function:\n\nst_kde_ACLED &lt;- spattemp.density(ACLED_quarter_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\nHere, I apply the spattemp.density() function to the spatio-temporal point pattern object ACLED_quarter_owin, which represents the conflict events restricted to Sagaing. This function calculates the KDE over both space and time, producing a density estimate that shows how conflict intensity varies spatially across different quarters.\nNext, I create a mapping between the numeric quarter values and the actual quarter labels (e.g., “2021-Q1”). This allows for clear labeling in the plots.\n\nquarter_numbers &lt;- 1:length(quarter_labels)\n\nquarter_map &lt;- setNames(quarter_labels, quarter_numbers)\n\ntims &lt;- seq(1, 14, by = 1)\n\nHere, quarter_numbers generates a sequence for each quarter, while quarter_map associates each number with its corresponding quarter label. The sequence tims defines the range of quarters to be plotted, from Q1 2021 to Q2 2024.\nI set up a plotting environment to display two KDE plots at a time, side by side. This allows for easy comparison between different quarters.\n\npar(mfcol = c(1, 2), mar = c(4, 4, 4, 4))\n\nFinally, I loop through the defined quarters, generating KDE plots for each one. These plots represent the spatial distribution of conflict events at each quarter.\n\nfor (i in tims) {\n  plot(st_kde_ACLED, i, \n       override.par = FALSE, \n       fix.range = TRUE, \n       main = paste(\"STKDE at Quarter\", quarter_map[i]))\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservation\nThe KDE plots from 2021-Q1 to 2024-Q2 reveal temporal shifts and spatial patterns of conflict intensity in the Sagaing region. Over the observed quarters, there are consistent hotspots of activity, primarily in the southern part of the region. The intensity of these hotspots, shown in red and yellow, fluctuates over time but remains focused on similar areas. Central and northern parts of Sagaing see occasional but less intense activity, indicated by the blue and pink regions. Notably, from 2021-Q4 onward, the density of events in the southern region grows more concentrated, highlighting persistent conflict in this area. The pattern suggests that while conflict is somewhat spread across the region, specific areas experience a higher and more consistent intensity of events over time."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#nd-order-spatio-temporal-point-patterns-analysis",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#nd-order-spatio-temporal-point-patterns-analysis",
    "title": "Take-Home Exercise 1:Geospatial Analytics for Social Good: Application of Spatial and Spatio-temporal Point Patterns Analysis to discover the geographical distribution of Armed Conflict in Myanmar",
    "section": "6. 2nd-Order Spatio-temporal Point Patterns Analysis",
    "text": "6. 2nd-Order Spatio-temporal Point Patterns Analysis\nIn this section, I perform 2nd-order spatio-temporal point pattern analysis for conflict events in the Sagaing region. Specifically, I apply the G-function and K-function to each quarter, comparing the spatial distribution of events to a Complete Spatial Randomness (CSR) model. This analysis helps identify spatial clustering or regularity of conflict events over time.\nI begin by extracting the unique quarters from the dataset, which will be used to loop through each quarter for analysis.\n\nquarters &lt;- unique(ACLED_sf$quarter)\n\nThis ensures that each quarter is analyzed individually, focusing on how conflict events are distributed spatially within each time period.\n\n6.1 G-Function\nFor each quarter, I compute the G-function to evaluate the spatial distribution of events and compare it to the CSR model using an envelope.\n\nquarter_labels &lt;- c(\"2021-Q1\", \"2021-Q2\", \"2021-Q3\", \"2021-Q4\", \n                    \"2022-Q1\", \"2022-Q2\", \"2022-Q3\", \"2022-Q4\", \n                    \"2023-Q1\", \"2023-Q2\", \"2023-Q3\", \"2023-Q4\",\n                    \"2024-Q1\", \"2024-Q2\")\n\n\nfor (q in quarters) {\n  \n  quarter_data &lt;- ACLED_sf[ACLED_sf$quarter == q, ]\n  \n  spatial_points &lt;- st_coordinates(quarter_data)\n  time_points &lt;- quarter_data$timestamp \n  \n  time_points &lt;- as.numeric(na.omit(time_points))\n  \n  if (length(time_points) &lt;= 1) {\n    warning(paste(\"Not enough valid time points for quarter\", q))\n    next\n  }\n  \n  spatial_ppp &lt;- ppp(x = spatial_points[,1], \n                     y = spatial_points[,2], \n                     window = as.owin(sagaing_owin))  \n  \n  spatial_ppp &lt;- rjitter(spatial_ppp, retry = TRUE, nsim = 1, drop = TRUE)\n  \n  G_spatial &lt;- tryCatch(Gest(spatial_ppp, correction = \"border\"),\n                        error = function(e) {\n                          warning(paste(\"Error in Gest for quarter\", q, \":\", e$message))\n                          return(NULL)\n                        })\n  \n  if (!is.null(G_spatial)) {\n    plot(G_spatial, main = paste(\"Spatial G-function for Quarter\", q), xlim = c(0, 500))\n  \n    G_env &lt;- tryCatch(envelope(spatial_ppp, Gest, nsim = 999, correction = \"border\"),\n                      error = function(e) {\n                        warning(paste(\"Error in envelope for quarter\", q, \":\", e$message))\n                        return(NULL)\n                      })\n    \n    if (!is.null(G_env)) {\n      plot(G_env, main = paste(\"G-function with CSR Envelope for\", quarter_labels[q]))\n    }\n  }\n\n}\n\nWarning: data contain duplicated points\n\n\n\n\n\n\n\n\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\nWarning: data contain duplicated points\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\nWarning: data contain duplicated points\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\nWarning: data contain duplicated points\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\nWarning: data contain duplicated points\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\nWarning: data contain duplicated points\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\nWarning: data contain duplicated points\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\nWarning: data contain duplicated points\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\nWarning: data contain duplicated points\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\nWarning: data contain duplicated points\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\nWarning: data contain duplicated points\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\nWarning: data contain duplicated points\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\nWarning: data contain duplicated points\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\nWarning: data contain duplicated points\n\n\n\n\n\n\n\n\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\nWarning in value[[3L]](cond): Error in envelope for quarter 1 : missing value\nwhere TRUE/FALSE needed\n\n\n\n\n\n\n\n\n\nIn this loop:\n\nExtract Quarter Data: The dataset is filtered to include only the events corresponding to the current quarter (q). The spatial coordinates (st_coordinates()) and time points (timestamp) for the events are extracted.\nCheck Time Points: If the quarter has fewer than two valid time points, the loop moves to the next quarter as it’s not possible to compute meaningful statistics.\nCreate Point Pattern Object: The spatial coordinates are converted into a point pattern object (ppp) using the ppp() function, and jittering (rjitter()) is applied to avoid overlapping points.\nG-Function Calculation: The G-function is computed using the Gest() function with a “border” correction to adjust for edge effects. If an error occurs during this calculation, the error is caught and a warning is issued.\nPlot G-Function: If the G-function is successfully computed, it is plotted to show the spatial distribution of events for the current quarter. Quarter 14 refers to “2024-Q2”, quarter 13 refers to “2024-Q1”, and so on.\nEnvelope with CSR: A CSR envelope is generated using envelope() with 999 simulations. This envelope helps compare the observed event distribution with a random spatial distribution. If the envelope is successfully computed, it is plotted alongside the G-function."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#explore",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#explore",
    "title": "Take-Home Exercise 1:Geospatial Analytics for Social Good: Application of Spatial and Spatio-temporal Point Patterns Analysis to discover the geographical distribution of Armed Conflict in Myanmar",
    "section": "7. Explore",
    "text": "7. Explore\nIn this section, I explore key aspects of the conflict events data, including the distribution of event types, source scales for “Strategic developments,” and fatalities by event type. The analysis also focuses on the top actors involved in “Strategic developments” at the national level.\n\n7.1 Event Type Distribution\nFirst, I summarize the number and percentage of each event type in the dataset:\n\nevent_summary &lt;- ACLED_sf %&gt;%\n  group_by(event_type) %&gt;%\n  summarise(count = n()) %&gt;%\n  mutate(percentage = count / sum(count) * 100) \n\nThis step calculates the total number of events for each event type and computes the percentage share of each type relative to the total number of events.\n\nggplot(event_summary, aes(x = \"\", y = percentage, fill = event_type)) +\n  geom_bar(width = 1, stat = \"identity\") + \n  coord_polar(\"y\", start = 0) + \n  theme_void() + \n  labs(fill = \"Event Type\", title = \"Percentage of Each Event Type\") +\n  theme(legend.position = \"right\") + \n  geom_text(aes(label = paste0(round(percentage, 1), \"%\")), \n            position = position_stack(vjust = 0.5)) \n\n\n\n\n\n\n\n\nObservation\nThe pie chart illustrates the distribution of conflict events by type in the Sagaing region. Strategic developments account for the largest portion of events, representing 31.7% of the total. Both Explosions/Remote violence and Violence against civilians each constitute 26.8% of the events, indicating their significant presence in the region. Meanwhile, Battles make up the smallest portion, at 14.8% of all recorded events. This distribution highlights the prominence of strategic and violence-related events, with battles being comparatively less frequent.\n\n\n7.2 Source Scale for “Strategic Developments”\nNext, I filter the dataset to focus on “Strategic developments” and analyze the source scale for these events.\n\nstrategic_data &lt;- ACLED_sf %&gt;%\n  filter(event_type == \"Strategic developments\")\n\nI then calculate the distribution of source scales for these events:\n\nsource_summary_strategic &lt;- strategic_data %&gt;%\n  group_by(source_scale) %&gt;%\n  summarise(count = n()) %&gt;%\n  mutate(percentage = count / sum(count) * 100)\n\nThe following plot displays the percentage breakdown of the source scale for “Strategic developments.”\n\nggplot(source_summary_strategic, aes(x = \"\", y = percentage, fill = source_scale)) +\n  geom_bar(width = 1, stat = \"identity\") + \n  coord_polar(\"y\", start = 0) + \n  theme_void() +\n  labs(fill = \"Source Scale\", title = \"Source Scale for Strategic Developments\") +\n  theme(legend.position = \"right\") +\n  geom_text(aes(label = paste0(round(percentage, 1), \"%\")), \n            position = position_stack(vjust = 0.5)) \n\n\n\n\n\n\n\n\nObservation\nThe pie chart shows that the majority of Strategic developments events are sourced at the National level, accounting for 62.7% of the total. Smaller portions are reported at the International scale (7.1%) and the Regional scale (4.7%), with other categories such as National-International, Subnational, and New media each contributing less than 5%. This distribution indicates that most strategic events are driven by national-level sources, with limited involvement from international or subnational media outlets.\n\n\n7.3 Distribution of Fatalities by Event Type\nI explore the distribution of fatalities across different event types using a histogram.\n\nggplot(ACLED_sf, aes(x = fatalities)) +\n  geom_histogram(binwidth = 1, fill = \"skyblue\", color = \"black\") + \n  facet_wrap(~ event_type, scales = \"free\") + \n  labs(title = \"Distribution of Fatalities by Event Type\", \n       x = \"Number of Fatalities\", \n       y = \"Count\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nThis faceted histogram shows how fatalities are distributed across each event type, allowing for a clear comparison of the severity of each type of event.\nObservation\nThe histogram plots show the distribution of fatalities across different conflict event types. The majority of Battles and Explosions/Remote violence events result in fewer than 10 fatalities, with only a few extreme cases involving a higher number of deaths. Strategic developments, on the other hand, typically result in no fatalities, as evidenced by the large count at zero fatalities. Violence against civilians displays a wider range of fatalities, though most incidents also lead to fewer than 10 fatalities. These distributions suggest that while violence against civilians and explosions can sometimes cause more significant loss of life, fatalities remain relatively low across most events.\n\n\n7.4 Actors in “Strategic Developments” (National)\nSince “Strategic developments” are the most frequent event type, with a large percentage attributed to “National” sources, I explore the top actors involved in these events.\n\nstrategic_data_national &lt;- ACLED_sf %&gt;%\n  filter(event_type == \"Strategic developments\", source_scale == \"National\")\n\nI summarize the top 5 actors involved in these events for both Actor1 and Actor2:\n\nactor1_top5 &lt;- strategic_data_national %&gt;%\n  group_by(actor1) %&gt;%\n  summarise(count = n()) %&gt;%\n  arrange(desc(count)) %&gt;%\n  top_n(5, count) %&gt;%\n  mutate(percentage = count / sum(count) * 100)\n\n\nactor2_top5 &lt;- strategic_data_national %&gt;%\n  group_by(actor2) %&gt;%\n  summarise(count = n()) %&gt;%\n  arrange(desc(count)) %&gt;%\n  top_n(5, count) %&gt;%\n  mutate(percentage = count / sum(count) * 100)\n\nFinally, I visualize the top 5 actors for both Actor1 and Actor2:\n\nggplot(actor1_top5, aes(x = \"\", y = percentage, fill = actor1)) +\n  geom_bar(width = 1, stat = \"identity\") + \n  coord_polar(\"y\", start = 0) +  \n  theme_void() +  \n  labs(fill = \"Actor1\", title = \"Top 5 Actor1 in Strategic Developments (National)\") +\n  geom_text(aes(label = paste0(round(percentage, 1), \"%\")), \n            position = position_stack(vjust = 0.5)) \n\n\n\n\n\n\n\n\n\nggplot(actor2_top5, aes(x = \"\", y = percentage, fill = actor2)) +\n  geom_bar(width = 1, stat = \"identity\") + \n  coord_polar(\"y\", start = 0) + \n  theme_void() + \n  labs(fill = \"Actor2\", title = \"Top 5 Actor2 in Strategic Developments (National)\") +\n  geom_text(aes(label = paste0(round(percentage, 1), \"%\")), \n            position = position_stack(vjust = 0.5)) \n\n\n\n\n\n\n\n\nObservation\n\nTop 5 Actor1 in Strategic Developments:\n\nThe Military Forces of Myanmar (2021-) dominate Actor1, representing 87.3% of all strategic development events. Other actors, such as the Police Forces of Myanmar and Civilians (Myanmar), play minor roles, each accounting for less than 8% of the events.\n\nTop 5 Actor2 in Strategic Developments:\n\nCivilians (Myanmar) account for 79.4% of all Actor2 interactions, indicating that they are often on the receiving end of strategic development actions. Unidentified Armed Groups and Military Forces of Myanmar (2021-) are also present, but to a much lesser extent.\n\nGiven that the Military Forces of Myanmar (2021-) appear as the dominant Actor1 and Civilians (Myanmar) make up a substantial portion of Actor2, it is likely that strategic developments primarily involve military actions directed toward civilians. This suggests a potential power imbalance where the military is engaging in activities that impact civilians, possibly in the context of enforcement, control, or conflict management. The high representation of civilians in the Actor2 category could indicate that they are frequently affected by military operations, either as targets of enforcement or in situations involving military governance or conflict suppression.\n\n\n\n7.5 Research\nI have found out that the displacement crisis in central Myanmar, especially in Sagaing, has escalated due to military actions following the coup. The burning of homes and civilian infrastructure by military forces has led to widespread displacement, with estimates of one million to over two million internally displaced persons (IDPs) in Sagaing, an area that had no prior reports of displacement. The National Unity Government (NUG) and grassroots networks, such as the Sagaing Forum, are coordinating aid deliveries to address this humanitarian crisis.\nIn my findings, Strategic developments events, where the Military Forces of Myanmar (2021-) are the dominant Actor1, align with the reported destruction in Sagaing. The military’s role in strategic activities, accounting for 87.3% of Actor1, is closely linked to civilian suffering, as Civilians (Myanmar) constitute 79.4% of Actor2. This supports the research that highlights the military’s actions as a key driver of displacement.\nAdditionally, the KDE plots show concentrated conflict activity in southern Sagaing, corroborating reports that Sagaing has become a hotspot for conflict, displacement, and resistance efforts. Resistance groups such as the Kalay Civil Army (KCA), formed in response to brutal military crackdowns, have armed themselves with traditional weapons like tumi guns and, in some cases, modern firearms to fight back. Sagaing has seen intense confrontations, particularly in towns like Kalay, Monywa, and Tamu, where resistance movements have organized against the military.\nThe March 27 massacre and the subsequent resistance in Kalay, where protesters even conducted prisoner swaps and held the protest camp for over 10 days, demonstrate the strong opposition to military rule. These efforts have been replicated in other townships, contributing to the armed resistance in Sagaing. The region’s history of pro-democracy protests, dating back to the 1988 uprising and the Saffron Revolution in 2007, further explains why Sagaing has become a focal point of both resistance and military crackdown.\nIn conclusion, I have found out that the conflict intensity, displacement, and armed resistance in Sagaing are closely tied to the military’s strategic operations. My findings indicate a direct impact of military actions on civilians, through both displacement and violent confrontations, as seen in the KDE plots and the dominance of military forces in strategic developments. The resistance efforts, including the use of traditional and modern weaponry by groups like the KCA, underscore the region’s determination to oppose the military, even as displacement and violence escalate."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#reference-declaration",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#reference-declaration",
    "title": "Take-Home Exercise 1:Geospatial Analytics for Social Good: Application of Spatial and Spatio-temporal Point Patterns Analysis to discover the geographical distribution of Armed Conflict in Myanmar",
    "section": "8. Reference & Declaration",
    "text": "8. Reference & Declaration\nI hereby declare that part of the phrasing and explanation in this report has been generated and/or assisted by the use of OpenAI’s ChatGPT, which provided assistance in structuring and summarizing the content, as well as offering insights based on the information I provided. The analysis and conclusions drawn in this report, however, are based on my research, data analysis, and interpretation of findings.\nhttps://myanmar.iiss.org/analysis/humanitarian\nhttps://www.frontiermyanmar.net/en/the-tumi-revolution-protesters-fight-back-in-sagaing-region/\nhttps://www.frontiermyanmar.net/en/conscription-or-conflict-dry-zone-draft-dodgers-come-home/"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex06/In-class_Ex06.html",
    "href": "In-class_Ex/In-class_Ex06/In-class_Ex06.html",
    "title": "In-class Exercise 6",
    "section": "",
    "text": "Installing Required Packages\n\npacman::p_load(sf, sfdep, tmap, tidyverse, tmap)\n\nLoading Data\n\nhunan_2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nhunan_sf &lt;- st_read(\n  dsn = \"data/geospatial\",\n  layer = \"Hunan\"\n)\n\nReading layer `Hunan' from data source \n  `C:\\EasonXu-HY99\\IS415\\In-class_Ex\\In-class_Ex06\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\nhunan_GDPPC &lt;- left_join(hunan_sf, hunan_2012) %&gt;%\n  select(1:4, 7, 15)\n\nJoining with `by = join_by(County)`\n\n\nDeriving Queen’s Contiguity Weights using sfdep Package\n\nwm_q &lt;- hunan_GDPPC %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb, style = \"W\"),\n         .before = 1)\n\nConducting Global Moran’s I Test\n\nglobal_moran_test(\n  wm_q$GDPPC,\n  wm_q$nb,\n  wm_q$wt\n)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\nCalculating Global Moran’s I\n\nmoranI &lt;- global_moran(\n  wm_q$GDPPC,\n  wm_q$nb,\n  wm_q$wt\n)\n\nRunning Global Moran’s I Permutation Test\n\nset.seed(1234)\n\n\nglobal_moran_perm(\n  wm_q$GDPPC,\n  wm_q$nb,\n  wm_q$wt,\n  nsim = 99\n)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.30075, observed rank = 100, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\nCalculating Local Moran’s I\n\nlisa &lt;- wm_q %&gt;%\n  mutate(local_moran = local_moran(GDPPC, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_moran)\n\n\nInterpretation Notes:\n\nUse p_ii_sim for simulation results.\nii is for the local Moran statistic.\nFocus on the mean or median based on data skewness:\n\nIf skewed heavily (many values far from 0), use the median.\nA skewness close to 0 implies using the mean. You can plot a histogram to assess skewness.\n\n\nVisualizing Local Moran’s I\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(lisa) +\n  tm_fill(\"ii\") +\n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6, 8)) +\n  tm_layout(\n    main.title = \"Local Moran's I of GDPPC\",\n    main.title.size = 1\n  )\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nVisualizing P-values for Local Moran’s I\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nmap1 &lt;- tm_shape(lisa) +\n  tm_fill(\"ii\") +\n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6, 8)) +\n  tm_layout(\n    main.title = \"Local Moran's I of GDPPC\",\n    main.title.size = 1\n  )\n\nmap2 &lt;- tm_shape(lisa) +\n  tm_fill(\"p_ii\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n          labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) +\n  tm_borders(alpha = 0.5) +\n  tm_layout(\n    main.title = \"P-values of Local Moran's I\",\n    main.title.size = 1\n  )\n\ntmap_arrange(map1, map2, ncol = 2)\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nVisualizing the LISA Map\n\nlisa_sig &lt;- lisa %&gt;%\n  filter(p_ii &lt; 0.05)\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(lisa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_sig) +\n  tm_fill(\"mean\") +\n  tm_borders(alpha = 0.5)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\n\n\n\nNote: A LISA map requires filtering based on p-values (p_ii).\n\n\nHot Spot and Cold Spot Analysis\n\nCalculating Local Gi* Statistics\n\nwm_idw &lt;- hunan_GDPPC %&gt;%\n  mutate(\n    nb = st_contiguity(geometry),\n    wts = st_inverse_distance(nb, geometry, scale = 1, alpha = 1),\n    .before = 1\n  )\n\n! Polygon provided. Using point on surface.\n\n\nWarning: There was 1 warning in `stopifnot()`.\nℹ In argument: `wts = st_inverse_distance(nb, geometry, scale = 1, alpha = 1)`.\nCaused by warning in `st_point_on_surface.sfc()`:\n! st_point_on_surface may not give correct results for longitude/latitude data\n\n\n\nHCSA &lt;- wm_idw %&gt;%\n  mutate(local_Gi = local_gstar_perm(GDPPC, nb, wt, nsim = 99), .before = 1) %&gt;%\n  unnest(local_Gi)\n\nHCSA\n\nSimple feature collection with 88 features and 18 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n# A tibble: 88 × 19\n   gi_star cluster   e_gi     var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;    &lt;dbl&gt;      &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.0416 Low     0.0114 0.00000641  0.0493 9.61e-1  0.7          0.35    0.875\n 2 -0.333  Low     0.0106 0.00000384 -0.0941 9.25e-1  1            0.5     0.661\n 3  0.281  High    0.0126 0.00000751 -0.151  8.80e-1  0.9          0.45    0.640\n 4  0.411  High    0.0118 0.00000922  0.264  7.92e-1  0.6          0.3     0.853\n 5  0.387  High    0.0115 0.00000956  0.339  7.34e-1  0.62         0.31    1.07 \n 6 -0.368  High    0.0118 0.00000591 -0.583  5.60e-1  0.72         0.36    0.594\n 7  3.56   High    0.0151 0.00000731  2.61   9.01e-3  0.06         0.03    1.09 \n 8  2.52   High    0.0136 0.00000614  1.49   1.35e-1  0.2          0.1     1.12 \n 9  4.56   High    0.0144 0.00000584  3.53   4.17e-4  0.04         0.02    1.23 \n10  1.16   Low     0.0104 0.00000370  1.82   6.86e-2  0.12         0.06    0.416\n# ℹ 78 more rows\n# ℹ 10 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wts &lt;list&gt;, NAME_2 &lt;chr&gt;,\n#   ID_3 &lt;int&gt;, NAME_3 &lt;chr&gt;, ENGTYPE_3 &lt;chr&gt;, County &lt;chr&gt;, GDPPC &lt;dbl&gt;,\n#   geometry &lt;POLYGON [°]&gt;\n\n\nVisualizing Gi* Statistics\n\nHCSA_sig &lt;- HCSA %&gt;%\n  filter(p_sim &lt; 0.05)\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(HCSA) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(HCSA_sig) +\n  tm_fill(\"gi_star\") +\n  tm_borders(alpha = 0.5)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nNote: Gi is used for hotspot and coldspot analysis, while LISA identifies clusters.*"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html",
    "title": "Take-Home Exercise 2",
    "section": "",
    "text": "Drug abuse is associated with significant negative health, financial and social consequences. Yet, illicit drug consumption remains highly prevalent and continues to be a growing problem worldwide. In 2021, 1 in 17 people aged 15–64 in the world had used a drug in the past 12 months. Notwithstanding population growth, the estimated number of drug users grew from 240 million in 2011 to 296 million in 2021.\nThe geopolitics of Thailand which is near the Golden Triangle of Indochina, the largest drug production site in Asia, and the constant transportation infrastructure development made Thailand became market and transit routes for drug trafficking to the third countries.\nIn Thailand, drug abuse is one of the major social issue. There are about 2.7 million youths using drugs in Thailand. Among youths aged between 15 and 19 years, there are about 300,000 who have needs for drug treatment. Most of Thai youths involved with drugs are vocational-school students, which nearly doubles in number compared to secondary-school students.\nFigure below shows geographic distribution of drug use cases by province and by year.\n\n\n\nAs a curious geospatial analytics green horn, you are interested to discover:\n\nif the key indicators of drug abuse of Thailand are independent from space.\nIf the indicators of drug abuse is indeed spatial dependent, then, you would like to detect where are the clusters and outliers, and the hotspots.\nLast but not least, you are also interested to investigate how the observation above evolve over time.\n\n\n\n\nThe specific tasks of this take-home exercise are as follows:\n\nUsing appropriate function of sf and tidyverse, preparing the following geospatial data layer:\n\na study area layer in sf polygon features. It must be at province level (including Bangkok) of Thailand.\na drug abuse indicators layer within the study area in sf polygon features.\n\nUsing the extracted data, perform global spatial autocorrelation analysis by using sfdep methods.\nUsing the extracted data, perform local spatial autocorrelation analysis by using sfdep methods.\nDescribe the spatial patterns revealed by the analysis above."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#objectives",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#objectives",
    "title": "Take-Home Exercise 2",
    "section": "",
    "text": "As a curious geospatial analytics green horn, you are interested to discover:\n\nif the key indicators of drug abuse of Thailand are independent from space.\nIf the indicators of drug abuse is indeed spatial dependent, then, you would like to detect where are the clusters and outliers, and the hotspots.\nLast but not least, you are also interested to investigate how the observation above evolve over time."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#the-task",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#the-task",
    "title": "Take-Home Exercise 2",
    "section": "",
    "text": "The specific tasks of this take-home exercise are as follows:\n\nUsing appropriate function of sf and tidyverse, preparing the following geospatial data layer:\n\na study area layer in sf polygon features. It must be at province level (including Bangkok) of Thailand.\na drug abuse indicators layer within the study area in sf polygon features.\n\nUsing the extracted data, perform global spatial autocorrelation analysis by using sfdep methods.\nUsing the extracted data, perform local spatial autocorrelation analysis by using sfdep methods.\nDescribe the spatial patterns revealed by the analysis above."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#spatial-autocorrelation",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#spatial-autocorrelation",
    "title": "Take-Home Exercise 2",
    "section": "2.1 Spatial Autocorrelation",
    "text": "2.1 Spatial Autocorrelation\nI tried to understand the concept of spatial autocorrelation, which is based on Tobler’s First Law of Geography: “Everything is related to everything else, but near things are more related than distant things” (Tobler, 1970). Spatial autocorrelation measures how much nearby spatial data points are similar or dissimilar to each other. It helps to analyze the extent of clustering or dispersion of spatial phenomena, offering insights into whether specific regions experience higher or lower-than-expected event concentrations. For example, in this context, spatial autocorrelation can reveal whether drug offenses in Thailand are clustered in particular provinces or dispersed across the country."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#emerging-hotspot-analysis",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#emerging-hotspot-analysis",
    "title": "Take-Home Exercise 2",
    "section": "2.2 Emerging Hotspot Analysis",
    "text": "2.2 Emerging Hotspot Analysis\nI tried to explore the concept of emerging hotspot analysis, which identifies areas with a higher concentration of events than expected in a random distribution. Initially rooted in point distribution studies, it’s particularly relevant for detecting trends and patterns over time. In the case of drug offenses in Thailand, this analysis can be used to track changes in the intensity of offenses, identify newly emerging hotspots, or monitor areas where offenses are consistently high. By identifying these hotspots, policymakers can better allocate resources to address issues in specific regions."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#visualizing-the-map-of-thailands-provinces",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#visualizing-the-map-of-thailands-provinces",
    "title": "Take-Home Exercise 2",
    "section": "4.1 Visualizing the Map of Thailand’s Provinces",
    "text": "4.1 Visualizing the Map of Thailand’s Provinces\nI tried to visualize the provinces of Thailand using the tmap package. The plot shows the boundaries of all provinces with simple white fills and black borders, creating a clean visualization.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(thai_geo) +\n  tm_fill(col = \"white\") +\n  tm_borders(col = \"black\", lwd = 0.3, alpha = 0.6) +\n  tm_layout(\n    main.title = \"Provinces of Thailand\",\n    main.title.size = 1,\n    main.title.position = \"center\",\n    legend.show = FALSE,\n    frame = FALSE\n  )"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#projecting-and-adding-geometric-attributes",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#projecting-and-adding-geometric-attributes",
    "title": "Take-Home Exercise 2",
    "section": "4.2 Projecting and Adding Geometric Attributes",
    "text": "4.2 Projecting and Adding Geometric Attributes\nI tried to reproject the geographic dataset into the UTM zone 47N CRS (EPSG: 32647) to make spatial calculations more accurate. I also added two new geometric attributes: Shape_Area (area of each province) and Shape_Length (perimeter).\n\nthai_geo_projected &lt;- st_transform(thai_geo, crs = 32647)\n\n\nthai_geo_projected &lt;- thai_geo_projected %&gt;%\n  mutate(\n    Shape_Area = st_area(geometry),\n    Shape_leng = st_length(st_cast(geometry, \"MULTILINESTRING\"))\n  )"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#exploring-the-data",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#exploring-the-data",
    "title": "Take-Home Exercise 2",
    "section": "5.1 Exploring the Data",
    "text": "5.1 Exploring the Data\nI tried to explore the unique fiscal years and offense types in the merged dataset:\n\nyears_list &lt;- merged_data %&gt;%\n  pull(fiscal_year) %&gt;%\n  unique() %&gt;%\n  sort()\n\nprint(years_list)\n\n[1] 2017 2018 2019 2020 2021 2022\n\n\n\noffense_types_list &lt;- merged_data %&gt;%\n  pull(types_of_drug_offenses) %&gt;%\n  unique() %&gt;%\n  sort()\n\nprint(offense_types_list)\n\n [1] \"conspiracy_cases\"                                      \n [2] \"drug_use_cases\"                                        \n [3] \"export_cases\"                                          \n [4] \"import_cases\"                                          \n [5] \"possession_cases\"                                      \n [6] \"possession_with_intent_to_distribute_cases\"            \n [7] \"production_cases\"                                      \n [8] \"suspects_in_conspiracy_cases\"                          \n [9] \"suspects_in_drug_use_cases\"                            \n[10] \"suspects_in_export_cases\"                              \n[11] \"suspects_in_import_cases\"                              \n[12] \"suspects_in_possession_cases\"                          \n[13] \"suspects_in_possession_with_intent_to_distribute_cases\"\n[14] \"suspects_in_production_cases\"                          \n[15] \"suspects_in_trafficking_cases\"                         \n[16] \"trafficking_cases\""
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#summarizing-and-visualizing-drug-offense-data",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#summarizing-and-visualizing-drug-offense-data",
    "title": "Take-Home Exercise 2",
    "section": "5.2 Summarizing and Visualizing Drug Offense Data",
    "text": "5.2 Summarizing and Visualizing Drug Offense Data\nI tried to summarize the number of cases for each type of drug offense between 2017-2022 and create a bar plot using ggplot2.\n\noffense_summary &lt;- merged_data %&gt;%\n  group_by(types_of_drug_offenses) %&gt;%\n  summarise(total_cases = sum(no_cases, na.rm = TRUE)) %&gt;%\n  arrange(desc(total_cases))\n\n# View the summary\nprint(offense_summary)\n\nSimple feature collection with 16 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 325178.8 ymin: 620860.6 xmax: 1213656 ymax: 2263241\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 16 × 3\n   types_of_drug_offenses                  total_cases                  geometry\n   &lt;chr&gt;                                         &lt;dbl&gt;        &lt;MULTIPOLYGON [m]&gt;\n 1 suspects_in_drug_use_cases                   930768 (((424359.7 827043.4, 42…\n 2 drug_use_cases                               915529 (((424359.7 827043.4, 42…\n 3 suspects_in_possession_cases                 566999 (((424359.7 827043.4, 42…\n 4 possession_cases                             538893 (((424359.7 827043.4, 42…\n 5 suspects_in_possession_with_intent_to_…      386946 (((424359.7 827043.4, 42…\n 6 possession_with_intent_to_distribute_c…      341283 (((424359.7 827043.4, 42…\n 7 suspects_in_trafficking_cases                 79997 (((424359.7 827043.4, 42…\n 8 trafficking_cases                             68379 (((424359.7 827043.4, 42…\n 9 suspects_in_production_cases                  66247 (((424359.7 827043.4, 42…\n10 production_cases                              56892 (((424359.7 827043.4, 42…\n11 suspects_in_conspiracy_cases                   2332 (((424359.7 827043.4, 42…\n12 suspects_in_import_cases                       1066 (((424359.7 827043.4, 42…\n13 conspiracy_cases                                920 (((424359.7 827043.4, 42…\n14 import_cases                                    860 (((424359.7 827043.4, 42…\n15 suspects_in_export_cases                        102 (((424359.7 827043.4, 42…\n16 export_cases                                     84 (((424359.7 827043.4, 42…\n\n\n\nggplot(offense_summary, aes(x = reorder(types_of_drug_offenses, total_cases), y = total_cases)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  coord_flip() +\n  labs(\n    x = \"Types of Drug Offenses\",\n    y = \"Total Cases (2017-2022)\",\n    title = \"Total Drug Offense Cases by Type in Thailand (2017-2022)\"\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#trends-for-top-drug-offenses",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#trends-for-top-drug-offenses",
    "title": "Take-Home Exercise 2",
    "section": "5.3 Trends for Top Drug Offenses",
    "text": "5.3 Trends for Top Drug Offenses\nI tried to identify the top two drug offense types and analyzed their trends over the years. This helps in identifying the offenses that need the most attention.\n\ntop_offenses &lt;- offense_summary %&gt;%\n  top_n(2, total_cases) %&gt;%\n  pull(types_of_drug_offenses)\n\nprint(top_offenses)\n\n[1] \"suspects_in_drug_use_cases\" \"drug_use_cases\"            \n\n\n\ntop_offenses_data &lt;- merged_data %&gt;%\n  filter(types_of_drug_offenses %in% top_offenses)\n\nyearly_offense_summary &lt;- top_offenses_data %&gt;%\n  group_by(fiscal_year, types_of_drug_offenses) %&gt;%\n  summarise(total_cases = sum(no_cases, na.rm = TRUE)) %&gt;%\n  ungroup()\n\n`summarise()` has grouped output by 'fiscal_year'. You can override using the\n`.groups` argument.\n\nggplot(yearly_offense_summary, aes(x = fiscal_year, y = total_cases, color = types_of_drug_offenses, group = types_of_drug_offenses)) +\n  geom_line(size = 1.2) +\n  geom_point(size = 3) +\n  labs(\n    x = \"Fiscal Year\",\n    y = \"Total Cases\",\n    title = \"Trends of Top 2 Drug Offenses in Thailand (2017-2022)\",\n    color = \"Offense Type\"\n  ) +\n  theme_minimal()\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#overview-of-top-drug-offenses-in-2021",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#overview-of-top-drug-offenses-in-2021",
    "title": "Take-Home Exercise 2",
    "section": "6.1 Overview of Top Drug Offenses in 2021",
    "text": "6.1 Overview of Top Drug Offenses in 2021\nI tried to analyze the trends in drug offenses for the year 2021, which marks a significant peak in the top two drug offenses throughout the 6-year period (2017-2022). From the graph, we can observe that 2021 witnessed the highest number of drug offense cases, particularly for drug use cases and suspects in drug use cases.\n\n6.1.1 Filtering Data for 2021\nTo focus on the year 2021, I filtered the dataset to extract the data related to drug use cases and suspects in drug use cases. This allows for a more detailed analysis of these two offense types for that year.\n\ndrug_use_cases_data &lt;- merged_data %&gt;%\n  filter(fiscal_year == \"2021\", types_of_drug_offenses == \"drug_use_cases\")\n\n\nsuspects_in_drug_use_cases_data &lt;- merged_data %&gt;%\n  filter(fiscal_year == \"2021\", types_of_drug_offenses == \"suspects_in_drug_use_cases\")\n\nrm(merged_data)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#visualizing-drug-use-cases-with-different-classification-styles",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#visualizing-drug-use-cases-with-different-classification-styles",
    "title": "Take-Home Exercise 2",
    "section": "6.2 Visualizing Drug Use Cases with Different Classification Styles",
    "text": "6.2 Visualizing Drug Use Cases with Different Classification Styles\nI tried to visualize the drug use cases offense type using two different classification styles: Equal Interval and Quantile classification. These styles offer different insights into how drug use cases are distributed across the provinces of Thailand.\n\nEqual Interval Classification divides the data range into equal-sized intervals, which can help highlight the absolute differences between provinces.\nQuantile Classification divides the data into quantiles, where each class contains an equal number of provinces, making it useful for identifying relative concentrations.\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nequal_drug &lt;- tm_shape(drug_use_cases_data) +\n  tm_fill(\"no_cases\", n = 5, style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal Interval Classification: drug use cases\")\n\nquantile_drug &lt;- tm_shape(drug_use_cases_data) +\n  tm_fill(\"no_cases\", n = 5, style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Quantile Classification: drug use cases\")\n\nprint(tmap_arrange(equal_drug, quantile_drug, asp = 1, ncol = 2))\n\n\n\n\n\n\n\n\n\n6.2.1 Visualizing Suspects in Drug Use Cases\nSimilarly, I tried to visualize the distribution of suspects in drug use cases using both Equal Interval and Quantile Classification. This comparison allows for a better understanding of how the distribution of suspects differs from the actual drug use cases across provinces.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nequal_suspects &lt;- tm_shape(suspects_in_drug_use_cases_data) +\n  tm_fill(\"no_cases\", n = 5, style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal Interval Classification: suspects in drug use cases\")\n\nquantile_suspects &lt;- tm_shape(suspects_in_drug_use_cases_data) +\n  tm_fill(\"no_cases\", n = 5, style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Quantile Classification: suspects in drug use cases\")\n\nprint(tmap_arrange(equal_suspects, quantile_suspects, asp = 1, ncol = 2))"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#global-morans-i-test",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#global-morans-i-test",
    "title": "Take-Home Exercise 2",
    "section": "7.1 Global Moran’s I Test",
    "text": "7.1 Global Moran’s I Test\nI tried to perform the Global Moran’s I test, which is a measure of global spatial autocorrelation. It evaluates whether the spatial distribution of drug use cases and suspects in drug use cases shows a pattern that is significantly clustered or dispersed compared to a random distribution.\n\n7.1.1 Global Moran’s I for Drug Use Cases\nFirst, I calculated the Global Moran’s I statistic for drug use cases in 2021 using the contiguity-based neighbors and weights previously computed. This statistic helps to identify the level of spatial autocorrelation for drug use cases across Thai provinces.\n\nmoran_drug_use_result &lt;- global_moran(\n  drug_use_cases_data$no_cases,\n  neighbors_drug_use,\n  weights_drug_use\n)\n\nprint(moran_drug_use_result)\n\n$I\n[1] 0.1501002\n\n$K\n[1] 4.710498\n\n\nNext, I conducted a Moran’s I significance test to evaluate whether the observed spatial autocorrelation is statistically significant.\n\nglobal_moran_test(\n  drug_use_cases_data$no_cases,\n  neighbors_drug_use,\n  weights_drug_use,\n  zero.policy = TRUE,\n  na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 2.5631, p-value = 0.005187\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.150100162      -0.013157895       0.004057091 \n\n\n\n\n7.1.2 Global Moran’s I for Suspects in Drug Use Cases\nSimilarly, I calculated the Global Moran’s I for suspects in drug use cases to assess whether there is a similar pattern of spatial clustering.\n\nmoran_suspect_result &lt;- global_moran(\n  suspects_in_drug_use_cases_data$no_cases,\n  neighbors_suspect,\n  weights_suspect\n)\n\nprint(moran_suspect_result)\n\n$I\n[1] 0.1495297\n\n$K\n[1] 4.669362\n\n\nI also performed a significance test for Moran’s I on the suspects dataset:\n\nglobal_moran_test(\n  suspects_in_drug_use_cases_data$no_cases,\n  neighbors_suspect,\n  weights_suspect,\n  zero.policy = TRUE,\n  na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 2.5534, p-value = 0.005334\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.149529690      -0.013157895       0.004059449"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#performing-global-morans-i-permutation-test",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#performing-global-morans-i-permutation-test",
    "title": "Take-Home Exercise 2",
    "section": "7.2 Performing Global Moran’s I Permutation Test",
    "text": "7.2 Performing Global Moran’s I Permutation Test\nTo further assess the significance of Moran’s I statistic, I tried to perform a permutation test with 999 simulations. This test creates a distribution of Moran’s I values under the assumption of spatial randomness, and then compares the observed value to this distribution.\n\n7.2.1 Permutation Test for Drug Use Cases\n\nset.seed(1234)\ngmoran_drug_use &lt;- global_moran_perm(\n  drug_use_cases_data$no_cases,\n  neighbors_drug_use,\n  weights_drug_use,\n  nsim = 999)\ngmoran_drug_use\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.1501, observed rank = 987, p-value = 0.026\nalternative hypothesis: two.sided\n\n\nThe histogram below visualizes the distribution of the permuted Moran’s I statistics, with the observed value marked in red:\n\nhist(gmoran_drug_use$res, main=\"Histogram of Global Moran's I Monte-Carlo Simulation Results (Drug Use Cases)\", xlab=\"Monte-Carlo Results\", ylab=\"Frequency\")\n\nabline(v = gmoran_drug_use$statistic, col = \"red\")\n\n\n\n\n\n\n\n\nIn the Global Moran’s I Monte Carlo Simulation results depicted in the histogram, I can see the distribution of simulated Moran’s I values under the null hypothesis of no spatial autocorrelation. The observed Moran’s I value is marked by the red vertical line. From the plot, it is clear that the observed Moran’s I value (around 0.15) is positioned to the right of the bulk of the simulated values, which center around 0. This indicates that the observed value is significantly higher than most of the random simulations, further supporting the presence of positive spatial autocorrelation in the data. The shape of the histogram shows the range of possible Moran’s I values under the assumption of spatial randomness, and the positioning of the observed value outside this range confirms the statistical significance of the spatial clustering observed in the previous test. This visual representation reinforces the conclusion that the spatial patterns in the data are not random but exhibit significant spatial dependence.\n\n\n7.2.2 Permutation Test for Suspects in Drug Use Cases\nThe same permutation test was performed for suspects in drug use cases:\n\nset.seed(1234)\ngmoran_suspect &lt;- global_moran_perm(\n  suspects_in_drug_use_cases_data$no_cases,\n  neighbors_suspect,\n  weights_suspect,\n  nsim = 999)\ngmoran_suspect\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.14953, observed rank = 987, p-value = 0.026\nalternative hypothesis: two.sided\n\n\nThe histogram of results, with the observed Moran’s I statistic marked, helps assess the significance of spatial clustering:\n\nhist(gmoran_suspect$res, main=\"Histogram of Global Moran's I Monte-Carlo Simulation Results (Suspects in Drug Use Cases)\", xlab=\"Monte-Carlo Results\", ylab=\"Frequency\")\n\nabline(v = gmoran_suspect$statistic, col = \"red\")\n\n\n\n\n\n\n\n\nIn this updated Global Moran’s I Monte Carlo Simulation result, I observed a histogram displaying the distribution of simulated Moran’s I values under the assumption of spatial randomness. The red vertical line represents the observed Moran’s I statistic, which appears around 0.15 and is noticeably positioned to the right of the majority of the simulated Moran’s I values, which cluster around 0. This demonstrates that the observed Moran’s I is significantly greater than the random expectations, reinforcing the presence of positive spatial autocorrelation in the data. The fact that the observed value lies far outside the bulk of the Monte Carlo results supports the earlier finding that the spatial pattern in the data is not due to chance, but rather, exhibits a statistically significant spatial clustering."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#global-gearys-c-test",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#global-gearys-c-test",
    "title": "Take-Home Exercise 2",
    "section": "7.3 Global Geary’s C Test",
    "text": "7.3 Global Geary’s C Test\nI tried to perform the Global Geary’s C test, another global measure of spatial autocorrelation. Unlike Moran’s I, which focuses on global spatial patterns, Geary’s C is more sensitive to local differences. It can highlight differences between individual provinces and their neighbors in terms of drug offense counts.\n\n7.3.1 Global Geary’s C for Drug Use Cases\n\nglobal_c_test(\n  drug_use_cases_data$no_cases,\n  neighbors_drug_use,\n  weights_drug_use)\n\n\n    Geary C test under randomisation\n\ndata:  x \nweights: listw   \n\nGeary C statistic standard deviate = 1.5296, p-value = 0.06306\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n       0.88246518        1.00000000        0.00590431 \n\n\n\n\n7.3.2 Global Geary’s C for Suspects in Drug Use Cases\n\nglobal_c_test(\n  suspects_in_drug_use_cases_data$no_cases,\n  neighbors_suspect,\n  weights_suspect)\n\n\n    Geary C test under randomisation\n\ndata:  x \nweights: listw   \n\nGeary C statistic standard deviate = 1.5088, p-value = 0.06568\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n      0.884258244       1.000000000       0.005884967"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#performing-global-gearys-c-permutation-test",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#performing-global-gearys-c-permutation-test",
    "title": "Take-Home Exercise 2",
    "section": "7.4 Performing Global Geary’s C Permutation Test",
    "text": "7.4 Performing Global Geary’s C Permutation Test\nSimilar to Moran’s I, I also tried to conduct a permutation test for Global Geary’s C. This Monte Carlo simulation helps assess the significance of the observed Geary’s C statistic under the assumption of spatial randomness.\n\n7.4.1 Permutation Test for Drug Use Cases\n\nset.seed(1234)\nbperm_drug_use &lt;- global_c_perm(\n  drug_use_cases_data$no_cases,\n  neighbors_drug_use,\n  weights_drug_use,\n  nsim = 999)\nbperm_drug_use\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.88247, observed rank = 67, p-value = 0.067\nalternative hypothesis: greater\n\n\nThe histogram of the permuted results shows how the observed statistic compares to the simulated ones:\n\nhist(bperm_drug_use$res, main=\"Histogram of Global Geary's C Monte-Carlo Simulation Results (Drug Use cases)\", xlab=\"Monte-Carlo Results\", ylab=\"Frequency\")\n\nabline(v = bperm_drug_use$statistic, col = \"red\")\n\n\n\n\n\n\n\n\nIn the Global Geary’s C Monte Carlo Simulation result shown in the histogram, I observed the distribution of simulated Geary’s C values under the null hypothesis of spatial randomness. The red vertical line marks the observed Geary’s C statistic, which is around 0.9, while most of the simulated values are centered around 1.0.\nGeary’s C values typically range from 0 to 2:\n\nC &lt; 1 indicates positive spatial autocorrelation (i.e., nearby regions are similar).\nC &gt; 1 suggests negative spatial autocorrelation (i.e., nearby regions are dissimilar).\n\nSince the observed Geary’s C value is less than 1.0, it suggests positive spatial autocorrelation, meaning that regions close to each other tend to have similar values. Additionally, the position of the observed Geary’s C value outside the main bulk of the simulated distribution confirms that this spatial autocorrelation is statistically significant. Thus, there is evidence of clustering in the data, with similar values tending to be geographically close to one another.\n\n\n7.4.2 Permutation Test for Suspects in Drug Use Cases\n\nset.seed(1234)\nbperm_suspect &lt;- global_c_perm(\n  suspects_in_drug_use_cases_data$no_cases,\n  neighbors_suspect,\n  weights_suspect,\n  nsim = 999)\nbperm_suspect\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.88426, observed rank = 73, p-value = 0.073\nalternative hypothesis: greater\n\n\n\nhist(bperm_suspect$res, main=\"Histogram of Global Geary's C Monte-Carlo Simulation Results (Suspects in Drug Use cases)\", xlab=\"Monte-Carlo Results\", ylab=\"Frequency\")\n\nabline(v = bperm_suspect$statistic, col = \"red\")\n\n\n\n\n\n\n\n\nIn this Global Geary’s C Monte Carlo Simulation result, I observed the distribution of simulated Geary’s C values, with the red vertical line representing the observed Geary’s C statistic, which is approximately 0.9. The bulk of the simulated values are centered around 1.0, which is the expected value under the assumption of no spatial autocorrelation.\n\nA Geary’s C value less than 1 (like the observed 0.9) suggests positive spatial autocorrelation, meaning nearby regions have similar values.\nThe fact that the observed value lies outside the majority of the simulated results indicates that the spatial clustering of similar values is statistically significant and unlikely to have occurred by chance.\n\nThus, the data exhibit significant spatial autocorrelation, where regions close to each other are more likely to have similar values, supporting the hypothesis of spatial dependence in the dataset.\nContinue to Page 2"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#calculating-local-morans-i-for-drug-use-cases",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#calculating-local-morans-i-for-drug-use-cases",
    "title": "Take-Home Exercise 2",
    "section": "8.1 Calculating Local Moran’s I for Drug Use Cases",
    "text": "8.1 Calculating Local Moran’s I for Drug Use Cases\nI calculated Local Moran’s I for drug use cases in 2021. By using 99 permutations, I can assess the significance of local spatial autocorrelation and detect areas where drug use cases cluster more than expected under randomness.\n\nlisa_drug_use &lt;- drug_use_cases_data %&gt;% \n  mutate(local_moran = local_moran(\n    no_cases,\n    neighbors_drug_use,\n    weights_drug_use, \n    nsim = 99),\n    .before = 1) %&gt;%\n  unnest(local_moran)\nlisa_drug_use\n\nSimple feature collection with 77 features and 19 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 325178.8 ymin: 620860.6 xmax: 1213656 ymax: 2263241\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 77 × 20\n         ii       eii  var_ii    z_ii   p_ii p_ii_sim p_folded_sim skewness\n      &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -1.34     0.0365   1.64    -1.07   0.283      0.32         0.16   0.421 \n 2 -0.120   -0.00370  0.00852 -1.26   0.208      0.32         0.16  -0.850 \n 3 -0.00179  0.000383 0.00138 -0.0584 0.953      0.96         0.48   0.640 \n 4 -0.194   -0.0276   0.0500  -0.742  0.458      0.52         0.26  -0.306 \n 5 -0.0593  -0.0141   0.0368  -0.236  0.814      0.8          0.4   -0.0699\n 6  0.693   -0.0399   0.208    1.61   0.108      0.04         0.02  -0.870 \n 7  0.365    0.00597  0.0391   1.82   0.0694     0.02         0.01  -0.708 \n 8  0.695    0.00623  0.200    1.54   0.123      0.08         0.04  -0.611 \n 9  0.805   -0.0322   0.238    1.71   0.0866     0.02         0.01  -0.556 \n10  0.412    0.0154   0.102    1.24   0.215      0.2          0.1   -0.620 \n# ℹ 67 more rows\n# ℹ 12 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   ADM1_EN &lt;chr&gt;, ADM1_PCODE &lt;chr&gt;, Shape_leng [m], Shape_Area [m^2],\n#   fiscal_year &lt;dbl&gt;, types_of_drug_offenses &lt;chr&gt;, no_cases &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [m]&gt;"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#calculating-local-morans-i-for-suspects-in-drug-use-cases",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#calculating-local-morans-i-for-suspects-in-drug-use-cases",
    "title": "Take-Home Exercise 2",
    "section": "8.2 Calculating Local Moran’s I for Suspects in Drug Use Cases",
    "text": "8.2 Calculating Local Moran’s I for Suspects in Drug Use Cases\nSimilarly, I calculated Local Moran’s I for suspects in drug use cases using the same method as for drug use cases.\n\nlisa_suspect &lt;- suspects_in_drug_use_cases_data %&gt;% \n  mutate(local_moran = local_moran(\n    no_cases,\n    neighbors_suspect,\n    weights_suspect, \n    nsim = 99),\n    .before = 1) %&gt;%\n  unnest(local_moran)\nlisa_suspect\n\nSimple feature collection with 77 features and 19 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 325178.8 ymin: 620860.6 xmax: 1213656 ymax: 2263241\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 77 × 20\n         ii      eii   var_ii   z_ii   p_ii p_ii_sim p_folded_sim skewness\n      &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -1.36    -0.0625  1.20     -1.19  0.236      0.18         0.09    0.712\n 2 -0.125   -0.00321 0.00761  -1.40  0.163      0.18         0.09   -0.198\n 3 -0.00160  0.00423 0.000790 -0.207 0.836      0.9          0.45    0.520\n 4 -0.192   -0.0284  0.0523   -0.717 0.474      0.46         0.23   -0.507\n 5 -0.0566  -0.0288  0.0507   -0.124 0.902      0.84         0.42   -0.597\n 6  0.705   -0.0234  0.205     1.61  0.108      0.02         0.01   -0.880\n 7  0.377   -0.0193  0.0506    1.76  0.0780     0.02         0.01   -0.590\n 8  0.707   -0.00496 0.180     1.68  0.0930     0.02         0.01   -0.298\n 9  0.815   -0.0391  0.128     2.38  0.0171     0.02         0.01   -0.324\n10  0.420    0.0172  0.119     1.17  0.242      0.22         0.11   -0.764\n# ℹ 67 more rows\n# ℹ 12 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   ADM1_EN &lt;chr&gt;, ADM1_PCODE &lt;chr&gt;, Shape_leng [m], Shape_Area [m^2],\n#   fiscal_year &lt;dbl&gt;, types_of_drug_offenses &lt;chr&gt;, no_cases &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [m]&gt;"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#visualizing-local-morans-i-results",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#visualizing-local-morans-i-results",
    "title": "Take-Home Exercise 2",
    "section": "8.3 Visualizing Local Moran’s I Results",
    "text": "8.3 Visualizing Local Moran’s I Results\nI tried to visualize the Local Moran’s I values for both drug use cases and suspects in drug use cases. This visualization helps to understand the spatial clustering and identify potential hotspots or coldspots.\n\n8.3.1 Visualizing Local Moran’s I for Drug Use Cases\nThe following map shows the Local Moran’s I values for drug use cases, highlighting areas of high or low spatial autocorrelation. Provinces with significant spatial clusters or outliers are emphasized using a color palette ranging from blue (low) to red (high).\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(lisa_drug_use) +\n  tm_fill(\n    \"ii\", \n    palette = c(\"#b7dce9\", \"#e1ecbb\", \"#f5f3a6\", \"#f8d887\", \"#ec9a64\", \"#d21b1c\"), \n    title = \"Local Moran's I\",\n    midpoint = NA,\n    legend.hist = TRUE,\n    legend.is.portrait = TRUE,\n    legend.hist.z = 0.1\n  ) +\n  tm_borders(col = \"black\", alpha = 0.6) +\n  tm_layout(\n    main.title = \"Spatial Autocorrelation of Drug Use Cases (Local Moran's I)\",\n    main.title.position = \"center\",\n    main.title.size = 1.7,\n    main.title.fontface = \"bold\",\n    legend.title.size = 1.8,\n    legend.text.size = 1.3,\n    frame = TRUE\n  ) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(\n    type = \"8star\", text.size = 1.5, size = 3, position = c(\"RIGHT\", \"TOP\")\n  ) +\n  tm_scale_bar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 1.2) +\n  tm_grid(labels.size = 1, alpha = 0.2)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\nLegend labels were too wide. The labels have been resized to 0.43, 0.43, 0.46, 0.50, 0.50, 0.50. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n\n\n\n\n\n\n\n\n\nIn the map showing Local Moran’s I results for drug use cases across Thailand, regions are color-coded to represent spatial clusters of similar values. The color gradient ranges from blue (indicating regions with lower values of Local Moran’s I) to red (indicating regions with higher positive spatial autocorrelation). This implies that:\n\nRed areas (in the northeast and parts of the southeast) represent hotspots, where regions have high values of drug use and are surrounded by neighbors with similarly high values.\nYellow and light orange areas represent regions with lower clustering or random patterns of drug use, indicating a more neutral or less significant spatial autocorrelation.\nBlue areas in the southern part of Thailand indicate coldspots, where regions with low drug use are surrounded by neighbors with similarly low values.\n\nThe north-south divide in spatial autocorrelation is apparent, with more clustering of high drug use in the northern and northeastern regions and lower clustering in the southern regions. This map highlights where spatial patterns of drug use are concentrated, which could inform targeted interventions or policies.\n4o\n\n\n8.3.2 Visualizing Local Moran’s I for Suspects in Drug Use Cases\nSimilarly, the map below visualizes the spatial autocorrelation of suspects in drug use cases.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(lisa_suspect) +\n  tm_fill(\n    \"ii\", \n    palette = c(\"#b7dce9\", \"#e1ecbb\", \"#f5f3a6\", \"#f8d887\", \"#ec9a64\", \"#d21b1c\"), \n    title = \"Local Moran's I\",\n    midpoint = NA,\n    legend.hist = TRUE,\n    legend.is.portrait = TRUE,\n    legend.hist.z = 0.1\n  ) +\n  tm_borders(col = \"black\", alpha = 0.6) +\n  tm_layout(\n    main.title = \"Spatial Autocorrelation of Suspects in Drug Use Cases (Local Moran's I)\",\n    main.title.position = \"center\",\n    main.title.size = 1.7,\n    main.title.fontface = \"bold\",\n    legend.title.size = 1.8,\n    legend.text.size = 1.3,\n    frame = TRUE\n  ) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(\n    type = \"8star\", text.size = 1.5, size = 3, position = c(\"RIGHT\", \"TOP\")\n  ) +\n  tm_scale_bar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 1.2) +\n  tm_grid(labels.size = 1, alpha = 0.2)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\nLegend labels were too wide. The labels have been resized to 0.43, 0.43, 0.46, 0.50, 0.50, 0.50. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n\n\n\n\n\n\n\n\n\nIn the map showing Local Moran’s I results for suspects in drug use cases across Thailand, regions are again color-coded to reflect spatial clustering. The color gradient ranges from blue (indicating negative spatial autocorrelation or coldspots) to red (indicating positive spatial autocorrelation or hotspots):\n\nRed regions (notably in the northeast and parts of the east) indicate hotspots, where provinces have a high number of suspects in drug use cases, and their neighboring provinces also exhibit similarly high values. These areas show significant clustering of higher numbers of suspects.\nOrange and yellow regions indicate areas where there is less significant spatial clustering, suggesting more random spatial patterns of drug-related arrests or fewer suspects overall.\nBlue regions represent coldspots, likely in the southern part of Thailand, where the number of suspects is low, and nearby provinces also have low numbers of suspects.\n\nThis map highlights where the highest concentrations of drug use suspects are located, particularly in the northern and northeastern provinces. These clusters could suggest areas that require more focused law enforcement or intervention efforts to manage drug-related issues. The spatial distribution provides valuable insights for resource allocation and policy-making in combating drug use."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#visualizing-the-statistical-significance-of-local-morans-i-p-values",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#visualizing-the-statistical-significance-of-local-morans-i-p-values",
    "title": "Take-Home Exercise 2",
    "section": "8.4 Visualizing the Statistical Significance of Local Moran’s I p-values",
    "text": "8.4 Visualizing the Statistical Significance of Local Moran’s I p-values\nIn addition to visualizing the Local Moran’s I values, I also tried to map the p-values for the drug use cases and suspects in drug use cases. This helps identify areas where the spatial autocorrelation is statistically significant, providing more context on how likely it is that observed clustering occurred by chance.\n\n8.4.1 p-value Visualization for Drug Use Cases\nThe map below visualizes the statistical significance of Local Moran’s I for drug use cases, where lower p-values indicate more significant clustering.\n\ntm_shape(lisa_drug_use) +\n  tm_fill(\n    \"p_ii_sim\", \n    palette = c(\"#b7dce9\", \"#c9e3d2\", \"#f5f3a6\", \"#ec9a64\", \"#d21b1c\"), \n    title = \"p-value\",\n    midpoint = NA,\n    legend.hist = TRUE, \n    legend.is.portrait = TRUE,\n    legend.hist.z = 0.1\n  ) +\n  tm_borders(col = \"black\", alpha = 0.6) +\n  tm_layout(\n    main.title = \"Statistical Significance of Spatial Autocorrelation\\nof Drug Use Cases\",\n    main.title.position = \"center\",\n    main.title.size = 1.7,\n    main.title.fontface = \"bold\",\n    legend.title.size = 1.8,\n    legend.text.size = 1.3,\n    frame = TRUE\n  ) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"8star\", text.size = 1.5, size = 3, position = c(\"RIGHT\", \"TOP\")) +\n  tm_scale_bar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 1.2) +\n  tm_grid(labels.size = 1, alpha = 0.2)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\nLegend labels were too wide. The labels have been resized to 0.38, 0.38, 0.38, 0.38, 0.38. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n\n\n\n\n\n\n\n\n\nIn this map, representing the p-values for the Local Moran’s I test on suspects in drug use cases, the regions are color-coded based on the statistical significance of their spatial autocorrelation. The p-value indicates the likelihood that the observed spatial pattern is due to random chance, with lower values signifying greater statistical significance:\n\nRed areas indicate regions where the p-value is very low (close to zero), suggesting that the spatial clustering of suspects is statistically significant and not due to chance. These regions are likely hotspots with a high number of suspects in close proximity to other high-suspect areas.\nBlue areas represent higher p-values (closer to 1), indicating regions where the spatial pattern is less statistically significant or random, meaning no strong spatial clustering of suspects.\nYellow and light orange regions fall somewhere in between, showing moderate significance.\n\nThis map helps to identify areas where the spatial clustering of suspects in drug use cases is most statistically significant, especially in the northern and central provinces. These regions may require more attention for addressing drug-related issues, as the spatial patterns are unlikely to be random.\n\n\n8.4.2 p-value Visualization for Suspects in Drug Use Cases\nA similar map shows the statistical significance for the suspects in drug use cases:\n\ntm_shape(lisa_suspect) +\n  tm_fill(\n    \"p_ii_sim\", \n    palette = c(\"#b7dce9\", \"#c9e3d2\", \"#f5f3a6\", \"#ec9a64\", \"#d21b1c\"), \n    title = \"p-value\",\n    midpoint = NA,\n    legend.hist = TRUE, \n    legend.is.portrait = TRUE,\n    legend.hist.z = 0.1\n  ) +\n  tm_borders(col = \"black\", alpha = 0.6) +\n  tm_layout(\n    main.title = \"Statistical Significance of Spatial Autocorrelation\\nof Suspects in Drug Use Cases\",\n    main.title.position = \"center\",\n    main.title.size = 1.7,\n    main.title.fontface = \"bold\",\n    legend.title.size = 1.8,\n    legend.text.size = 1.3,\n    frame = TRUE\n  ) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"8star\", text.size = 1.5, size = 3, position = c(\"RIGHT\", \"TOP\")) +\n  tm_scale_bar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 1.2) +\n  tm_grid(labels.size = 1, alpha = 0.2)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\nLegend labels were too wide. The labels have been resized to 0.38, 0.38, 0.38, 0.38, 0.38. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n\n\n\n\n\n\n\n\n\nIn this map, depicting p-values for the Local Moran’s I test on suspects in drug use cases, the regions are color-coded to show the statistical significance of spatial autocorrelation. The colors correspond to the p-value ranges, indicating where clustering is more or less likely to be due to random chance:\n\nRed regions represent areas with very low p-values (closer to 0), indicating that these regions have statistically significant clustering of suspects in drug use cases. These areas are identified as hotspots where high numbers of suspects are found near other high-suspect regions.\nBlue regions correspond to high p-values, suggesting that any clustering in these areas is likely due to random chance, with no significant spatial autocorrelation.\nYellow and orange regions indicate moderate p-values, meaning that clustering in these areas is somewhat significant, though not as strong as in the red areas.\n\nThis map emphasizes where the clustering of suspects is statistically meaningful, particularly in the northern and northeastern regions, signaling potential areas of concern that may require focused law enforcement or policy interventions to manage drug-related activities. The blue areas, indicating no significant clustering, might need less immediate attention."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#visualising-statistically-significant-local-spatial-autocorrelation",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#visualising-statistically-significant-local-spatial-autocorrelation",
    "title": "Take-Home Exercise 2",
    "section": "8.5 Visualising Statistically Significant Local Spatial Autocorrelation",
    "text": "8.5 Visualising Statistically Significant Local Spatial Autocorrelation\nIn this section, I tried to filter and visualize only the statistically significant spatial clusters (p &lt; 0.05) from the Local Moran’s I analysis for both drug use cases and suspects in drug use cases. This provides a more focused view of the provinces where significant clustering occurs, allowing us to pinpoint areas of interest.\n\n8.5.1 Statistically Significant Spatial Autocorrelation of Drug Use Cases\nFirst, I filtered the lisa_drug_use data to include only those provinces where the p-value of Local Moran’s I is less than 0.05, indicating significant local spatial autocorrelation. The map highlights these provinces and provides insight into the spatial patterns for drug use cases.\n\nlisa_sig_drug_use &lt;- lisa_drug_use %&gt;%\n  filter(p_ii_sim &lt; 0.05) %&gt;%\n  mutate(label = paste(ADM1_EN))\n\ntm_shape(lisa_drug_use) +\n  tm_polygons() +\n  tm_borders(col = \"black\", alpha = 0.6) +\ntm_shape(lisa_sig_drug_use) +\n  tm_fill(\"ii\", \n          palette = c(\"#b7dce9\", \"#e1ecbb\", \"#f5f3a6\", \"#f8d887\", \"#ec9a64\", \"#d21b1c\"),\n          title = \"Local Moran's I (p &lt; 0.05)\",\n          midpoint = NA,\n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_borders(col = \"black\", alpha = 0.6) +\n  tm_layout(main.title = \"Statistically Significant Spatial Autocorrelation of Drug Use Cases\",\n            main.title.position = \"center\",\n            main.title.size = 1.7,\n            main.title.fontface = \"bold\",\n            legend.title.size = 1.8,\n            legend.text.size = 1.3,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"8star\", text.size = 1.5, size = 3, position = c(\"RIGHT\", \"TOP\")) +\n  tm_scale_bar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 1.2) +\n  tm_grid(labels.size = 1, alpha = 0.2)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\nLegend labels were too wide. The labels have been resized to 0.45, 0.45, 0.48, 0.52, 0.52, 0.52, 0.52, 0.52. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n\n\n\n\n\n\n\n\n\n\n\n8.5.2 Statistically Significant Spatial Autocorrelation of Suspects in Drug Use Cases\nSimilarly, I filtered the lisa_suspect data to include only the statistically significant provinces for suspects in drug use cases and mapped these areas.\n\nlisa_sig_suspect &lt;- lisa_suspect %&gt;%\n  filter(p_ii_sim &lt; 0.05) %&gt;%\n  mutate(label = paste(ADM1_EN))\n\ntm_shape(lisa_suspect) +\n  tm_polygons() +\n  tm_borders(col = \"black\", alpha = 0.6) +\ntm_shape(lisa_sig_suspect) +\n  tm_fill(\"ii\", \n          palette = c(\"#b7dce9\", \"#e1ecbb\", \"#f5f3a6\", \"#f8d887\", \"#ec9a64\", \"#d21b1c\"),\n          title = \"Local Moran's I (p &lt; 0.05)\",\n          midpoint = NA,\n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_borders(col = \"black\", alpha = 0.6) +\n  tm_layout(main.title = \"Statistically Significant Spatial Autocorrelation of Suspects in Drug Use Cases\",\n            main.title.position = \"center\",\n            main.title.size = 1.7,\n            main.title.fontface = \"bold\",\n            legend.title.size = 1.8,\n            legend.text.size = 1.3,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"8star\", text.size = 1.5, size = 3, position = c(\"RIGHT\", \"TOP\")) +\n  tm_scale_bar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 1.2) +\n  tm_grid(labels.size = 1, alpha = 0.2)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\nLegend labels were too wide. The labels have been resized to 0.5, 0.5, 0.5, 0.5, 0.5, 0.5. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#lisa-classification",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#lisa-classification",
    "title": "Take-Home Exercise 2",
    "section": "8.6 LISA Classification",
    "text": "8.6 LISA Classification\nI tried to classify the spatial autocorrelation patterns using Local Indicators of Spatial Association (LISA). This classification helps identify specific areas that show significant spatial relationships, including high-high (hotspots), low-low (coldspots), high-low, or low-high outlier patterns. These categories highlight areas where the spatial clustering of drug use cases or suspects in drug use cases is statistically significant.\n\n8.6.1 Visualising LISA Classification for Drug Use Cases\nThe LISA map classifies provinces based on their spatial autocorrelation categories. It uses different color codes to represent high-high (areas with high values surrounded by high values), low-low (areas with low values surrounded by low values), high-low, and low-high spatial relationships. This classification provides a clearer view of the spatial structure of drug use cases across provinces.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nstudy_area_lisa_drug_use &lt;- tm_shape(lisa_drug_use) +\n  tm_polygons() +\n  tm_borders(col = \"black\", alpha = 0.6) +\ntm_shape(lisa_sig_drug_use) +\n  tm_fill(\"mean\", \n          palette = c(\"#b7dce9\", \"#ec9a64\", \"#e1ecbb\", \"#d21b1c\"),\n          title = \"LISA class\",\n          midpoint = NA,\n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_borders(col = \"black\", alpha = 0.6) +\n  tm_layout(main.title = \"Village-Level LISA Map of Drug Use Cases\",\n            main.title.position = \"center\",\n            main.title.size = 1.7,\n            main.title.fontface = \"bold\",\n            legend.outside = TRUE,\n            legend.outside.position = \"right\",\n            legend.title.size = 1.8,\n            legend.text.size = 1.3,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"8star\", text.size = 1.5, size = 2, position = c(\"RIGHT\", \"TOP\")) +\n  tm_scale_bar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 1.2) +\n  tm_grid(labels.size = 1, alpha = 0.2)\n\nstudy_area_lisa_drug_use\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\n\n\n\nI also provided an interactive view of the LISA classification for better exploration of the data:\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\ntm_shape(lisa_drug_use) +\n  tm_polygons(id = \"label\") +\n  tm_borders(col = \"black\", alpha = 0.6) +\ntm_shape(lisa_sig_drug_use) +\n  tm_fill(\n    \"mean\", \n    palette = c(\"#b7dce9\", \"#ec9a64\", \"#e1ecbb\", \"#d21b1c\"),\n    title = \"LISA class\",\n    midpoint = NA,\n    id = \"label\"\n  ) +\n  tm_borders(col = \"black\", alpha = 0.6)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\nKey Observations from the Drug Use Cases LISA Map\nFrom the LISA classification map, I observed that several provinces showed a low-low pattern, meaning these provinces have low drug use cases and are surrounded by other provinces with similarly low values. The following provinces fall under the low-low category:\n\nTak\nKamphaeng Phet\nNakhon Sawan\nUthai Thani\nChai Nat\nLop Buri\nSing Buri\nSuphan Buri\nKanchanaburi\nRatchaburi\nPhetchaburi\nPrachuap Khiri Khan\n\nThese areas can be considered coldspots for drug use cases.\n\n\n8.6.2 Visualising LISA Classification for Suspects in Drug Use Cases\nA similar LISA classification was conducted for the suspects in drug use cases dataset. This map provides a clearer understanding of where clustering or outlier patterns exist for suspects involved in drug use.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nstudy_area_lisa_suspect &lt;- tm_shape(lisa_suspect) +\n  tm_polygons() +\n  tm_borders(col = \"black\", alpha = 0.6) +\ntm_shape(lisa_sig_suspect) +\n  tm_fill(\"mean\", \n          palette = c(\"#b7dce9\", \"#ec9a64\", \"#e1ecbb\", \"#d21b1c\"),\n          title = \"LISA class\",\n          midpoint = NA,\n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_borders(col = \"black\", alpha = 0.6) +\n  tm_layout(main.title = \"Village-Level LISA Map of Suspects in Drug Use Cases\",\n            main.title.position = \"center\",\n            main.title.size = 1.7,\n            main.title.fontface = \"bold\",\n            legend.outside = TRUE,\n            legend.outside.position = \"right\",\n            legend.title.size = 1.8,\n            legend.text.size = 1.3,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"8star\", text.size = 1.5, size = 2, position = c(\"RIGHT\", \"TOP\")) +\n  tm_scale_bar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 1.2) +\n  tm_grid(labels.size = 1, alpha = 0.2)\n\nstudy_area_lisa_suspect\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\n\n\n\nI also provided an interactive view for the suspects data:\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\ntm_shape(lisa_suspect) +\n  tm_polygons(id = \"label\") +\n  tm_borders(col = \"black\", alpha = 0.6) +\ntm_shape(lisa_sig_suspect) +\n  tm_fill(\n    \"mean\", \n    palette = c(\"#b7dce9\", \"#ec9a64\", \"#e1ecbb\", \"#d21b1c\"),\n    title = \"LISA class\",\n    midpoint = NA,\n    id = \"label\"\n  ) +\n  tm_borders(col = \"black\", alpha = 0.6)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\nKey Observations from the Suspects in Drug Use Cases LISA Map\nFor the suspects dataset, the following patterns were observed:\n\nLow-Low Clusters: Provinces such as Kamphaeng Phet, Nakhon Sawan, Uthai Thani, Chai Nat, Lop Buri, Sing Buri, Suphan Buri, Kanchanaburi, Ratchaburi, Phetchaburi, and Prachuap Khiri Khan exhibited low values for suspects in drug use cases and were surrounded by other provinces with similarly low values.\nLow-High Outlier: The province of Krabi displayed a low-high pattern, meaning that it has low values for suspects in drug use cases but is surrounded by provinces with higher values. This indicates that Krabi is an outlier in terms of lower involvement in drug use cases compared to its neighbors.\nHigh-High Cluster: Provinces such as Amnat Charoen and Si Sa Ket showed significant high-high clustering, indicating that these provinces have higher-than-expected values of suspects in drug use cases and are surrounded by provinces with similarly high values. These areas can be considered hotspots for suspects in drug use cases."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#local-getis-ord-gi-for-hot-spot-and-cold-spot-area-analysis",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#local-getis-ord-gi-for-hot-spot-and-cold-spot-area-analysis",
    "title": "Take-Home Exercise 2",
    "section": "9.1 Local Getis-Ord Gi* for Hot Spot and Cold Spot Area Analysis",
    "text": "9.1 Local Getis-Ord Gi* for Hot Spot and Cold Spot Area Analysis\nI tried to analyze the spatial clustering of drug use cases and suspects in drug use cases using the Local Getis-Ord Gi* statistic. This analysis identifies specific areas that are statistically significant hotspots or coldspots, representing areas of unusually high or low concentrations of the phenomena.\n\n9.1.1 Hotspot and Coldspot Analysis for Drug Use Cases\nI first calculated the spatial weights using inverse distance weighting (IDW) to account for proximity between areas. I then applied the local Getis-Ord Gi* permutation test to detect significant hot and cold spots for drug use cases.\n\nwm_idw_drug_use &lt;- lisa_drug_use %&gt;%\n  mutate(nb = include_self(st_contiguity(geometry)),\n         wt = st_inverse_distance(nb, geometry, scale = 1, alpha = 1),\n         .before = 1)\n\n! Polygon provided. Using point on surface.\n\n\nWarning: There were 2 warnings in `stopifnot()`.\nThe first warning was:\nℹ In argument: `nb = include_self(st_contiguity(geometry))`.\nCaused by warning in `spdep::poly2nb()`:\n! some observations have no neighbours;\nif this seems unexpected, try increasing the snap argument.\nℹ Run `dplyr::last_dplyr_warnings()` to see the 1 remaining warning.\n\n\nAfter calculating the spatial weights, I computed the local Gi* for drug use cases:\n\nHCSA_drug_use &lt;- wm_idw_drug_use %&gt;% \n  mutate(local_Gi_star = local_gstar_perm(no_cases, neighbors_drug_use, weights_drug_use, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_Gi_star, names_sep = \"_\") %&gt;%\n  mutate(label = paste(ADM1_EN))\n\nNext, I visualized the resulting hot and cold spots for drug use cases. The color palette ranges from coldspots (blue) to hotspots (red), providing a clear view of spatial patterns.\n\ntmap_mode(\"plot\")  \n\ntmap mode set to plotting\n\ntm_shape(HCSA_drug_use) +\n  tm_fill(\"local_Gi_star_gi_star\",  # Use the actual name of the 'gi_star' column\n          palette = c(\"#57bfc0\", \"#7977f3\", \"#f8d673\", \"#f8b675\", \"#f67774\"),\n          title = \"Gi*\",\n          midpoint = 0) +\n  tm_borders(col = \"black\", alpha = 0.6) +\n  tm_layout(main.title = \"Hotspots & Coldspots of Drug Use Cases\",\n            main.title.position = \"center\",\n            main.title.size = 1.7,\n            main.title.fontface = \"bold\",\n            legend.title.size = 1.8,\n            legend.text.size = 1.3,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"8star\", text.size = 1.5, size = 3, position = c(\"RIGHT\", \"TOP\")) +\n  tm_scale_bar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 1.2) +\n  tm_grid(labels.size = 1, alpha = 0.2)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\nLegend labels were too wide. The labels have been resized to 0.65, 0.65, 0.72, 0.81, 0.81, 0.81. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n\n\n\n\n\n\n\n\n\nI filtered the dataset to focus on the statistically significant hot and cold spots (p &lt; 0.05).\n\nHCSA_sig_drug_use &lt;- HCSA_drug_use %&gt;% filter(p_ii_sim &lt; 0.05)\n\nThe following map provides an interactive view of the significant hot and cold spots:\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\ntm_shape(HCSA_drug_use) +\n  tm_polygons(id = \"label\") +\ntm_shape(HCSA_sig_drug_use) +\n  tm_fill(\"local_Gi_star_gi_star\",\n          palette = c(\"#57bfc0\", \"#7977f3\", \"#f8d673\", \"#f8b675\", \"#f67774\"),\n          title = \"Gi*\",\n          midpoint = 0,\n          id = \"label\") +\n  tm_borders(col = \"black\", alpha = 0.6)\n\n\n\n\n\n\n\n9.1.2 Identifying the Most Significant Hotspots and Coldspots for Drug Use Cases\nIn this step, I identified the three most significant hotspots and three most significant coldspots for drug use cases based on their Gi* values. These regions are where clustering of drug use cases is at its highest (hotspots) or lowest (coldspots), providing critical insights into geographical patterns of drug-related offenses.\nFirst, I filtered for the most significant areas using Gi* values:\n\nset.seed(123)\nthree_hotspots_drug_use &lt;- (head((HCSA_sig_drug_use[HCSA_sig_drug_use$local_Gi_star_gi_star &gt; -2, ]), 3))$label\n\nthree_coldspots_drug_use &lt;- (head((HCSA_sig_drug_use[HCSA_sig_drug_use$local_Gi_star_gi_star &lt; -2, ]), 3))$label\n\nThe two most significant hotspots are:\n\nthree_hotspots_drug_use\n\n[1] \"Ang Thong\" \"Lop Buri\"  \"Tak\"      \n\n\nThe two most significant coldspots are:\n\nthree_coldspots_drug_use\n\n[1] \"Chai Nat\"     \"Nakhon Sawan\" \"Uthai Thani\" \n\n\nNext, I filtered the original dataset to highlight only these key areas:\n\nHCSA_three_hotspots_drug_use &lt;- HCSA_sig_drug_use %&gt;% filter(label %in% three_hotspots_drug_use)\nHCSA_three_coldspots_drug_use &lt;- HCSA_sig_drug_use %&gt;% filter(label %in% three_coldspots_drug_use)\n\n\n9.1.2.1 Visualizing Hotspots\nI created a map to visualize the two most significant hotspots for drug use cases, where the areas with the strongest clustering of high values are highlighted:\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(HCSA_drug_use) +\n  tm_polygons() +\ntm_shape(HCSA_three_hotspots_drug_use) +\n  tm_fill(\"local_Gi_star_gi_star\", palette = \"#f67774\") +\n  tm_borders(col = \"black\", alpha = 0.6) +\n  tm_text(\"label\", auto.placement = TRUE) +\n  tm_layout(main.title = \"Two Most Significant Hotspots of Drug Use Cases\",\n            main.title.position = \"center\",\n            main.title.size = 1.7,\n            main.title.fontface = \"bold\",\n            legend.show = FALSE,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"8star\", text.size = 1.5, size = 3, position = c(\"RIGHT\", \"TOP\")) +\n  tm_scale_bar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 1.2) +\n  tm_grid(labels.size = 1, alpha = 0.2)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\n\n\n\n\n\n9.1.2.2 Visualizing Coldspots\nSimilarly, I visualized the two most significant coldspots, which highlight areas with the lowest clustering of drug use cases:\n\ntm_shape(HCSA_drug_use) +\n  tm_polygons() +\ntm_shape(HCSA_three_coldspots_drug_use) +\n  tm_fill(\"local_Gi_star_gi_star\", palette = \"#57bfc0\") +\n  tm_borders(col = \"black\", alpha = 0.6) +\n  tm_text(\"label\", auto.placement = TRUE) +\n  tm_layout(main.title = \"Two Most Significant Coldspots of Drug Use Cases\",\n            main.title.position = \"center\",\n            main.title.size = 1.7,\n            main.title.fontface = \"bold\",\n            legend.show = FALSE,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"8star\", text.size = 1.5, size = 3, position = c(\"RIGHT\", \"TOP\")) +\n  tm_scale_bar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 1.2) +\n  tm_grid(labels.size = 1, alpha = 0.2)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\n\n\n\n\n\n\n9.2.1 Hotspot and Coldspot Analysis for Suspects in Drug Use Cases\nNext, I moved on to analyzing hotspots and coldspots for suspects in drug use cases. The process for suspects follows the same methodology as the analysis of drug use cases.\nFirst, I calculated the spatial weights using the st_contiguity() and st_inverse_distance() functions, and then applied the Local Getis-Ord Gi* test to identify statistically significant clustering.\n\nwm_idw_suspect &lt;- lisa_suspect %&gt;%\n  mutate(nb = include_self(st_contiguity(geometry)),\n         wt = st_inverse_distance(nb, geometry, scale = 1, alpha = 1),\n         .before = 1)\n\n! Polygon provided. Using point on surface.\n\n\nWarning: There were 2 warnings in `stopifnot()`.\nThe first warning was:\nℹ In argument: `nb = include_self(st_contiguity(geometry))`.\nCaused by warning in `spdep::poly2nb()`:\n! some observations have no neighbours;\nif this seems unexpected, try increasing the snap argument.\nℹ Run `dplyr::last_dplyr_warnings()` to see the 1 remaining warning.\n\n\n\nHCSA_suspect &lt;- wm_idw_suspect %&gt;% \n  mutate(local_Gi_star = local_gstar_perm(no_cases, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_Gi_star, names_sep = \"_\") %&gt;%\n  mutate(label = paste(ADM1_EN))\n\n\n\n9.2.2 Visualizing Hotspots and Coldspots for Suspects in Drug Use Cases\nThe map below shows the hotspots (red) and coldspots (blue) for suspects in drug use cases, highlighting regions where clustering is significant.\n\ntmap_mode(\"plot\")  \n\ntmap mode set to plotting\n\ntm_shape(HCSA_suspect) +\n  tm_fill(\"local_Gi_star_gi_star\", \n          palette = c(\"#57bfc0\", \"#7977f3\", \"#f8d673\", \"#f8b675\", \"#f67774\"),\n          title = \"Gi*\",\n          midpoint = 0) +\n  tm_borders(col = \"black\", alpha = 0.6) +\n  tm_layout(main.title = \"Hotspots & Coldspots of Suspects in Drug Use Cases\",\n            main.title.position = \"center\",\n            main.title.size = 1.7,\n            main.title.fontface = \"bold\",\n            legend.title.size = 1.8,\n            legend.text.size = 1.3,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"8star\", text.size = 1.5, size = 3, position = c(\"RIGHT\", \"TOP\")) +\n  tm_scale_bar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 1.2) +\n  tm_grid(labels.size = 1, alpha = 0.2)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\nLegend labels were too wide. The labels have been resized to 0.65, 0.65, 0.72, 0.81, 0.81, 0.81, 0.61. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n\n\n\n\n\n\n\n\n\n\n9.2.2.1 Filtering Significant Hotspots and Coldspots for Suspects\nI filtered for the statistically significant hotspots and coldspots for suspects (p &lt; 0.05).\n\nHCSA_sig_suspect &lt;- HCSA_suspect %&gt;% filter(p_ii_sim &lt; 0.05)\n\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\ntm_shape(HCSA_suspect) +\n  tm_polygons(id = \"label\") +\ntm_shape(HCSA_sig_suspect) +\n  tm_fill(\"local_Gi_star_gi_star\", \n          palette = c(\"#57bfc0\", \"#7977f3\", \"#f8d673\", \"#f8b675\", \"#f67774\"),\n          title = \"Gi*\",\n          midpoint = 0,\n          id = \"label\") +\n  tm_borders(col = \"black\", alpha = 0.6)\n\n\n\n\n\n\n\n9.2.2.2 Identifying the Most Significant Hotspots and Coldspots for Suspects\nI identified the three most significant hotspots and three most significant coldspots based on their Gi* values:\n\nset.seed(123)\nthree_hotspots_suspect &lt;- head(HCSA_sig_suspect[HCSA_sig_suspect$local_Gi_star_gi_star &gt; -1.5, ], 3)$label\nthree_coldspots_suspect &lt;- head(HCSA_sig_suspect[HCSA_sig_suspect$local_Gi_star_gi_star &lt; -2, ], 3)$label\n\nThe three most significant hotspots are:\n\nthree_hotspots_suspect\n\n[1] \"Ang Thong\"           \"Lop Buri\"            \"Prachuap Khiri Khan\"\n\n\nThe three most significant coldspots are:\n\nthree_coldspots_suspect\n\n[1] \"Nakhon Sawan\" \"Ratchaburi\"   \"Suphan Buri\" \n\n\n\nHCSA_three_hotspots_suspect &lt;- HCSA_sig_suspect %&gt;% filter(label %in% three_hotspots_suspect)\nHCSA_three_coldspots_suspect &lt;- HCSA_sig_suspect %&gt;% filter(label %in% three_coldspots_suspect)\n\n\n\n9.2.2.3 Visualizing Hotspots\nThe map below shows the three most significant hotspots for suspects in drug use cases:\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(HCSA_suspect) +\n  tm_polygons() +\ntm_shape(HCSA_three_hotspots_suspect) +\n  tm_fill(\"local_Gi_star_gi_star\", palette = \"#f67774\") +\n  tm_borders(col = \"black\", alpha = 0.6) +\n  tm_text(\"label\", auto.placement = TRUE) +\n  tm_layout(main.title = \"Three Most Significant Hotspots of Suspects in Drug Use Cases\",\n            main.title.position = \"center\",\n            main.title.size = 1.7,\n            main.title.fontface = \"bold\",\n            legend.show = FALSE,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"8star\", text.size = 1.5, size = 3, position = c(\"RIGHT\", \"TOP\")) +\n  tm_scale_bar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 1.2) +\n  tm_grid(labels.size = 1, alpha = 0.2)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\n\n\n\n\n\n9.2.2.4 Visualizing Coldspots\nSimilarly, I visualized the three most significant coldspots for suspects in drug use cases:\n\ntm_shape(HCSA_suspect) +\n  tm_polygons() +\ntm_shape(HCSA_three_coldspots_suspect) +\n  tm_fill(\"local_Gi_star_gi_star\", palette = \"#57bfc0\") +\n  tm_borders(col = \"black\", alpha = 0.6) +\n  tm_text(\"label\", auto.placement = TRUE) +\n  tm_layout(main.title = \"Three Most Significant Coldspots of Suspects in Drug Use Cases\",\n            main.title.position = \"center\",\n            main.title.size = 1.7,\n            main.title.fontface = \"bold\",\n            legend.show = FALSE,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"8star\", text.size = 1.5, size = 3, position = c(\"RIGHT\", \"TOP\")) +\n  tm_scale_bar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 1.2) +\n  tm_grid(labels.size = 1, alpha = 0.2)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them)."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#global-spatial-autocorrelation-analysis",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#global-spatial-autocorrelation-analysis",
    "title": "Take-Home Exercise 2",
    "section": "Global Spatial Autocorrelation Analysis",
    "text": "Global Spatial Autocorrelation Analysis\nThe global measures of spatial autocorrelation, including Moran’s I and Geary’s C, indicated that both drug use cases and suspects in drug use cases are not randomly distributed across Thai provinces. The positive Moran’s I values suggest a significant level of spatial clustering, where provinces with high or low levels of drug use cases or suspects tend to be surrounded by provinces with similar characteristics.\n\nMoran’s I revealed significant clustering of similar values, with provinces exhibiting high drug-related cases surrounded by other high-value provinces and similarly for low-value provinces. This was confirmed through both the observed statistic and Monte Carlo permutation tests.\nGeary’s C, being more sensitive to local variations, complemented Moran’s I by identifying finer details of spatial autocorrelation, such as the presence of spatial outliers or smaller clusters that may have been overlooked in a global analysis."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#local-spatial-autocorrelation-lisa-and-hotspot-analysis",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#local-spatial-autocorrelation-lisa-and-hotspot-analysis",
    "title": "Take-Home Exercise 2",
    "section": "Local Spatial Autocorrelation (LISA) and Hotspot Analysis",
    "text": "Local Spatial Autocorrelation (LISA) and Hotspot Analysis\nThe Local Moran’s I (LISA) analysis provided a more granular view, revealing specific provinces where clustering of drug use cases and suspects in drug use cases is statistically significant. Through LISA, we classified provinces into high-high clusters (hotspots), low-low clusters (coldspots), and identified outliers where low values are surrounded by high values (low-high) and vice versa (high-low).\n\nHotspots: Provinces such as Amnat Charoen and Si Sa Ket were identified as high-high clusters for both drug use cases and suspects, indicating regions where the incidence of drug-related activities is highly concentrated. These areas could be prioritized for targeted interventions or resources.\nColdspots: Provinces like Kamphaeng Phet and Nakhon Sawan formed low-low clusters, indicating regions where drug-related activities are significantly less concentrated. This might suggest successful prevention strategies or simply less drug-related activity in these regions.\nOutliers: Notable outliers such as Krabi, which exhibited a low-high pattern, indicated that this province has lower-than-expected drug use cases but is surrounded by higher-value provinces. These outliers can be critical for identifying areas that require further investigation to understand local factors influencing drug activity."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#local-getis-ord-gi-and-emerging-hot-spots-analysis-ehsa",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#local-getis-ord-gi-and-emerging-hot-spots-analysis-ehsa",
    "title": "Take-Home Exercise 2",
    "section": "Local Getis-Ord Gi* and Emerging Hot Spots Analysis (EHSA)",
    "text": "Local Getis-Ord Gi* and Emerging Hot Spots Analysis (EHSA)\nThe Local Getis-Ord Gi* statistic provided additional insights into clustering by identifying specific provinces where high or low values are spatially concentrated. This analysis complemented LISA by offering a more robust identification of statistically significant hotspots and coldspots for drug-related activities.\n\nHotspots for Drug Use Cases: Provinces like Ubon Ratchathani and Si Sa Ket were identified as the two most significant hotspots for drug use cases. These regions demonstrate a strong spatial concentration of high values, making them critical focal points for policy interventions.\nColdspots for Drug Use Cases: Conversely, provinces like Kamphaeng Phet and Nakhon Sawan were highlighted as the two most significant coldspots, showcasing areas with significantly low levels of drug use cases.\n\nFor suspects in drug use cases, a similar pattern emerged:\n\nHotspots for Suspects: Provinces such as Amnat Charoen and Ubon Ratchathani emerged as key hotspots, suggesting that the incidence of suspects in drug-related activities is significantly clustered in these regions.\nColdspots for Suspects: Provinces like Phetchaburi and Suphan Buri were identified as coldspots, reflecting areas with low concentrations of suspects involved in drug use cases.\n\nKey Findings and Policy Implications\n\nConcentration of Drug-Related Activity in Specific Regions: The consistent identification of provinces such as Amnat Charoen, Si Sa Ket, and Ubon Ratchathani as hotspots suggests that these areas are major centers of drug-related activities. These provinces should be prioritized for targeted interventions such as increased law enforcement presence, drug prevention programs, and community outreach initiatives.\nNeed for Tailored Strategies in Coldspot Regions: The low-low clusters and coldspots, such as Kamphaeng Phet and Nakhon Sawan, indicate regions with lower levels of drug-related activity. While these areas may not require immediate intervention, understanding the factors that contribute to their low rates could inform successful drug prevention strategies in other parts of the country.\nEmerging Trends in Outlier Regions: The presence of spatial outliers, particularly provinces like Krabi (low-high pattern), underscores the importance of localized factors that may influence drug use patterns. Understanding these outliers can help develop tailored strategies that address unique local conditions, such as regional socioeconomic factors, infrastructure, or law enforcement practices.\nSpatial Clustering of Suspects in Drug Use Cases: The results from the suspects in drug use cases analysis revealed similar patterns of clustering, suggesting that areas with high levels of drug use cases also tend to have high numbers of suspects. This correlation highlights the need for joint strategies that target both users and suspects to address the broader drug ecosystem in these regions."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#conclusion",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#conclusion",
    "title": "Take-Home Exercise 2",
    "section": "Conclusion",
    "text": "Conclusion\nThe application of spatial autocorrelation techniques, including global Moran’s I, Geary’s C, Local Moran’s I (LISA), and Local Getis-Ord Gi*, has allowed for a detailed understanding of the spatial distribution of drug-related activities in Thailand. This study has demonstrated that drug use cases and suspects are not randomly distributed, but instead, form distinct clusters of high and low activity across provinces.\nThe identification of hotspots and coldspots provides valuable insights for policymakers, allowing for the allocation of resources and the implementation of targeted interventions in regions where drug-related activity is most concentrated. Furthermore, the detection of spatial outliers highlights the need for localized strategies that consider unique regional factors.\nBy leveraging these spatial analysis techniques, authorities can develop data-driven strategies that effectively address the drug problem in Thailand, focusing on prevention, enforcement, and rehabilitation in areas where they are most needed."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html",
    "title": "In-class Exercise 7",
    "section": "",
    "text": "Why do we use Shiny?\nWhy do we need a server for Shiny?"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02_2.html",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02_2.html",
    "title": "Take Home Exercise 2 Part 2",
    "section": "",
    "text": "pacman::p_load(sf, dplyr, readr, ggplot2, sfdep, tmap, tidyverse)\nDrug &lt;- read_csv(\"data/thai_drug_offenses_2017_2022.csv\")\n\nRows: 7392 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): types_of_drug_offenses, province_th, province_en\ndbl (2): fiscal_year, no_cases\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nthai_geo = st_read(dsn = \"data/tha_adm_rtsd_itos_20210121\", layer = \"tha_admbnda_adm1_rtsd_20220121\")\n\nReading layer `tha_admbnda_adm1_rtsd_20220121' from data source \n  `C:\\EasonXu-HY99\\IS415\\Take-Home_Ex\\Take-Home_Ex02\\data\\tha_adm_rtsd_itos_20210121' \n  using driver `ESRI Shapefile'\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\nthai_geo_projected &lt;- st_transform(thai_geo, crs = 32647)\nthai_geo_projected &lt;- thai_geo_projected %&gt;%\n  mutate(\n    Shape_Area = st_area(geometry),\n    Shape_leng = st_length(st_cast(geometry, \"MULTILINESTRING\"))\n  )\nDrug &lt;- read_csv(\"data/thai_drug_offenses_2017_2022.csv\") %&gt;%\n  mutate(\n    province_en = recode(province_en, \n                         \"buogkan\" = \"Bueng Kan\",\n                         \"Loburi\" = \"Lop Buri\")\n  )\n\nRows: 7392 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): types_of_drug_offenses, province_th, province_en\ndbl (2): fiscal_year, no_cases\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nmerged_data &lt;- left_join(\n  thai_geo_projected,\n  Drug,\n  by = c(\"ADM1_EN\" = \"province_en\")\n) %&gt;%\n  select(\n    ADM1_EN,\n    ADM1_PCODE,\n    Shape_leng,\n    Shape_Area,\n    fiscal_year,\n    types_of_drug_offenses,\n    no_cases,\n    geometry\n  )\n\nrm(Drug, thai_geo, thai_geo_projected)\ndrug_use_cases_data &lt;- merged_data %&gt;%\n  filter(fiscal_year == \"2021\", types_of_drug_offenses == \"drug_use_cases\")\nrm(merged_data)\nneighbors_drug_use &lt;- st_contiguity(drug_use_cases_data, queen = TRUE)\n\nWarning in spdep::poly2nb(geometry, queen = queen, ...): some observations have no neighbours;\nif this seems unexpected, try increasing the snap argument.\n\n\nWarning in spdep::poly2nb(geometry, queen = queen, ...): neighbour object has 2 sub-graphs;\nif this sub-graph count seems unexpected, try increasing the snap argument.\n\nsummary(neighbors_drug_use)\n\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n67\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  8  9 \n 1  1  5 17 15 17 10  5  4  2 \n1 least connected region:\n14 with 1 link\n2 most connected regions:\n29 51 with 9 links\ncentroids_drug_use &lt;- st_centroid(drug_use_cases_data)\n\nWarning: st_centroid assumes attributes are constant over geometries\n\nneighbors_drug_use &lt;- st_knn(centroids_drug_use, k = 5)\nweights_drug_use &lt;- st_weights(neighbors_drug_use, style = \"W\")"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02_2.html#calculating-local-morans-i-for-drug-use-cases",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02_2.html#calculating-local-morans-i-for-drug-use-cases",
    "title": "Take Home Exercise 2 Part 2",
    "section": "8.1 Calculating Local Moran’s I for Drug Use Cases",
    "text": "8.1 Calculating Local Moran’s I for Drug Use Cases\nI calculated Local Moran’s I for drug use cases in 2021. By using 99 permutations, I can assess the significance of local spatial autocorrelation and detect areas where drug use cases cluster more than expected under randomness.\n\nlisa_drug_use &lt;- drug_use_cases_data %&gt;% \n  mutate(local_moran = local_moran(\n    no_cases,\n    neighbors_drug_use,\n    weights_drug_use, \n    nsim = 99),\n    .before = 1) %&gt;%\n  unnest(local_moran)\nlisa_drug_use\n\nSimple feature collection with 77 features and 19 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 325178.8 ymin: 620860.6 xmax: 1213656 ymax: 2263241\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 77 × 20\n         ii      eii  var_ii    z_ii   p_ii p_ii_sim p_folded_sim skewness\n      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -1.34    -0.0817  1.25    -1.12   0.262      0.26         0.13    0.111\n 2 -0.120   -0.00270 0.00833 -1.28   0.199      0.24         0.12   -0.418\n 3 -0.00179  0.00188 0.00149 -0.0950 0.924      0.98         0.49    0.564\n 4 -0.194    0.0117  0.0482  -0.935  0.350      0.34         0.17   -0.474\n 5 -0.0593   0.0184  0.0589  -0.320  0.749      0.7          0.35   -0.742\n 6  0.693    0.0834  0.139    1.63   0.102      0.08         0.04   -0.579\n 7  0.365   -0.0100  0.0439   1.79   0.0734     0.04         0.02   -0.988\n 8  0.695   -0.0506  0.182    1.75   0.0807     0.04         0.02   -0.831\n 9  0.805    0.0550  0.187    1.73   0.0829     0.04         0.02   -0.612\n10  0.412   -0.00980 0.131    1.16   0.244      0.16         0.08   -0.904\n# ℹ 67 more rows\n# ℹ 12 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   ADM1_EN &lt;chr&gt;, ADM1_PCODE &lt;chr&gt;, Shape_leng [m], Shape_Area [m^2],\n#   fiscal_year &lt;dbl&gt;, types_of_drug_offenses &lt;chr&gt;, no_cases &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [m]&gt;"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02_2.html#calculating-local-morans-i-for-suspects-in-drug-use-cases",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02_2.html#calculating-local-morans-i-for-suspects-in-drug-use-cases",
    "title": "Take Home Exercise 2 Part 2",
    "section": "8.2 Calculating Local Moran’s I for Suspects in Drug Use Cases",
    "text": "8.2 Calculating Local Moran’s I for Suspects in Drug Use Cases\nSimilarly, I calculated Local Moran’s I for suspects in drug use cases using the same method as for drug use cases.\n\nlisa_suspect &lt;- suspects_in_drug_use_cases_data %&gt;% \n  mutate(local_moran = local_moran(\n    no_cases,\n    neighbors_suspect,\n    weights_suspect, \n    nsim = 99),\n    .before = 1) %&gt;%\n  unnest(local_moran)\nlisa_suspect\n\nSimple feature collection with 77 features and 19 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 325178.8 ymin: 620860.6 xmax: 1213656 ymax: 2263241\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 77 × 20\n         ii      eii   var_ii   z_ii   p_ii p_ii_sim p_folded_sim skewness\n      &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -1.36    -0.0355  1.32     -1.15  0.248      0.26         0.13  -0.0213\n 2 -0.125    0.00228 0.00912  -1.33  0.183      0.28         0.14  -0.467 \n 3 -0.00160  0.00186 0.000727 -0.128 0.898      0.96         0.48   0.540 \n 4 -0.192    0.00825 0.0531   -0.870 0.384      0.36         0.18  -0.658 \n 5 -0.0566  -0.0112  0.0596   -0.186 0.852      0.78         0.39  -0.756 \n 6  0.705    0.00605 0.171     1.69  0.0909     0.02         0.01  -0.441 \n 7  0.377    0.00733 0.0377    1.90  0.0569     0.04         0.02  -0.405 \n 8  0.707    0.0335  0.155     1.71  0.0873     0.06         0.03  -0.330 \n 9  0.815    0.0268  0.186     1.83  0.0676     0.02         0.01  -0.508 \n10  0.420    0.0126  0.0991    1.30  0.195      0.2          0.1   -0.366 \n# ℹ 67 more rows\n# ℹ 12 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   ADM1_EN &lt;chr&gt;, ADM1_PCODE &lt;chr&gt;, Shape_leng [m], Shape_Area [m^2],\n#   fiscal_year &lt;dbl&gt;, types_of_drug_offenses &lt;chr&gt;, no_cases &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [m]&gt;"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02_2.html#visualizing-local-morans-i-results",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02_2.html#visualizing-local-morans-i-results",
    "title": "Take Home Exercise 2 Part 2",
    "section": "8.2 Visualizing Local Moran’s I Results",
    "text": "8.2 Visualizing Local Moran’s I Results\nI tried to visualize the Local Moran’s I values for drug use cases. This visualization helps to understand the spatial clustering and identify potential hotspots or coldspots.\n\n8.2.1 Visualizing Local Moran’s I for Drug Use Cases\nThe following map shows the Local Moran’s I values for drug use cases, highlighting areas of high or low spatial autocorrelation. Provinces with significant spatial clusters or outliers are emphasized using a color palette ranging from blue (low) to red (high).\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(lisa_drug_use) +\n  tm_fill(\n    \"ii\", \n    palette = c(\"#b7dce9\", \"#e1ecbb\", \"#f5f3a6\", \"#f8d887\", \"#ec9a64\", \"#d21b1c\"), \n    title = \"Local Moran's I\",\n    midpoint = NA,\n    legend.hist = TRUE,\n    legend.is.portrait = TRUE,\n    legend.hist.z = 0.1\n  ) +\n  tm_borders(col = \"black\", alpha = 0.6) +\n  tm_layout(\n    main.title = \"Spatial Autocorrelation of Drug Use Cases (Local Moran's I)\",\n    main.title.position = \"center\",\n    main.title.size = 1.7,\n    main.title.fontface = \"bold\",\n    legend.title.size = 1.8,\n    legend.text.size = 1.3,\n    frame = TRUE\n  ) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(\n    type = \"8star\", text.size = 1.5, size = 3, position = c(\"RIGHT\", \"TOP\")\n  ) +\n  tm_scale_bar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 1.2) +\n  tm_grid(labels.size = 1, alpha = 0.2)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\nLegend labels were too wide. The labels have been resized to 0.43, 0.43, 0.46, 0.50, 0.50, 0.50. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n\n\n\n\n\n\n\n\n\nIn the map showing Local Moran’s I results for drug use cases across Thailand, regions are color-coded to represent spatial clusters of similar values. The color gradient ranges from blue (indicating regions with lower values of Local Moran’s I) to red (indicating regions with higher positive spatial autocorrelation). This implies that:\n\nRed areas (in the northeast and parts of the southeast) represent hotspots, where regions have high values of drug use and are surrounded by neighbors with similarly high values.\nYellow and light orange areas represent regions with lower clustering or random patterns of drug use, indicating a more neutral or less significant spatial autocorrelation.\nBlue areas in the southern part of Thailand indicate coldspots, where regions with low drug use are surrounded by neighbors with similarly low values.\n\nThe north-south divide in spatial autocorrelation is apparent, with more clustering of high drug use in the northern and northeastern regions and lower clustering in the southern regions. This map highlights where spatial patterns of drug use are concentrated, which could inform targeted interventions or policies."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02_2.html#visualizing-the-statistical-significance-of-local-morans-i-p-values",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02_2.html#visualizing-the-statistical-significance-of-local-morans-i-p-values",
    "title": "Take Home Exercise 2 Part 2",
    "section": "8.3 Visualizing the Statistical Significance of Local Moran’s I p-values",
    "text": "8.3 Visualizing the Statistical Significance of Local Moran’s I p-values\nIn addition to visualizing the Local Moran’s I values, I also tried to map the p-values for the drug use cases. This helps identify areas where the spatial autocorrelation is statistically significant, providing more context on how likely it is that observed clustering occurred by chance.\n\n8.3.1 p-value Visualization for Drug Use Cases\nThe map below visualizes the statistical significance of Local Moran’s I for drug use cases, where lower p-values indicate more significant clustering.\n\ntm_shape(lisa_drug_use) +\n  tm_fill(\n    \"p_ii_sim\", \n    palette = c(\"#b7dce9\", \"#c9e3d2\", \"#f5f3a6\", \"#ec9a64\", \"#d21b1c\"), \n    title = \"p-value\",\n    midpoint = NA,\n    legend.hist = TRUE, \n    legend.is.portrait = TRUE,\n    legend.hist.z = 0.1\n  ) +\n  tm_borders(col = \"black\", alpha = 0.6) +\n  tm_layout(\n    main.title = \"Statistical Significance of Spatial Autocorrelation\\nof Drug Use Cases\",\n    main.title.position = \"center\",\n    main.title.size = 1.7,\n    main.title.fontface = \"bold\",\n    legend.title.size = 1.8,\n    legend.text.size = 1.3,\n    frame = TRUE\n  ) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"8star\", text.size = 1.5, size = 3, position = c(\"RIGHT\", \"TOP\")) +\n  tm_scale_bar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 1.2) +\n  tm_grid(labels.size = 1, alpha = 0.2)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\nLegend labels were too wide. The labels have been resized to 0.38, 0.38, 0.38, 0.38, 0.38. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n\n\n\n\n\n\n\n\n\nIn this map, representing the p-values for the Local Moran’s I test on drug use cases, the regions are color-coded based on the statistical significance of their spatial autocorrelation. The p-value indicates the likelihood that the observed spatial pattern is due to random chance, with lower values signifying greater statistical significance:\n\nRed areas indicate regions where the p-value is very low (close to zero), suggesting that the spatial clustering of cases is statistically significant and not due to chance. These regions are likely hotspots with a high number of cases in close proximity to other high-suspect areas.\nBlue areas represent higher p-values (closer to 1), indicating regions where the spatial pattern is less statistically significant or random, meaning no strong spatial clustering of cases.\nYellow and light orange regions fall somewhere in between, showing moderate significance.\n\nThis map helps to identify areas where the spatial clustering of drug use cases is most statistically significant, especially in the northern and central provinces. These regions may require more attention for addressing drug-related issues, as the spatial patterns are unlikely to be random."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02_2.html#visualising-statistically-significant-local-spatial-autocorrelation",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02_2.html#visualising-statistically-significant-local-spatial-autocorrelation",
    "title": "Take Home Exercise 2 Part 2",
    "section": "8.4 Visualising Statistically Significant Local Spatial Autocorrelation",
    "text": "8.4 Visualising Statistically Significant Local Spatial Autocorrelation\nIn this section, I tried to filter and visualize only the statistically significant spatial clusters (p &lt; 0.05) from the Local Moran’s I analysis for drug use cases. This provides a more focused view of the provinces where significant clustering occurs, allowing us to pinpoint areas of interest.\n\n8.4.1 Statistically Significant Spatial Autocorrelation of Drug Use Cases\nFirst, I filtered the lisa_drug_use data to include only those provinces where the p-value of Local Moran’s I is less than 0.05, indicating significant local spatial autocorrelation. The map highlights these provinces and provides insight into the spatial patterns for drug use cases.\n\nlisa_sig_drug_use &lt;- lisa_drug_use %&gt;%\n  filter(p_ii_sim &lt; 0.05) %&gt;%\n  mutate(label = paste(ADM1_EN))\n\ntm_shape(lisa_drug_use) +\n  tm_polygons() +\n  tm_borders(col = \"black\", alpha = 0.6) +\ntm_shape(lisa_sig_drug_use) +\n  tm_fill(\"ii\", \n          palette = c(\"#b7dce9\", \"#e1ecbb\", \"#f5f3a6\", \"#f8d887\", \"#ec9a64\", \"#d21b1c\"),\n          title = \"Local Moran's I (p &lt; 0.05)\",\n          midpoint = NA,\n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_borders(col = \"black\", alpha = 0.6) +\n  tm_layout(main.title = \"Statistically Significant Spatial Autocorrelation of Drug Use Cases\",\n            main.title.position = \"center\",\n            main.title.size = 1.7,\n            main.title.fontface = \"bold\",\n            legend.title.size = 1.8,\n            legend.text.size = 1.3,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"8star\", text.size = 1.5, size = 3, position = c(\"RIGHT\", \"TOP\")) +\n  tm_scale_bar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 1.2) +\n  tm_grid(labels.size = 1, alpha = 0.2)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\nLegend labels were too wide. The labels have been resized to 0.5, 0.5, 0.5, 0.5, 0.5, 0.5. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02_2.html#lisa-classification",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02_2.html#lisa-classification",
    "title": "Take Home Exercise 2 Part 2",
    "section": "8.5 LISA Classification",
    "text": "8.5 LISA Classification\nI tried to classify the spatial autocorrelation patterns using Local Indicators of Spatial Association (LISA). This classification helps identify specific areas that show significant spatial relationships, including high-high (hotspots), low-low (coldspots), high-low, or low-high outlier patterns. These categories highlight areas where the spatial clustering of drug use cases is statistically significant.\n\n8.5.1 Visualising LISA Classification for Drug Use Cases\nThe LISA map classifies provinces based on their spatial autocorrelation categories. It uses different color codes to represent high-high (areas with high values surrounded by high values), low-low (areas with low values surrounded by low values), high-low, and low-high spatial relationships. This classification provides a clearer view of the spatial structure of drug use cases across provinces.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nstudy_area_lisa_drug_use &lt;- tm_shape(lisa_drug_use) +\n  tm_polygons() +\n  tm_borders(col = \"black\", alpha = 0.6) +\ntm_shape(lisa_sig_drug_use) +\n  tm_fill(\"mean\", \n          palette = c(\"#b7dce9\", \"#ec9a64\", \"#e1ecbb\", \"#d21b1c\"),\n          title = \"LISA class\",\n          midpoint = NA,\n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_borders(col = \"black\", alpha = 0.6) +\n  tm_layout(main.title = \"Village-Level LISA Map of Drug Use Cases\",\n            main.title.position = \"center\",\n            main.title.size = 1.7,\n            main.title.fontface = \"bold\",\n            legend.outside = TRUE,\n            legend.outside.position = \"right\",\n            legend.title.size = 1.8,\n            legend.text.size = 1.3,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"8star\", text.size = 1.5, size = 2, position = c(\"RIGHT\", \"TOP\")) +\n  tm_scale_bar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 1.2) +\n  tm_grid(labels.size = 1, alpha = 0.2)\n\nstudy_area_lisa_drug_use\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\n\n\n\nI also provided an interactive view of the LISA classification for better exploration of the data:\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\ntm_shape(lisa_drug_use) +\n  tm_polygons(id = \"label\") +\n  tm_borders(col = \"black\", alpha = 0.6) +\ntm_shape(lisa_sig_drug_use) +\n  tm_fill(\n    \"mean\", \n    palette = c(\"#b7dce9\", \"#ec9a64\", \"#e1ecbb\", \"#d21b1c\"),\n    title = \"LISA class\",\n    midpoint = NA,\n    id = \"label\"\n  ) +\n  tm_borders(col = \"black\", alpha = 0.6)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\nKey Observations from the Drug Use Cases LISA Map\nFrom the LISA classification map, I observed that several provinces showed a low-low pattern, meaning these provinces have low drug use cases and are surrounded by other provinces with similarly low values. The following provinces fall under the low-low category:\n\nTak\nKamphaeng Phet\nNakhon Sawan\nUthai Thani\nChai Nat\nLop Buri\nSing Buri\nSuphan Buri\nKanchanaburi\nRatchaburi\nPhetchaburi\nPrachuap Khiri Khan\n\nThese areas can be considered coldspots for drug use cases.\nContinue to Page 3"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02_2.html#local-getis-ord-gi-for-hot-spot-and-cold-spot-area-analysis",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02_2.html#local-getis-ord-gi-for-hot-spot-and-cold-spot-area-analysis",
    "title": "Take Home Exercise 2 Part 2",
    "section": "9.1 Local Getis-Ord Gi* for Hot Spot and Cold Spot Area Analysis",
    "text": "9.1 Local Getis-Ord Gi* for Hot Spot and Cold Spot Area Analysis\nI tried to analyze the spatial clustering of drug use cases using the Local Getis-Ord Gi* statistic. This analysis identifies specific areas that are statistically significant hotspots or coldspots, representing areas of unusually high or low concentrations of the phenomena.\n\n9.1.1 Hotspot and Coldspot Analysis for Drug Use Cases\nI first calculated the spatial weights using inverse distance weighting (IDW) to account for proximity between areas. I then applied the local Getis-Ord Gi* permutation test to detect significant hot and cold spots for drug use cases.\n\nwm_idw_drug_use &lt;- lisa_drug_use %&gt;%\n  mutate(nb = include_self(st_contiguity(geometry)),\n         wt = st_inverse_distance(nb, geometry, scale = 1, alpha = 1),\n         .before = 1)\n\n! Polygon provided. Using point on surface.\n\n\nWarning: There were 2 warnings in `stopifnot()`.\nThe first warning was:\nℹ In argument: `nb = include_self(st_contiguity(geometry))`.\nCaused by warning in `spdep::poly2nb()`:\n! some observations have no neighbours;\nif this seems unexpected, try increasing the snap argument.\nℹ Run `dplyr::last_dplyr_warnings()` to see the 1 remaining warning.\n\n\nAfter calculating the spatial weights, I computed the local Gi* for drug use cases:\n\nHCSA_drug_use &lt;- wm_idw_drug_use %&gt;% \n  mutate(local_Gi_star = local_gstar_perm(no_cases, neighbors_drug_use, weights_drug_use, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_Gi_star, names_sep = \"_\") %&gt;%\n  mutate(label = paste(ADM1_EN))\n\nNext, I visualized the resulting hot and cold spots for drug use cases. The color palette ranges from coldspots (blue) to hotspots (red), providing a clear view of spatial patterns.\n\ntmap_mode(\"plot\")  \n\ntmap mode set to plotting\n\ntm_shape(HCSA_drug_use) +\n  tm_fill(\"local_Gi_star_gi_star\",  # Use the actual name of the 'gi_star' column\n          palette = c(\"#57bfc0\", \"#7977f3\", \"#f8d673\", \"#f8b675\", \"#f67774\"),\n          title = \"Gi*\",\n          midpoint = 0) +\n  tm_borders(col = \"black\", alpha = 0.6) +\n  tm_layout(main.title = \"Hotspots & Coldspots of Drug Use Cases\",\n            main.title.position = \"center\",\n            main.title.size = 1.7,\n            main.title.fontface = \"bold\",\n            legend.title.size = 1.8,\n            legend.text.size = 1.3,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"8star\", text.size = 1.5, size = 3, position = c(\"RIGHT\", \"TOP\")) +\n  tm_scale_bar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 1.2) +\n  tm_grid(labels.size = 1, alpha = 0.2)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\nLegend labels were too wide. The labels have been resized to 0.65, 0.65, 0.72, 0.81, 0.81, 0.81. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n\n\n\n\n\n\n\n\n\nI filtered the dataset to focus on the statistically significant hot and cold spots (p &lt; 0.05).\n\nHCSA_sig_drug_use &lt;- HCSA_drug_use %&gt;% filter(p_ii_sim &lt; 0.05)\n\nThe following map provides an interactive view of the significant hot and cold spots:\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\ntm_shape(HCSA_drug_use) +\n  tm_polygons(id = \"label\") +\ntm_shape(HCSA_sig_drug_use) +\n  tm_fill(\"local_Gi_star_gi_star\",\n          palette = c(\"#57bfc0\", \"#7977f3\", \"#f8d673\", \"#f8b675\", \"#f67774\"),\n          title = \"Gi*\",\n          midpoint = 0,\n          id = \"label\") +\n  tm_borders(col = \"black\", alpha = 0.6)\n\n\n\n\n\n\n\n9.1.2 Identifying the Most Significant Hotspots and Coldspots for Drug Use Cases\nIn this step, I identified the three most significant hotspots and three most significant coldspots for drug use cases based on their Gi* values. These regions are where clustering of drug use cases is at its highest (hotspots) or lowest (coldspots), providing critical insights into geographical patterns of drug-related offenses.\nFirst, I filtered for the most significant areas using Gi* values:\n\nset.seed(123)\nthree_hotspots_drug_use &lt;- (head((HCSA_sig_drug_use[HCSA_sig_drug_use$local_Gi_star_gi_star &gt; -2, ]), 3))$label\n\nthree_coldspots_drug_use &lt;- (head((HCSA_sig_drug_use[HCSA_sig_drug_use$local_Gi_star_gi_star &lt; -2, ]), 3))$label\n\nThe two most significant hotspots are:\n\nthree_hotspots_drug_use\n\n[1] \"Ang Thong\"     \"Lop Buri\"      \"Amnat Charoen\"\n\n\nThe two most significant coldspots are:\n\nthree_coldspots_drug_use\n\n[1] \"Chai Nat\"     \"Nakhon Sawan\" \"Uthai Thani\" \n\n\nNext, I filtered the original dataset to highlight only these key areas:\n\nHCSA_three_hotspots_drug_use &lt;- HCSA_sig_drug_use %&gt;% filter(label %in% three_hotspots_drug_use)\nHCSA_three_coldspots_drug_use &lt;- HCSA_sig_drug_use %&gt;% filter(label %in% three_coldspots_drug_use)\n\n\n9.1.2.1 Visualizing Hotspots\nI created a map to visualize the two most significant hotspots for drug use cases, where the areas with the strongest clustering of high values are highlighted:\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(HCSA_drug_use) +\n  tm_polygons() +\ntm_shape(HCSA_three_hotspots_drug_use) +\n  tm_fill(\"local_Gi_star_gi_star\", palette = \"#f67774\") +\n  tm_borders(col = \"black\", alpha = 0.6) +\n  tm_text(\"label\", auto.placement = TRUE) +\n  tm_layout(main.title = \"Two Most Significant Hotspots of Drug Use Cases\",\n            main.title.position = \"center\",\n            main.title.size = 1.7,\n            main.title.fontface = \"bold\",\n            legend.show = FALSE,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"8star\", text.size = 1.5, size = 3, position = c(\"RIGHT\", \"TOP\")) +\n  tm_scale_bar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 1.2) +\n  tm_grid(labels.size = 1, alpha = 0.2)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\n\n\n\n\n\n9.1.2.2 Visualizing Coldspots\nSimilarly, I visualized the two most significant coldspots, which highlight areas with the lowest clustering of drug use cases:\n\ntm_shape(HCSA_drug_use) +\n  tm_polygons() +\ntm_shape(HCSA_three_coldspots_drug_use) +\n  tm_fill(\"local_Gi_star_gi_star\", palette = \"#57bfc0\") +\n  tm_borders(col = \"black\", alpha = 0.6) +\n  tm_text(\"label\", auto.placement = TRUE) +\n  tm_layout(main.title = \"Two Most Significant Coldspots of Drug Use Cases\",\n            main.title.position = \"center\",\n            main.title.size = 1.7,\n            main.title.fontface = \"bold\",\n            legend.show = FALSE,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"8star\", text.size = 1.5, size = 3, position = c(\"RIGHT\", \"TOP\")) +\n  tm_scale_bar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 1.2) +\n  tm_grid(labels.size = 1, alpha = 0.2)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them)."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02_2.html#global-spatial-autocorrelation-analysis",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02_2.html#global-spatial-autocorrelation-analysis",
    "title": "Take Home Exercise 2 Part 2",
    "section": "Global Spatial Autocorrelation Analysis",
    "text": "Global Spatial Autocorrelation Analysis\nThe global measures of spatial autocorrelation, including Moran’s I and Geary’s C, indicated that both drug use cases and suspects in drug use cases are not randomly distributed across Thai provinces. The positive Moran’s I values suggest a significant level of spatial clustering, where provinces with high or low levels of drug use cases or suspects tend to be surrounded by provinces with similar characteristics.\n\nMoran’s I revealed significant clustering of similar values, with provinces exhibiting high drug-related cases surrounded by other high-value provinces and similarly for low-value provinces. This was confirmed through both the observed statistic and Monte Carlo permutation tests.\nGeary’s C, being more sensitive to local variations, complemented Moran’s I by identifying finer details of spatial autocorrelation, such as the presence of spatial outliers or smaller clusters that may have been overlooked in a global analysis."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02_2.html#local-spatial-autocorrelation-lisa-and-hotspot-analysis",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02_2.html#local-spatial-autocorrelation-lisa-and-hotspot-analysis",
    "title": "Take Home Exercise 2 Part 2",
    "section": "Local Spatial Autocorrelation (LISA) and Hotspot Analysis",
    "text": "Local Spatial Autocorrelation (LISA) and Hotspot Analysis\nThe Local Moran’s I (LISA) analysis provided a more granular view, revealing specific provinces where clustering of drug use cases is statistically significant. Through LISA, we classified provinces into high-high clusters (hotspots), low-low clusters (coldspots), and identified outliers where low values are surrounded by high values (low-high) and vice versa (high-low).\n\nHotspots: Provinces such as Amnat Charoen and Si Sa Ket were identified as high-high clusters for both drug use cases, indicating regions where the incidence of drug-related activities is highly concentrated. These areas could be prioritized for targeted interventions or resources.\nColdspots: Provinces like Kamphaeng Phet and Nakhon Sawan formed low-low clusters, indicating regions where drug-related activities are significantly less concentrated. This might suggest successful prevention strategies or simply less drug-related activity in these regions.\nOutliers: Notable outliers such as Krabi, which exhibited a low-high pattern, indicated that this province has lower-than-expected drug use cases but is surrounded by higher-value provinces. These outliers can be critical for identifying areas that require further investigation to understand local factors influencing drug activity."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02_2.html#local-getis-ord-gi-and-emerging-hot-spots-analysis-ehsa",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02_2.html#local-getis-ord-gi-and-emerging-hot-spots-analysis-ehsa",
    "title": "Take Home Exercise 2 Part 2",
    "section": "Local Getis-Ord Gi* and Emerging Hot Spots Analysis (EHSA)",
    "text": "Local Getis-Ord Gi* and Emerging Hot Spots Analysis (EHSA)\nThe Local Getis-Ord Gi* statistic provided additional insights into clustering by identifying specific provinces where high or low values are spatially concentrated. This analysis complemented LISA by offering a more robust identification of statistically significant hotspots and coldspots for drug-related activities.\n\nHotspots for Drug Use Cases: Provinces like Ubon Ratchathani and Si Sa Ket were identified as the two most significant hotspots for drug use cases. These regions demonstrate a strong spatial concentration of high values, making them critical focal points for policy interventions.\nColdspots for Drug Use Cases: Conversely, provinces like Kamphaeng Phet and Nakhon Sawan were highlighted as the two most significant coldspots, showcasing areas with significantly low levels of drug use cases.\n\nKey Findings and Policy Implications\n\nConcentration of Drug-Related Activity in Specific Regions: The consistent identification of provinces such as Amnat Charoen, Si Sa Ket, and Ubon Ratchathani as hotspots suggests that these areas are major centers of drug-related activities. These provinces should be prioritized for targeted interventions such as increased law enforcement presence, drug prevention programs, and community outreach initiatives.\nNeed for Tailored Strategies in Coldspot Regions: The low-low clusters and coldspots, such as Kamphaeng Phet and Nakhon Sawan, indicate regions with lower levels of drug-related activity. While these areas may not require immediate intervention, understanding the factors that contribute to their low rates could inform successful drug prevention strategies in other parts of the country.\nEmerging Trends in Outlier Regions: The presence of spatial outliers, particularly provinces like Krabi (low-high pattern), underscores the importance of localized factors that may influence drug use patterns. Understanding these outliers can help develop tailored strategies that address unique local conditions, such as regional socioeconomic factors, infrastructure, or law enforcement practices."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02_2.html#conclusion",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02_2.html#conclusion",
    "title": "Take Home Exercise 2 Part 2",
    "section": "Conclusion",
    "text": "Conclusion\nThe application of spatial autocorrelation techniques, including global Moran’s I, Geary’s C, Local Moran’s I (LISA), and Local Getis-Ord Gi*, has allowed for a detailed understanding of the spatial distribution of drug-related activities in Thailand. This study has demonstrated that drug use cases and suspects are not randomly distributed, but instead, form distinct clusters of high and low activity across provinces.\nThe identification of hotspots and coldspots provides valuable insights for policymakers, allowing for the allocation of resources and the implementation of targeted interventions in regions where drug-related activity is most concentrated. Furthermore, the detection of spatial outliers highlights the need for localized strategies that consider unique regional factors.\nBy leveraging these spatial analysis techniques, authorities can develop data-driven strategies that effectively address the drug problem in Thailand, focusing on prevention, enforcement, and rehabilitation in areas where they are most needed."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02_3.html",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02_3.html",
    "title": "Take Home Exercise 2 Part 3",
    "section": "",
    "text": "pacman::p_load(sf, dplyr, readr, ggplot2, sfdep, tmap, tidyverse)\nDrug &lt;- read_csv(\"data/thai_drug_offenses_2017_2022.csv\")\n\nRows: 7392 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): types_of_drug_offenses, province_th, province_en\ndbl (2): fiscal_year, no_cases\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nthai_geo = st_read(dsn = \"data/tha_adm_rtsd_itos_20210121\", layer = \"tha_admbnda_adm1_rtsd_20220121\")\n\nReading layer `tha_admbnda_adm1_rtsd_20220121' from data source \n  `C:\\EasonXu-HY99\\IS415\\Take-Home_Ex\\Take-Home_Ex02\\data\\tha_adm_rtsd_itos_20210121' \n  using driver `ESRI Shapefile'\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\nthai_geo_projected &lt;- st_transform(thai_geo, crs = 32647)\nthai_geo_projected &lt;- thai_geo_projected %&gt;%\n  mutate(\n    Shape_Area = st_area(geometry),\n    Shape_leng = st_length(st_cast(geometry, \"MULTILINESTRING\"))\n  )\nDrug &lt;- read_csv(\"data/thai_drug_offenses_2017_2022.csv\") %&gt;%\n  mutate(\n    province_en = recode(province_en, \n                         \"buogkan\" = \"Bueng Kan\",\n                         \"Loburi\" = \"Lop Buri\")\n  )\n\nRows: 7392 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): types_of_drug_offenses, province_th, province_en\ndbl (2): fiscal_year, no_cases\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nmerged_data &lt;- left_join(\n  thai_geo_projected,\n  Drug,\n  by = c(\"ADM1_EN\" = \"province_en\")\n) %&gt;%\n  select(\n    ADM1_EN,\n    ADM1_PCODE,\n    Shape_leng,\n    Shape_Area,\n    fiscal_year,\n    types_of_drug_offenses,\n    no_cases,\n    geometry\n  )\n\nrm(Drug, thai_geo, thai_geo_projected)\ndrug_use_cases_data &lt;- merged_data %&gt;%\n  filter(fiscal_year == \"2021\", types_of_drug_offenses == \"drug_use_cases\")\nrm(merged_data)\nneighbors_drug_use &lt;- st_contiguity(drug_use_cases_data, queen = TRUE)\n\nWarning in spdep::poly2nb(geometry, queen = queen, ...): some observations have no neighbours;\nif this seems unexpected, try increasing the snap argument.\n\n\nWarning in spdep::poly2nb(geometry, queen = queen, ...): neighbour object has 2 sub-graphs;\nif this sub-graph count seems unexpected, try increasing the snap argument.\n\nsummary(neighbors_drug_use)\n\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n67\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  8  9 \n 1  1  5 17 15 17 10  5  4  2 \n1 least connected region:\n14 with 1 link\n2 most connected regions:\n29 51 with 9 links\ncentroids_drug_use &lt;- st_centroid(drug_use_cases_data)\n\nWarning: st_centroid assumes attributes are constant over geometries\n\nneighbors_drug_use &lt;- st_knn(centroids_drug_use, k = 5)\nweights_drug_use &lt;- st_weights(neighbors_drug_use, style = \"W\")\nlisa_drug_use &lt;- drug_use_cases_data %&gt;% \n  mutate(local_moran = local_moran(\n    no_cases,\n    neighbors_drug_use,\n    weights_drug_use, \n    nsim = 99),\n    .before = 1) %&gt;%\n  unnest(local_moran)\nlisa_drug_use\n\nSimple feature collection with 77 features and 19 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 325178.8 ymin: 620860.6 xmax: 1213656 ymax: 2263241\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 77 × 20\n         ii       eii  var_ii     z_ii   p_ii p_ii_sim p_folded_sim skewness\n      &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -1.34    -0.266    1.44    -0.892   0.372      0.36         0.18    0.829\n 2 -0.120   -0.000370 0.00805 -1.33    0.183      0.26         0.13   -0.530\n 3 -0.00179 -0.00321  0.00132  0.0392  0.969      0.96         0.48    0.998\n 4 -0.194    0.00287  0.0505  -0.874   0.382      0.42         0.21   -0.280\n 5 -0.0593  -0.0615   0.0565   0.00932 0.993      0.96         0.48   -0.681\n 6  0.693   -0.0940   0.176    1.88    0.0607     0.04         0.02   -0.608\n 7  0.365    0.0137   0.0470   1.62    0.105      0.04         0.02   -0.810\n 8  0.695   -0.0501   0.215    1.61    0.108      0.02         0.01   -0.918\n 9  0.805   -0.00148  0.157    2.03    0.0421     0.02         0.01   -0.263\n10  0.412   -0.00233  0.125    1.17    0.242      0.18         0.09   -0.821\n# ℹ 67 more rows\n# ℹ 12 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   ADM1_EN &lt;chr&gt;, ADM1_PCODE &lt;chr&gt;, Shape_leng [m], Shape_Area [m^2],\n#   fiscal_year &lt;dbl&gt;, types_of_drug_offenses &lt;chr&gt;, no_cases &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [m]&gt;"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02_3.html#local-getis-ord-gi-for-hot-spot-and-cold-spot-area-analysis",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02_3.html#local-getis-ord-gi-for-hot-spot-and-cold-spot-area-analysis",
    "title": "Take Home Exercise 2 Part 3",
    "section": "9.1 Local Getis-Ord Gi* for Hot Spot and Cold Spot Area Analysis",
    "text": "9.1 Local Getis-Ord Gi* for Hot Spot and Cold Spot Area Analysis\nI tried to analyze the spatial clustering of drug use cases using the Local Getis-Ord Gi* statistic. This analysis identifies specific areas that are statistically significant hotspots or coldspots, representing areas of unusually high or low concentrations of the phenomena.\n\n9.1.1 Hotspot and Coldspot Analysis for Drug Use Cases\nI first calculated the spatial weights using inverse distance weighting (IDW) to account for proximity between areas. I then applied the local Getis-Ord Gi* permutation test to detect significant hot and cold spots for drug use cases.\n\nwm_idw_drug_use &lt;- lisa_drug_use %&gt;%\n  mutate(nb = include_self(st_contiguity(geometry)),\n         wt = st_inverse_distance(nb, geometry, scale = 1, alpha = 1),\n         .before = 1)\n\n! Polygon provided. Using point on surface.\n\n\nWarning: There were 2 warnings in `stopifnot()`.\nThe first warning was:\nℹ In argument: `nb = include_self(st_contiguity(geometry))`.\nCaused by warning in `spdep::poly2nb()`:\n! some observations have no neighbours;\nif this seems unexpected, try increasing the snap argument.\nℹ Run `dplyr::last_dplyr_warnings()` to see the 1 remaining warning.\n\n\nAfter calculating the spatial weights, I computed the local Gi* for drug use cases:\n\nHCSA_drug_use &lt;- wm_idw_drug_use %&gt;% \n  mutate(local_Gi_star = local_gstar_perm(no_cases, neighbors_drug_use, weights_drug_use, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_Gi_star, names_sep = \"_\") %&gt;%\n  mutate(label = paste(ADM1_EN))\n\nNext, I visualized the resulting hot and cold spots for drug use cases. The color palette ranges from coldspots (blue) to hotspots (red), providing a clear view of spatial patterns.\n\ntmap_mode(\"plot\")  \n\ntmap mode set to plotting\n\ntm_shape(HCSA_drug_use) +\n  tm_fill(\"local_Gi_star_gi_star\",  # Use the actual name of the 'gi_star' column\n          palette = c(\"#57bfc0\", \"#7977f3\", \"#f8d673\", \"#f8b675\", \"#f67774\"),\n          title = \"Gi*\",\n          midpoint = 0) +\n  tm_borders(col = \"black\", alpha = 0.6) +\n  tm_layout(main.title = \"Hotspots & Coldspots of Drug Use Cases\",\n            main.title.position = \"center\",\n            main.title.size = 1.7,\n            main.title.fontface = \"bold\",\n            legend.title.size = 1.8,\n            legend.text.size = 1.3,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"8star\", text.size = 1.5, size = 3, position = c(\"RIGHT\", \"TOP\")) +\n  tm_scale_bar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 1.2) +\n  tm_grid(labels.size = 1, alpha = 0.2)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\nLegend labels were too wide. The labels have been resized to 0.65, 0.65, 0.72, 0.81, 0.81, 0.81. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n\n\n\n\n\n\n\n\n\nI filtered the dataset to focus on the statistically significant hot and cold spots (p &lt; 0.05).\n\nHCSA_sig_drug_use &lt;- HCSA_drug_use %&gt;% filter(p_ii_sim &lt; 0.05)\n\nThe following map provides an interactive view of the significant hot and cold spots:\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\ntm_shape(HCSA_drug_use) +\n  tm_polygons(id = \"label\") +\ntm_shape(HCSA_sig_drug_use) +\n  tm_fill(\"local_Gi_star_gi_star\",\n          palette = c(\"#57bfc0\", \"#7977f3\", \"#f8d673\", \"#f8b675\", \"#f67774\"),\n          title = \"Gi*\",\n          midpoint = 0,\n          id = \"label\") +\n  tm_borders(col = \"black\", alpha = 0.6)\n\n\n\n\n\n\n\n9.1.2 Identifying the Most Significant Hotspots and Coldspots for Drug Use Cases\nIn this step, I identified the three most significant hotspots and three most significant coldspots for drug use cases based on their Gi* values. These regions are where clustering of drug use cases is at its highest (hotspots) or lowest (coldspots), providing critical insights into geographical patterns of drug-related offenses.\nFirst, I filtered for the most significant areas using Gi* values:\n\nset.seed(123)\nthree_hotspots_drug_use &lt;- (head((HCSA_sig_drug_use[HCSA_sig_drug_use$local_Gi_star_gi_star &gt; -2, ]), 3))$label\n\nthree_coldspots_drug_use &lt;- (head((HCSA_sig_drug_use[HCSA_sig_drug_use$local_Gi_star_gi_star &lt; -2, ]), 3))$label\n\nThe two most significant hotspots are:\n\nthree_hotspots_drug_use\n\n[1] \"Ang Thong\" \"Lop Buri\"  \"Sing Buri\"\n\n\nThe two most significant coldspots are:\n\nthree_coldspots_drug_use\n\n[1] \"Chai Nat\"     \"Nakhon Sawan\" \"Uthai Thani\" \n\n\nNext, I filtered the original dataset to highlight only these key areas:\n\nHCSA_three_hotspots_drug_use &lt;- HCSA_sig_drug_use %&gt;% filter(label %in% three_hotspots_drug_use)\nHCSA_three_coldspots_drug_use &lt;- HCSA_sig_drug_use %&gt;% filter(label %in% three_coldspots_drug_use)\n\n\n9.1.2.1 Visualizing Hotspots\nI created a map to visualize the two most significant hotspots for drug use cases, where the areas with the strongest clustering of high values are highlighted:\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(HCSA_drug_use) +\n  tm_polygons() +\ntm_shape(HCSA_three_hotspots_drug_use) +\n  tm_fill(\"local_Gi_star_gi_star\", palette = \"#f67774\") +\n  tm_borders(col = \"black\", alpha = 0.6) +\n  tm_text(\"label\", auto.placement = TRUE) +\n  tm_layout(main.title = \"Two Most Significant Hotspots of Drug Use Cases\",\n            main.title.position = \"center\",\n            main.title.size = 1.7,\n            main.title.fontface = \"bold\",\n            legend.show = FALSE,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"8star\", text.size = 1.5, size = 3, position = c(\"RIGHT\", \"TOP\")) +\n  tm_scale_bar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 1.2) +\n  tm_grid(labels.size = 1, alpha = 0.2)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\n\n\n\n\n\n9.1.2.2 Visualizing Coldspots\nSimilarly, I visualized the two most significant coldspots, which highlight areas with the lowest clustering of drug use cases:\n\ntm_shape(HCSA_drug_use) +\n  tm_polygons() +\ntm_shape(HCSA_three_coldspots_drug_use) +\n  tm_fill(\"local_Gi_star_gi_star\", palette = \"#57bfc0\") +\n  tm_borders(col = \"black\", alpha = 0.6) +\n  tm_text(\"label\", auto.placement = TRUE) +\n  tm_layout(main.title = \"Two Most Significant Coldspots of Drug Use Cases\",\n            main.title.position = \"center\",\n            main.title.size = 1.7,\n            main.title.fontface = \"bold\",\n            legend.show = FALSE,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"8star\", text.size = 1.5, size = 3, position = c(\"RIGHT\", \"TOP\")) +\n  tm_scale_bar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 1.2) +\n  tm_grid(labels.size = 1, alpha = 0.2)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them)."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02_3.html#global-spatial-autocorrelation-analysis",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02_3.html#global-spatial-autocorrelation-analysis",
    "title": "Take Home Exercise 2 Part 3",
    "section": "Global Spatial Autocorrelation Analysis",
    "text": "Global Spatial Autocorrelation Analysis\nThe global measures of spatial autocorrelation, including Moran’s I and Geary’s C, indicated that both drug use cases and suspects in drug use cases are not randomly distributed across Thai provinces. The positive Moran’s I values suggest a significant level of spatial clustering, where provinces with high or low levels of drug use cases or suspects tend to be surrounded by provinces with similar characteristics.\n\nMoran’s I revealed significant clustering of similar values, with provinces exhibiting high drug-related cases surrounded by other high-value provinces and similarly for low-value provinces. This was confirmed through both the observed statistic and Monte Carlo permutation tests.\nGeary’s C, being more sensitive to local variations, complemented Moran’s I by identifying finer details of spatial autocorrelation, such as the presence of spatial outliers or smaller clusters that may have been overlooked in a global analysis."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02_3.html#local-spatial-autocorrelation-lisa-and-hotspot-analysis",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02_3.html#local-spatial-autocorrelation-lisa-and-hotspot-analysis",
    "title": "Take Home Exercise 2 Part 3",
    "section": "Local Spatial Autocorrelation (LISA) and Hotspot Analysis",
    "text": "Local Spatial Autocorrelation (LISA) and Hotspot Analysis\nThe Local Moran’s I (LISA) analysis provided a more granular view, revealing specific provinces where clustering of drug use cases is statistically significant. Through LISA, we classified provinces into high-high clusters (hotspots), low-low clusters (coldspots), and identified outliers where low values are surrounded by high values (low-high) and vice versa (high-low).\n\nHotspots: Provinces such as Amnat Charoen and Si Sa Ket were identified as high-high clusters for both drug use cases, indicating regions where the incidence of drug-related activities is highly concentrated. These areas could be prioritized for targeted interventions or resources.\nColdspots: Provinces like Kamphaeng Phet and Nakhon Sawan formed low-low clusters, indicating regions where drug-related activities are significantly less concentrated. This might suggest successful prevention strategies or simply less drug-related activity in these regions.\nOutliers: Notable outliers such as Krabi, which exhibited a low-high pattern, indicated that this province has lower-than-expected drug use cases but is surrounded by higher-value provinces. These outliers can be critical for identifying areas that require further investigation to understand local factors influencing drug activity."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02_3.html#local-getis-ord-gi-and-emerging-hot-spots-analysis-ehsa",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02_3.html#local-getis-ord-gi-and-emerging-hot-spots-analysis-ehsa",
    "title": "Take Home Exercise 2 Part 3",
    "section": "Local Getis-Ord Gi* and Emerging Hot Spots Analysis (EHSA)",
    "text": "Local Getis-Ord Gi* and Emerging Hot Spots Analysis (EHSA)\nThe Local Getis-Ord Gi* statistic provided additional insights into clustering by identifying specific provinces where high or low values are spatially concentrated. This analysis complemented LISA by offering a more robust identification of statistically significant hotspots and coldspots for drug-related activities.\n\nHotspots for Drug Use Cases: Provinces like Ubon Ratchathani and Si Sa Ket were identified as the two most significant hotspots for drug use cases. These regions demonstrate a strong spatial concentration of high values, making them critical focal points for policy interventions.\nColdspots for Drug Use Cases: Conversely, provinces like Kamphaeng Phet and Nakhon Sawan were highlighted as the two most significant coldspots, showcasing areas with significantly low levels of drug use cases.\n\nKey Findings and Policy Implications\n\nConcentration of Drug-Related Activity in Specific Regions: The consistent identification of provinces such as Amnat Charoen, Si Sa Ket, and Ubon Ratchathani as hotspots suggests that these areas are major centers of drug-related activities. These provinces should be prioritized for targeted interventions such as increased law enforcement presence, drug prevention programs, and community outreach initiatives.\nNeed for Tailored Strategies in Coldspot Regions: The low-low clusters and coldspots, such as Kamphaeng Phet and Nakhon Sawan, indicate regions with lower levels of drug-related activity. While these areas may not require immediate intervention, understanding the factors that contribute to their low rates could inform successful drug prevention strategies in other parts of the country.\nEmerging Trends in Outlier Regions: The presence of spatial outliers, particularly provinces like Krabi (low-high pattern), underscores the importance of localized factors that may influence drug use patterns. Understanding these outliers can help develop tailored strategies that address unique local conditions, such as regional socioeconomic factors, infrastructure, or law enforcement practices."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02_3.html#conclusion",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02_3.html#conclusion",
    "title": "Take Home Exercise 2 Part 3",
    "section": "Conclusion",
    "text": "Conclusion\nThe application of spatial autocorrelation techniques, including global Moran’s I, Geary’s C, Local Moran’s I (LISA), and Local Getis-Ord Gi*, has allowed for a detailed understanding of the spatial distribution of drug-related activities in Thailand. This study has demonstrated that drug use cases and suspects are not randomly distributed, but instead, form distinct clusters of high and low activity across provinces.\nThe identification of hotspots and coldspots provides valuable insights for policymakers, allowing for the allocation of resources and the implementation of targeted interventions in regions where drug-related activity is most concentrated. Furthermore, the detection of spatial outliers highlights the need for localized strategies that consider unique regional factors.\nBy leveraging these spatial analysis techniques, authorities can develop data-driven strategies that effectively address the drug problem in Thailand, focusing on prevention, enforcement, and rehabilitation in areas where they are most needed."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html",
    "title": "Hands On Exercise 7",
    "section": "",
    "text": "In this hands-on exercise, I gained practical experience in delineating homogeneous regions using geographically referenced multivariate data. The analysis consists of two main techniques: hierarchical cluster analysis and spatially constrained cluster analysis.\n\n\nBy completing this exercise, I learned how to:\n\nConvert GIS polygon data into an R simple feature data.frame using appropriate functions from the sf package.\nTransform the simple feature data.frame into an R SpatialPolygonDataFrame object using relevant functions from the sf package.\nPerform cluster analysis using hclust() from Base R.\nExecute spatially constrained cluster analysis with skater() from Base R.\nVisualize the analysis output through the ggplot2 and tmap packages.\n\n\n\n\n\n\nIn spatial policy and geobusiness, it is common to divide markets or planning areas into homogeneous regions using multivariate data. In this exercise, I focused on dividing Shan State in Myanmar into homogeneous regions using several Information and Communication Technology (ICT) indicators, including Radio, Television, Landline Phone, Mobile Phone, Computer, and Internet at home.\n\n\n\n\nIn the code provided, I installed and loaded several R packages using pacman::p_load(), which efficiently manages package installation and loading:\n\npacman::p_load(spdep, tmap, sf, ClustGeo, \n               ggpubr, cluster, factoextra, NbClust,\n               heatmaply, corrplot, psych, tidyverse, GGally)\n\n\n\n\n\n\nI used the st_read() function from the sf package to read geospatial data for Myanmar township boundaries. I filtered the data to only include three regions of Shan State (East, North, and South) and selected columns 2 to 7. The resultant geospatial data was stored in shan_sf:\n\nshan_sf &lt;- st_read(dsn = \"data/geospatial\", \n                   layer = \"myanmar_township_boundaries\") %&gt;%\n  filter(ST %in% c(\"Shan (East)\", \"Shan (North)\", \"Shan (South)\")) %&gt;%\n  select(c(2:7))\n\nReading layer `myanmar_township_boundaries' from data source \n  `C:\\EasonXu-HY99\\IS415\\Hands-on_Ex\\Hands-on_Ex07\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.17275 ymin: 9.671252 xmax: 101.1699 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\nThe dataset is then displayed using the following functions:\n\nshan_sf\n\nSimple feature collection with 55 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 96.15107 ymin: 19.29932 xmax: 101.1699 ymax: 24.15907\nGeodetic CRS:  WGS 84\nFirst 10 features:\n             ST ST_PCODE       DT   DT_PCODE        TS  TS_PCODE\n1  Shan (North)   MMR015  Mongmit MMR015D008   Mongmit MMR015017\n2  Shan (South)   MMR014 Taunggyi MMR014D001   Pindaya MMR014006\n3  Shan (South)   MMR014 Taunggyi MMR014D001   Ywangan MMR014007\n4  Shan (South)   MMR014 Taunggyi MMR014D001  Pinlaung MMR014009\n5  Shan (North)   MMR015  Mongmit MMR015D008    Mabein MMR015018\n6  Shan (South)   MMR014 Taunggyi MMR014D001     Kalaw MMR014005\n7  Shan (South)   MMR014 Taunggyi MMR014D001     Pekon MMR014010\n8  Shan (South)   MMR014 Taunggyi MMR014D001  Lawksawk MMR014008\n9  Shan (North)   MMR015  Kyaukme MMR015D003 Nawnghkio MMR015013\n10 Shan (North)   MMR015  Kyaukme MMR015D003   Kyaukme MMR015012\n                         geometry\n1  MULTIPOLYGON (((96.96001 23...\n2  MULTIPOLYGON (((96.7731 21....\n3  MULTIPOLYGON (((96.78483 21...\n4  MULTIPOLYGON (((96.49518 20...\n5  MULTIPOLYGON (((96.66306 24...\n6  MULTIPOLYGON (((96.49518 20...\n7  MULTIPOLYGON (((97.14738 19...\n8  MULTIPOLYGON (((96.94981 22...\n9  MULTIPOLYGON (((96.75648 22...\n10 MULTIPOLYGON (((96.95498 22...\n\n\n\nglimpse(shan_sf)\n\nRows: 55\nColumns: 7\n$ ST       &lt;chr&gt; \"Shan (North)\", \"Shan (South)\", \"Shan (South)\", \"Shan (South)…\n$ ST_PCODE &lt;chr&gt; \"MMR015\", \"MMR014\", \"MMR014\", \"MMR014\", \"MMR015\", \"MMR014\", \"…\n$ DT       &lt;chr&gt; \"Mongmit\", \"Taunggyi\", \"Taunggyi\", \"Taunggyi\", \"Mongmit\", \"Ta…\n$ DT_PCODE &lt;chr&gt; \"MMR015D008\", \"MMR014D001\", \"MMR014D001\", \"MMR014D001\", \"MMR0…\n$ TS       &lt;chr&gt; \"Mongmit\", \"Pindaya\", \"Ywangan\", \"Pinlaung\", \"Mabein\", \"Kalaw…\n$ TS_PCODE &lt;chr&gt; \"MMR015017\", \"MMR014006\", \"MMR014007\", \"MMR014009\", \"MMR01501…\n$ geometry &lt;MULTIPOLYGON [°]&gt; MULTIPOLYGON (((96.96001 23..., MULTIPOLYGON (((…\n\n\n\n\n\nThe aspatial dataset, which contains ICT-related data for Shan State, is imported using read_csv():\n\nict &lt;- read_csv (\"data/aspatial/Shan-ICT.csv\")\n\nRows: 55 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): District Pcode, District Name, Township Pcode, Township Name\ndbl (7): Total households, Radio, Television, Land line phone, Mobile phone,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nsummary(ict)\n\n District Pcode     District Name      Township Pcode     Township Name     \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n Total households     Radio         Television    Land line phone \n Min.   : 3318    Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711    1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685    Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369    Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471    3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604    Max.   :30176   Max.   :62388   Max.   :6736.0  \n  Mobile phone      Computer      Internet at home\n Min.   :  150   Min.   :  20.0   Min.   :   8.0  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0  \n Median : 3559   Median : 244.0   Median : 316.0  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0  \n\n\n\n\n\nI created new variables using mutate(), calculating the proportion of households with each ICT service (per 1000 households) for Radio, Television, Landline Phone, Mobile Phone, Computer, and Internet:\n\nict_derived &lt;- ict %&gt;%\n  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %&gt;%\n  mutate(`TV_PR` = `Television`/`Total households`*1000) %&gt;%\n  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %&gt;%\n  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %&gt;%\n  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %&gt;%\n  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %&gt;%\n  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,\n         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,\n         `TT_HOUSEHOLDS`=`Total households`,\n         `RADIO`=`Radio`, `TV`=`Television`, \n         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,\n         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) \n\n\nsummary(ict_derived)\n\n   DT_PCODE              DT              TS_PCODE              TS           \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n TT_HOUSEHOLDS       RADIO             TV           LLPHONE      \n Min.   : 3318   Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711   1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685   Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369   Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471   3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604   Max.   :30176   Max.   :62388   Max.   :6736.0  \n     MPHONE         COMPUTER         INTERNET         RADIO_PR     \n Min.   :  150   Min.   :  20.0   Min.   :   8.0   Min.   : 21.05  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0   1st Qu.:138.95  \n Median : 3559   Median : 244.0   Median : 316.0   Median :210.95  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2   Mean   :215.68  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5   3rd Qu.:268.07  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0   Max.   :484.52  \n     TV_PR         LLPHONE_PR       MPHONE_PR       COMPUTER_PR    \n Min.   :116.0   Min.   :  2.78   Min.   : 36.42   Min.   : 3.278  \n 1st Qu.:450.2   1st Qu.: 22.84   1st Qu.:190.14   1st Qu.:11.832  \n Median :517.2   Median : 37.59   Median :305.27   Median :18.970  \n Mean   :509.5   Mean   : 51.09   Mean   :314.05   Mean   :24.393  \n 3rd Qu.:606.4   3rd Qu.: 69.72   3rd Qu.:428.43   3rd Qu.:29.897  \n Max.   :842.5   Max.   :181.49   Max.   :735.43   Max.   :92.402  \n  INTERNET_PR     \n Min.   :  1.041  \n 1st Qu.:  8.617  \n Median : 22.829  \n Mean   : 30.644  \n 3rd Qu.: 41.281  \n Max.   :117.985  \n\n\n\n\n\n\n\n\nI used histograms and boxplots to visualize the distribution of the ICT indicators across the regions. For example, I generated a histogram for radio ownership per household:\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\n\n\n\n\n\n\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\n\n\n\n\n\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\n\n\n\n\n\n\n\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\n\n\n\n\n\nradio &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ntv &lt;- ggplot(data=ict_derived, \n             aes(x= `TV_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nllphone &lt;- ggplot(data=ict_derived, \n             aes(x= `LLPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nmphone &lt;- ggplot(data=ict_derived, \n             aes(x= `MPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ncomputer &lt;- ggplot(data=ict_derived, \n             aes(x= `COMPUTER_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ninternet &lt;- ggplot(data=ict_derived, \n             aes(x= `INTERNET_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\nggarrange(radio, tv, llphone, mphone, computer, internet, \n          ncol = 3, \n          nrow = 2)\n\n\n\n\n\n\n\n\nI applied a similar approach to plot the boxplots and histograms for other ICT indicators.\n\n\n\nI created a choropleth map by merging the spatial data (shan_sf) with the aspatial ICT data (ict_derived) using the left_join() function, and then wrote the updated shan_sf object to an RDS file:\n\nshan_sf &lt;- left_join(shan_sf, \n                     ict_derived, by=c(\"TS_PCODE\"=\"TS_PCODE\"))\n  \nwrite_rds(shan_sf, \"data/rds/shan_sf.rds\")\n\n\nshan_sf &lt;- read_rds(\"data/rds/shan_sf.rds\")\n\n\nqtm(shan_sf, \"RADIO_PR\")\n\n\n\n\n\n\n\n\n\nTT_HOUSEHOLDS.map &lt;- tm_shape(shan_sf) + \n  tm_fill(col = \"TT_HOUSEHOLDS\",\n          n = 5,\n          style = \"jenks\", \n          title = \"Total households\") + \n  tm_borders(alpha = 0.5) \n\nRADIO.map &lt;- tm_shape(shan_sf) + \n  tm_fill(col = \"RADIO\",\n          n = 5,\n          style = \"jenks\",\n          title = \"Number Radio \") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(TT_HOUSEHOLDS.map, RADIO.map,\n             asp=NA, ncol=2)\n\n\n\n\n\n\n\n\n\ntm_shape(shan_sf) +\n    tm_polygons(c(\"TT_HOUSEHOLDS\", \"RADIO_PR\"),\n                style=\"jenks\") +\n    tm_facets(sync = TRUE, ncol = 2) +\n  tm_legend(legend.position = c(\"right\", \"bottom\"))+\n  tm_layout(outer.margins=0, asp=0)\n\n\n\n\n\n\n\n\n\n\n\nI calculated the correlation matrix for selected ICT indicators and created a mixed-type correlation plot using corrplot.mixed(). The correlation between the variables is represented with ellipses in the lower half and numeric values in the upper half.\n\ncluster_vars.cor = cor(ict_derived[,12:17])\ncorrplot.mixed(cluster_vars.cor,\n         lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\n\n\n\nI extracted specific columns (township names and ICT indicators) from the shan_sf dataset, and then displayed the first 10 rows. This dataset contains the variables required for clustering.\n\ncluster_vars &lt;- shan_sf %&gt;%\n  st_set_geometry(NULL) %&gt;%\n  select(\"TS.x\", \"RADIO_PR\", \"TV_PR\", \"LLPHONE_PR\", \"MPHONE_PR\", \"COMPUTER_PR\")\nhead(cluster_vars,10)\n\n        TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1    Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\n2    Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\n3    Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\n4   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\n5     Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\n6      Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\n7      Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\n8   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\n9  Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\n10   Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\n\nrow.names(cluster_vars) &lt;- cluster_vars$\"TS.x\"\nhead(cluster_vars,10)\n\n               TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit     Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya     Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan     Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\nMabein       Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw         Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\nPekon         Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme     Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\n\n\n\nI selected only the columns representing the ICT indicators and saved the resulting data frame to an RDS file for future use. I then reloaded the file to proceed with further analysis.\n\nshan_ict &lt;- select(cluster_vars, c(2:6))\nhead(shan_ict, 10)\n\n          RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit   286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya   417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan   484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung  231.6499 541.7189   28.54454  249.4903    13.76255\nMabein    449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw     280.7624 611.6204   42.06478  408.7951    29.63160\nPekon     318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk  387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme   210.9548 601.1773   39.58267  372.4930    30.94709\n\nwrite_rds(shan_ict, \"data/rds/shan_ict.rds\")\n\n\nshan_ict &lt;- read_rds(\"data/rds/shan_ict.rds\")\n\n\n\n\nI standardized the ICT data using Min-Max normalization (normalize) and Z-score standardization (scale). I also displayed summary statistics for both the normalized and Z-score standardized data.\n\nshan_ict.std &lt;- normalize(shan_ict)\nsummary(shan_ict.std)\n\n    RADIO_PR          TV_PR          LLPHONE_PR       MPHONE_PR     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.2544   1st Qu.:0.4600   1st Qu.:0.1123   1st Qu.:0.2199  \n Median :0.4097   Median :0.5523   Median :0.1948   Median :0.3846  \n Mean   :0.4199   Mean   :0.5416   Mean   :0.2703   Mean   :0.3972  \n 3rd Qu.:0.5330   3rd Qu.:0.6750   3rd Qu.:0.3746   3rd Qu.:0.5608  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n  COMPUTER_PR     \n Min.   :0.00000  \n 1st Qu.:0.09598  \n Median :0.17607  \n Mean   :0.23692  \n 3rd Qu.:0.29868  \n Max.   :1.00000  \n\n\n\nshan_ict.z &lt;- scale(shan_ict)\ndescribe(shan_ict.z)\n\n            vars  n mean sd median trimmed  mad   min  max range  skew kurtosis\nRADIO_PR       1 55    0  1  -0.04   -0.06 0.94 -1.85 2.55  4.40  0.48    -0.27\nTV_PR          2 55    0  1   0.05    0.04 0.78 -2.47 2.09  4.56 -0.38    -0.23\nLLPHONE_PR     3 55    0  1  -0.33   -0.15 0.68 -1.19 3.20  4.39  1.37     1.49\nMPHONE_PR      4 55    0  1  -0.05   -0.06 1.01 -1.58 2.40  3.98  0.48    -0.34\nCOMPUTER_PR    5 55    0  1  -0.26   -0.18 0.64 -1.03 3.31  4.34  1.80     2.96\n              se\nRADIO_PR    0.13\nTV_PR       0.13\nLLPHONE_PR  0.13\nMPHONE_PR   0.13\nCOMPUTER_PR 0.13\n\n\n\n\n\nI compared histograms of the raw ICT values and their Min-Max and Z-score standardized counterparts using ggplot2 and arranged them side by side.\n\nr &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df &lt;- as.data.frame(shan_ict.std)\ns &lt;- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df &lt;- as.data.frame(shan_ict.z)\nz &lt;- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\n\n\n\nr &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df &lt;- as.data.frame(shan_ict.std)\ns &lt;- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df &lt;- as.data.frame(shan_ict.z)\nz &lt;- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\n\n\n\n\n\nI computed the Euclidean distance matrix for the ICT data and performed hierarchical clustering using the Ward method. I then visualized the dendrogram.\n\nproxmat &lt;- dist(shan_ict, method = 'euclidean')\n\n\nproxmat\n\n             Mongmit   Pindaya   Ywangan  Pinlaung    Mabein     Kalaw\nPindaya    171.86828                                                  \nYwangan    381.88259 257.31610                                        \nPinlaung    57.46286 208.63519 400.05492                              \nMabein     263.37099 313.45776 529.14689 312.66966                    \nKalaw      160.05997 302.51785 499.53297 181.96406 198.14085          \nPekon       59.61977 117.91580 336.50410  94.61225 282.26877 211.91531\nLawksawk   140.11550 204.32952 432.16535 192.57320 130.36525 140.01101\nNawnghkio   89.07103 180.64047 377.87702 139.27495 204.63154 127.74787\nKyaukme    144.02475 311.01487 505.89191 139.67966 264.88283  79.42225\nMuse       563.01629 704.11252 899.44137 571.58335 453.27410 412.46033\nLaihka     141.87227 298.61288 491.83321 101.10150 345.00222 197.34633\nMongnai    115.86190 258.49346 422.71934  64.52387 358.86053 200.34668\nMawkmai    434.92968 437.99577 397.03752 398.11227 693.24602 562.59200\nKutkai      97.61092 212.81775 360.11861  78.07733 340.55064 204.93018\nMongton    192.67961 283.35574 361.23257 163.42143 425.16902 267.87522\nMongyai    256.72744 287.41816 333.12853 220.56339 516.40426 386.74701\nMongkaing  503.61965 481.71125 364.98429 476.29056 747.17454 625.24500\nLashio     251.29457 398.98167 602.17475 262.51735 231.28227 106.69059\nMongpan    193.32063 335.72896 483.68125 192.78316 301.52942 114.69105\nMatman     401.25041 354.39039 255.22031 382.40610 637.53975 537.63884\nTachileik  529.63213 635.51774 807.44220 555.01039 365.32538 373.64459\nNarphan    406.15714 474.50209 452.95769 371.26895 630.34312 463.53759\nMongkhet   349.45980 391.74783 408.97731 305.86058 610.30557 465.52013\nHsipaw     118.18050 245.98884 388.63147  76.55260 366.42787 212.36711\nMonghsat   214.20854 314.71506 432.98028 160.44703 470.48135 317.96188\nMongmao    242.54541 402.21719 542.85957 217.58854 384.91867 195.18913\nNansang    104.91839 275.44246 472.77637  85.49572 287.92364 124.30500\nLaukkaing  568.27732 726.85355 908.82520 563.81750 520.67373 427.77791\nPangsang   272.67383 428.24958 556.82263 244.47146 418.54016 224.03998\nNamtu      179.62251 225.40822 444.66868 170.04533 366.16094 307.27427\nMonghpyak  177.76325 221.30579 367.44835 222.20020 212.69450 167.08436\nKonkyan    403.39082 500.86933 528.12533 365.44693 613.51206 444.75859\nMongping   265.12574 310.64850 337.94020 229.75261 518.16310 375.64739\nHopong     136.93111 223.06050 352.85844  98.14855 398.00917 264.16294\nNyaungshwe  99.38590 216.52463 407.11649 138.12050 210.21337  95.66782\nHsihseng   131.49728 172.00796 342.91035 111.61846 381.20187 287.11074\nMongla     384.30076 549.42389 728.16301 372.59678 406.09124 260.26411\nHseni      189.37188 337.98982 534.44679 204.47572 213.61240  38.52842\nKunlong    224.12169 355.47066 531.63089 194.76257 396.61508 273.01375\nHopang     281.05362 443.26362 596.19312 265.96924 368.55167 185.14704\nNamhkan    386.02794 543.81859 714.43173 382.78835 379.56035 246.39577\nKengtung   246.45691 385.68322 573.23173 263.48638 219.47071  88.29335\nLangkho    164.26299 323.28133 507.78892 168.44228 253.84371  67.19580\nMonghsu    109.15790 198.35391 340.42789  80.86834 367.19820 237.34578\nTaunggyi   399.84278 503.75471 697.98323 429.54386 226.24011 252.26066\nPangwaun   381.51246 512.13162 580.13146 356.37963 523.44632 338.35194\nKyethi     202.92551 175.54012 287.29358 189.47065 442.07679 360.17247\nLoilen     145.48666 293.61143 469.51621  91.56527 375.06406 217.19877\nManton     430.64070 402.42888 306.16379 405.83081 674.01120 560.16577\nMongyang   309.51302 475.93982 630.71590 286.03834 411.88352 233.56349\nKunhing    173.50424 318.23811 449.67218 141.58836 375.82140 197.63683\nMongyawng  214.21738 332.92193 570.56521 235.55497 193.49994 173.43078\nTangyan    195.92520 208.43740 324.77002 169.50567 448.59948 348.06617\nNamhsan    237.78494 228.41073 286.16305 214.33352 488.33873 385.88676\n               Pekon  Lawksawk Nawnghkio   Kyaukme      Muse    Laihka\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk   157.51129                                                  \nNawnghkio  113.15370  90.82891                                        \nKyaukme    202.12206 186.29066 157.04230                              \nMuse       614.56144 510.13288 533.68806 434.75768                    \nLaihka     182.23667 246.74469 211.88187 128.24979 526.65211          \nMongnai    151.60031 241.71260 182.21245 142.45669 571.97975 100.53457\nMawkmai    416.00669 567.52693 495.15047 512.02846 926.93007 429.96554\nKutkai     114.98048 224.64646 147.44053 170.93318 592.90743 144.67198\nMongton    208.14888 311.07742 225.81118 229.28509 634.71074 212.07320\nMongyai    242.52301 391.26989 319.57938 339.27780 763.91399 264.13364\nMongkaing  480.23965 625.18712 546.69447 586.05094 995.66496 522.96309\nLashio     303.80011 220.75270 230.55346 129.95255 313.15288 238.64533\nMongpan    243.30037 228.54223 172.84425 110.37831 447.49969 210.76951\nMatman     368.25761 515.39711 444.05061 505.52285 929.11283 443.25453\nTachileik  573.39528 441.82621 470.45533 429.15493 221.19950 549.08985\nNarphan    416.84901 523.69580 435.59661 420.30003 770.40234 392.32592\nMongkhet   342.08722 487.41102 414.10280 409.03553 816.44931 324.97428\nHsipaw     145.37542 249.35081 176.09570 163.95741 591.03355 128.42987\nMonghsat   225.64279 352.31496 289.83220 253.25370 663.76026 158.93517\nMongmao    293.70625 314.64777 257.76465 146.09228 451.82530 185.99082\nNansang    160.37607 188.78869 151.13185  60.32773 489.35308  78.78999\nLaukkaing  624.82399 548.83928 552.65554 428.74978 149.26996 507.39700\nPangsang   321.81214 345.91486 287.10769 175.35273 460.24292 214.19291\nNamtu      165.02707 260.95300 257.52713 270.87277 659.16927 185.86794\nMonghpyak  190.93173 142.31691  93.03711 217.64419 539.43485 293.22640\nKonkyan    421.48797 520.31264 439.34272 393.79911 704.86973 351.75354\nMongping   259.68288 396.47081 316.14719 330.28984 744.44948 272.82761\nHopong     138.86577 274.91604 204.88286 218.84211 648.68011 157.48857\nNyaungshwe 139.31874 104.17830  43.26545 126.50414 505.88581 201.71653\nHsihseng   105.30573 257.11202 209.88026 250.27059 677.66886 175.89761\nMongla     441.20998 393.18472 381.40808 241.58966 256.80556 315.93218\nHseni      243.98001 171.50398 164.05304  81.20593 381.30567 204.49010\nKunlong    249.36301 318.30406 285.04608 215.63037 547.24297 122.68682\nHopang     336.38582 321.16462 279.84188 154.91633 377.44407 230.78652\nNamhkan    442.77120 379.41126 367.33575 247.81990 238.67060 342.43665\nKengtung   297.67761 209.38215 208.29647 136.23356 330.08211 258.23950\nLangkho    219.21623 190.30257 156.51662  51.67279 413.64173 160.94435\nMonghsu    113.84636 242.04063 170.09168 200.77712 633.21624 163.28926\nTaunggyi   440.66133 304.96838 344.79200 312.60547 250.81471 425.36916\nPangwaun   423.81347 453.02765 381.67478 308.31407 541.97887 351.78203\nKyethi     162.43575 317.74604 267.21607 328.14177 757.16745 255.83275\nLoilen     181.94596 265.29318 219.26405 146.92675 560.43400  59.69478\nManton     403.82131 551.13000 475.77296 522.86003 941.49778 458.30232\nMongyang   363.58788 363.37684 323.32123 188.59489 389.59919 229.71502\nKunhing    213.46379 278.68953 206.15773 145.00266 533.00162 142.03682\nMongyawng  248.43910 179.07229 220.61209 181.55295 422.37358 211.99976\nTangyan    167.79937 323.14701 269.07880 306.78359 736.93741 224.29176\nNamhsan    207.16559 362.84062 299.74967 347.85944 778.52971 273.79672\n             Mongnai   Mawkmai    Kutkai   Mongton   Mongyai Mongkaing\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai    374.50873                                                  \nKutkai      91.15307 364.95519                                        \nMongton    131.67061 313.35220 107.06341                              \nMongyai    203.23607 178.70499 188.94166 159.79790                    \nMongkaing  456.00842 133.29995 428.96133 365.50032 262.84016          \nLashio     270.86983 638.60773 289.82513 347.11584 466.36472 708.65819\nMongpan    178.09554 509.99632 185.18173 200.31803 346.39710 563.56780\nMatman     376.33870 147.83545 340.86349 303.04574 186.95158 135.51424\nTachileik  563.95232 919.38755 568.99109 608.76740 750.29555 967.14087\nNarphan    329.31700 273.75350 314.27683 215.97925 248.82845 285.65085\nMongkhet   275.76855 115.58388 273.91673 223.22828 104.98924 222.60577\nHsipaw      52.68195 351.34601  51.46282  90.69766 177.33790 423.77868\nMonghsat   125.25968 275.09705 154.32012 150.98053 127.35225 375.60376\nMongmao    188.29603 485.52853 204.69232 206.57001 335.61300 552.31959\nNansang     92.79567 462.41938 130.04549 199.58124 288.55962 542.16609\nLaukkaing  551.56800 882.51110 580.38112 604.66190 732.68347 954.11795\nPangsang   204.25746 484.14757 228.33583 210.77938 343.30638 548.40662\nNamtu      209.35473 427.95451 225.28268 308.71751 278.02761 525.04057\nMonghpyak  253.26470 536.71695 206.61627 258.04282 370.01575 568.21089\nKonkyan    328.82831 339.01411 310.60810 248.25265 287.87384 380.92091\nMongping   202.99615 194.31049 182.75266 119.86993  65.38727 257.18572\nHopong      91.53795 302.84362  73.45899 106.21031 124.62791 379.37916\nNyaungshwe 169.63695 502.99026 152.15482 219.72196 327.13541 557.32112\nHsihseng   142.36728 329.29477 128.21054 194.64317 162.27126 411.59788\nMongla     354.10985 686.88950 388.40984 411.06668 535.28615 761.48327\nHseni      216.81639 582.53670 229.37894 286.75945 408.23212 648.04408\nKunlong    202.92529 446.53763 204.54010 270.02165 299.36066 539.91284\nHopang     243.00945 561.24281 263.31986 273.50305 408.73288 626.17673\nNamhkan    370.05669 706.47792 392.48568 414.53594 550.62819 771.39688\nKengtung   272.28711 632.54638 279.19573 329.38387 460.39706 692.74693\nLangkho    174.67678 531.08019 180.51419 236.70878 358.95672 597.42714\nMonghsu     84.11238 332.07962  62.60859 107.04894 154.86049 400.71816\nTaunggyi   448.55282 810.74692 450.33382 508.40925 635.94105 866.21117\nPangwaun   312.13429 500.68857 321.80465 257.50434 394.07696 536.95736\nKyethi     210.50453 278.85535 184.23422 222.52947 137.79420 352.06533\nLoilen      58.41263 388.73386 131.56529 176.16001 224.79239 482.18190\nManton     391.54062 109.08779 361.82684 310.20581 195.59882  81.75337\nMongyang   260.39387 558.83162 285.33223 295.60023 414.31237 631.91325\nKunhing    110.55197 398.43973 108.84990 114.03609 238.99570 465.03971\nMongyawng  275.77546 620.04321 281.03383 375.22688 445.78964 700.98284\nTangyan    180.37471 262.66006 166.61820 198.88460 109.08506 348.56123\nNamhsan    218.10003 215.19289 191.32762 196.76188  77.35900 288.66231\n              Lashio   Mongpan    Matman Tachileik   Narphan  Mongkhet\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan    172.33279                                                  \nMatman     628.11049 494.81014                                        \nTachileik  311.95286 411.03849 890.12935                              \nNarphan    525.63854 371.13393 312.05193 760.29566                    \nMongkhet   534.44463 412.17123 203.02855 820.50164 217.28718          \nHsipaw     290.86435 179.52054 344.45451 576.18780 295.40170 253.80950\nMonghsat   377.86793 283.30992 313.59911 677.09508 278.21548 167.98445\nMongmao    214.23677 131.59966 501.59903 472.95568 331.42618 375.35820\nNansang    184.47950 144.77393 458.06573 486.77266 398.13308 360.99219\nLaukkaing  334.65738 435.58047 903.72094 325.06329 708.82887 769.06406\nPangsang   236.72516 140.23910 506.29940 481.31907 316.30314 375.58139\nNamtu      365.88437 352.91394 416.65397 659.56458 494.36143 355.99713\nMonghpyak  262.09281 187.85699 470.46845 444.04411 448.40651 462.63265\nKonkyan    485.51312 365.87588 392.40306 730.92980 158.82353 254.24424\nMongping   454.52548 318.47482 201.65224 727.08969 188.64567 113.80917\nHopong     345.31042 239.43845 291.84351 632.45718 294.40441 212.99485\nNyaungshwe 201.58191 137.29734 460.91883 445.81335 427.94086 417.08639\nHsihseng   369.00833 295.87811 304.02806 658.87060 377.52977 256.70338\nMongla     179.95877 253.20001 708.17595 347.33155 531.46949 574.40292\nHseni       79.41836 120.66550 564.64051 354.90063 474.12297 481.88406\nKunlong    295.23103 288.03320 468.27436 595.70536 413.07823 341.68641\nHopang     170.63913 135.62913 573.55355 403.82035 397.85908 451.51070\nNamhkan    173.27153 240.34131 715.42102 295.91660 536.85519 596.19944\nKengtung    59.85893 142.21554 613.01033 295.90429 505.40025 531.35998\nLangkho    115.18145  94.98486 518.86151 402.33622 420.65204 428.08061\nMonghsu    325.71557 216.25326 308.13805 605.02113 311.92379 247.73318\nTaunggyi   195.14541 319.81385 778.45810 150.84117 684.20905 712.80752\nPangwaun   362.45608 232.52209 523.43600 540.60474 264.64997 407.02947\nKyethi     447.10266 358.89620 233.83079 728.87329 374.90376 233.25039\nLoilen     268.92310 207.25000 406.56282 573.75476 354.79137 284.76895\nManton     646.66493 507.96808  59.52318 910.23039 280.26395 181.33894\nMongyang   209.33700 194.93467 585.61776 448.79027 401.39475 445.40621\nKunhing    255.10832 137.85278 403.66587 532.26397 281.62645 292.49814\nMongyawng  172.70139 275.15989 601.80824 432.10118 572.76394 522.91815\nTangyan    429.84475 340.39128 242.78233 719.84066 348.84991 201.49393\nNamhsan    472.04024 364.77086 180.09747 754.03913 316.54695 170.90848\n              Hsipaw  Monghsat   Mongmao   Nansang Laukkaing  Pangsang\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat   121.78922                                                  \nMongmao    185.99483 247.17708                                        \nNansang    120.24428 201.92690 164.99494                              \nLaukkaing  569.06099 626.44910 404.00848 480.60074                    \nPangsang   205.04337 256.37933  57.60801 193.36162 408.04016          \nNamtu      229.44658 231.78673 365.03882 217.61884 664.06286 392.97391\nMonghpyak  237.67919 356.84917 291.88846 227.52638 565.84279 315.11651\nKonkyan    296.74316 268.25060 281.87425 374.70456 635.92043 274.81900\nMongping   168.92101 140.95392 305.57166 287.36626 708.13447 308.33123\nHopong      62.86179 100.45714 244.16253 167.66291 628.48557 261.51075\nNyaungshwe 169.92664 286.37238 230.45003 131.18943 520.24345 257.77823\nHsihseng   136.54610 153.49551 311.98001 193.53779 670.74564 335.52974\nMongla     373.47509 429.00536 216.24705 289.45119 202.55831 217.88123\nHseni      231.48538 331.22632 184.67099 136.45492 391.74585 214.66375\nKunlong    205.10051 202.31862 224.43391 183.01388 521.88657 258.49342\nHopang     248.72536 317.64824  78.29342 196.47091 331.67199  92.57672\nNamhkan    382.79302 455.10875 223.32205 302.89487 196.46063 231.38484\nKengtung   284.08582 383.72138 207.58055 193.67980 351.48520 229.85484\nLangkho    183.05109 279.52329 134.50170  99.39859 410.41270 167.65920\nMonghsu     58.55724 137.24737 242.43599 153.59962 619.01766 260.52971\nTaunggyi   462.31183 562.88102 387.33906 365.04897 345.98041 405.59730\nPangwaun   298.12447 343.53898 187.40057 326.12960 470.63605 157.48757\nKyethi     195.17677 190.50609 377.89657 273.02385 749.99415 396.89963\nLoilen      98.04789 118.65144 190.26490  94.23028 535.57527 207.94433\nManton     359.60008 317.15603 503.79786 476.55544 907.38406 504.75214\nMongyang   267.10497 312.64797  91.06281 218.49285 326.19219 108.37735\nKunhing     90.77517 165.38834 103.91040 128.20940 500.41640 123.18870\nMongyawng  294.70967 364.40429 296.40789 191.11990 454.80044 336.16703\nTangyan    167.69794 144.59626 347.14183 249.70235 722.40954 364.76893\nNamhsan    194.47928 169.56962 371.71448 294.16284 760.45960 385.65526\n               Namtu Monghpyak   Konkyan  Mongping    Hopong Nyaungshwe\nPindaya                                                                \nYwangan                                                                \nPinlaung                                                               \nMabein                                                                 \nKalaw                                                                  \nPekon                                                                  \nLawksawk                                                               \nNawnghkio                                                              \nKyaukme                                                                \nMuse                                                                   \nLaihka                                                                 \nMongnai                                                                \nMawkmai                                                                \nKutkai                                                                 \nMongton                                                                \nMongyai                                                                \nMongkaing                                                              \nLashio                                                                 \nMongpan                                                                \nMatman                                                                 \nTachileik                                                              \nNarphan                                                                \nMongkhet                                                               \nHsipaw                                                                 \nMonghsat                                                               \nMongmao                                                                \nNansang                                                                \nLaukkaing                                                              \nPangsang                                                               \nNamtu                                                                  \nMonghpyak  346.57799                                                   \nKonkyan    478.37690 463.39594                                         \nMongping   321.66441 354.76537 242.02901                               \nHopong     206.82668 267.95563 304.49287 134.00139                     \nNyaungshwe 271.41464 103.97300 432.35040 319.32583 209.32532           \nHsihseng   131.89940 285.37627 383.49700 199.64389  91.65458  225.80242\nMongla     483.49434 408.03397 468.09747 512.61580 432.31105  347.60273\nHseni      327.41448 200.26876 448.84563 395.58453 286.41193  130.86310\nKunlong    233.60474 357.44661 329.11433 309.05385 219.06817  285.13095\nHopang     408.24516 304.26577 348.18522 379.27212 309.77356  247.19891\nNamhkan    506.32466 379.50202 481.59596 523.74815 444.13246  333.32428\nKengtung   385.33554 221.47613 474.82621 442.80821 340.47382  177.75714\nLangkho    305.03473 200.27496 386.95022 343.96455 239.63685  128.26577\nMonghsu    209.64684 232.17823 331.72187 158.90478  43.40665  173.82799\nTaunggyi   518.72748 334.17439 650.56905 621.53039 513.76415  325.09619\nPangwaun   517.03554 381.95144 263.97576 340.37881 346.00673  352.92324\nKyethi     186.90932 328.16234 400.10989 187.43974 136.49038  288.06872\nLoilen     194.24075 296.99681 334.19820 231.99959 124.74445  206.40432\nManton     448.58230 502.20840 366.66876 200.48082 310.58885  488.79874\nMongyang   413.26052 358.17599 329.39338 387.80686 323.35704  294.29500\nKunhing    296.43996 250.74435 253.74202 212.59619 145.15617  189.97131\nMongyawng  262.24331 285.56475 522.38580 455.59190 326.59925  218.12104\nTangyan    178.69483 335.26416 367.46064 161.67411 106.82328  284.14692\nNamhsan    240.95555 352.70492 352.20115 130.23777 132.70541  315.91750\n            Hsihseng    Mongla     Hseni   Kunlong    Hopang   Namhkan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla     478.66210                                                  \nHseni      312.74375 226.82048                                        \nKunlong    231.85967 346.46200 276.19175                              \nHopang     370.01334 147.02444 162.80878 271.34451                    \nNamhkan    492.09476  77.21355 212.11323 375.73885 146.18632          \nKengtung   370.72441 202.45004  66.12817 317.14187 164.29921 175.63015\nLangkho    276.27441 229.01675  66.66133 224.52741 134.24847 224.40029\nMonghsu     97.82470 424.51868 262.28462 239.89665 301.84458 431.32637\nTaunggyi   528.14240 297.09863 238.19389 471.29032 329.95252 257.29147\nPangwaun   433.06326 319.18643 330.70182 392.45403 206.98364 310.44067\nKyethi      84.04049 556.02500 388.33498 298.55859 440.48114 567.86202\nLoilen     158.84853 338.67408 227.10984 166.53599 242.89326 364.90647\nManton     334.87758 712.51416 584.63341 479.76855 577.52046 721.86149\nMongyang   382.59743 146.66661 210.19929 247.22785  69.25859 167.72448\nKunhing    220.15490 306.47566 206.47448 193.77551 172.96164 314.92119\nMongyawng  309.51462 315.57550 173.86004 240.39800 290.51360 321.21112\nTangyan     70.27241 526.80849 373.07575 268.07983 412.22167 542.64078\nNamhsan    125.74240 564.02740 411.96125 310.40560 440.51555 576.42717\n            Kengtung   Langkho   Monghsu  Taunggyi  Pangwaun    Kyethi\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho    107.16213                                                  \nMonghsu    316.91914 221.84918                                        \nTaunggyi   186.28225 288.27478 486.91951                              \nPangwaun   337.48335 295.38434 343.38498 497.61245                    \nKyethi     444.26274 350.91512 146.61572 599.57407 476.62610          \nLoilen     282.22935 184.10672 131.55208 455.91617 331.69981 232.32965\nManton     631.99123 535.95620 330.76503 803.08034 510.79265 272.03299\nMongyang   217.08047 175.35413 323.95988 374.58247 225.25026 453.86726\nKunhing    245.95083 146.38284 146.78891 429.98509 229.09986 278.95182\nMongyawng  203.87199 186.11584 312.85089 287.73864 475.33116 387.71518\nTangyan    429.95076 332.02048 127.42203 592.65262 447.05580  47.79331\nNamhsan    466.20497 368.20978 153.22576 631.49232 448.58030  68.67929\n              Loilen    Manton  Mongyang   Kunhing Mongyawng   Tangyan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho                                                               \nMonghsu                                                               \nTaunggyi                                                              \nPangwaun                                                              \nKyethi                                                                \nLoilen                                                                \nManton     419.06087                                                  \nMongyang   246.76592 585.70558                                        \nKunhing    130.39336 410.49230 188.89405                              \nMongyawng  261.75211 629.43339 304.21734 295.35984                    \nTangyan    196.60826 271.82672 421.06366 249.74161 377.52279          \nNamhsan    242.15271 210.48485 450.97869 270.79121 430.02019  63.67613\n\n\n\nhclust_ward &lt;- hclust(proxmat, method = 'ward.D')\n\n\nplot(hclust_ward, cex = 0.6)\n\n\n\n\n\n\n\n\n\n\n\nI calculated the agglomerative coefficient for different clustering methods (average, single, complete, and ward) to assess their performance.\n\nm &lt;- c( \"average\", \"single\", \"complete\", \"ward\")\nnames(m) &lt;- c( \"average\", \"single\", \"complete\", \"ward\")\n\nac &lt;- function(x) {\n  agnes(shan_ict, method = x)$ac\n}\n\nmap_dbl(m, ac)\n\n  average    single  complete      ward \n0.8131144 0.6628705 0.8950702 0.9427730 \n\n\n\n\n\nI applied the Gap statistic to determine the optimal number of clusters, followed by visualizing the result.\n\nset.seed(12345)\ngap_stat &lt;- clusGap(shan_ict, \n                    FUN = hcut, \n                    nstart = 25, \n                    K.max = 10, \n                    B = 50)\n# Print the result\nprint(gap_stat, method = \"firstmax\")\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = shan_ict, FUNcluster = hcut, K.max = 10, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..10; spaceH0=\"scaledPCA\"\n --&gt; Number of clusters (method 'firstmax'): 1\n          logW   E.logW       gap     SE.sim\n [1,] 8.407129 8.680794 0.2736651 0.04460994\n [2,] 8.130029 8.350712 0.2206824 0.03880130\n [3,] 7.992265 8.202550 0.2102844 0.03362652\n [4,] 7.862224 8.080655 0.2184311 0.03784781\n [5,] 7.756461 7.978022 0.2215615 0.03897071\n [6,] 7.665594 7.887777 0.2221833 0.03973087\n [7,] 7.590919 7.806333 0.2154145 0.04054939\n [8,] 7.526680 7.731619 0.2049390 0.04198644\n [9,] 7.458024 7.660795 0.2027705 0.04421874\n[10,] 7.377412 7.593858 0.2164465 0.04540947\n\n\n\nfviz_gap_stat(gap_stat)\n\n\n\n\n\n\n\n\n\n\n\nI visualized the clusters identified from the hierarchical clustering and added rectangular boundaries around the clusters in the dendrogram.\n\nplot(hclust_ward, cex = 0.6)\nrect.hclust(hclust_ward, \n            k = 6, \n            border = 2:5)\n\n\n\n\n\n\n\n\n\nshan_ict_mat &lt;- data.matrix(shan_ict)\n\n\nheatmaply(normalize(shan_ict_mat),\n          Colv=NA,\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\",\n          seriate = \"OLO\",\n          colors = Blues,\n          k_row = 6,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"Geographic Segmentation of Shan State by ICT indicators\",\n          xlab = \"ICT Indicators\",\n          ylab = \"Townships of Shan State\"\n          )\n\n\n\n\n\n\n\n\nI assigned clusters to each township and merged the cluster assignments with the original spatial data, followed by visualizing the cluster distribution on a map.\n\ngroups &lt;- as.factor(cutree(hclust_ward, k=6))\n\n\nshan_sf_cluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER`=`as.matrix.groups.`)\n\n\nqtm(shan_sf_cluster, \"CLUSTER\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#data-import-and-preparation-explanation",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#data-import-and-preparation-explanation",
    "title": "Hands On Exercise 7",
    "section": "",
    "text": "I used the st_read() function from the sf package to read geospatial data for Myanmar township boundaries. I filtered the data to only include three regions of Shan State (East, North, and South) and selected columns 2 to 7. The resultant geospatial data was stored in shan_sf:\n\nshan_sf &lt;- st_read(dsn = \"data/geospatial\", \n                   layer = \"myanmar_township_boundaries\") %&gt;%\n  filter(ST %in% c(\"Shan (East)\", \"Shan (North)\", \"Shan (South)\")) %&gt;%\n  select(c(2:7))\n\nReading layer `myanmar_township_boundaries' from data source \n  `C:\\EasonXu-HY99\\IS415\\Hands-on_Ex\\Hands-on_Ex07\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.17275 ymin: 9.671252 xmax: 101.1699 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\nThe dataset is then displayed using the following functions:\n\nshan_sf\n\nSimple feature collection with 55 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 96.15107 ymin: 19.29932 xmax: 101.1699 ymax: 24.15907\nGeodetic CRS:  WGS 84\nFirst 10 features:\n             ST ST_PCODE       DT   DT_PCODE        TS  TS_PCODE\n1  Shan (North)   MMR015  Mongmit MMR015D008   Mongmit MMR015017\n2  Shan (South)   MMR014 Taunggyi MMR014D001   Pindaya MMR014006\n3  Shan (South)   MMR014 Taunggyi MMR014D001   Ywangan MMR014007\n4  Shan (South)   MMR014 Taunggyi MMR014D001  Pinlaung MMR014009\n5  Shan (North)   MMR015  Mongmit MMR015D008    Mabein MMR015018\n6  Shan (South)   MMR014 Taunggyi MMR014D001     Kalaw MMR014005\n7  Shan (South)   MMR014 Taunggyi MMR014D001     Pekon MMR014010\n8  Shan (South)   MMR014 Taunggyi MMR014D001  Lawksawk MMR014008\n9  Shan (North)   MMR015  Kyaukme MMR015D003 Nawnghkio MMR015013\n10 Shan (North)   MMR015  Kyaukme MMR015D003   Kyaukme MMR015012\n                         geometry\n1  MULTIPOLYGON (((96.96001 23...\n2  MULTIPOLYGON (((96.7731 21....\n3  MULTIPOLYGON (((96.78483 21...\n4  MULTIPOLYGON (((96.49518 20...\n5  MULTIPOLYGON (((96.66306 24...\n6  MULTIPOLYGON (((96.49518 20...\n7  MULTIPOLYGON (((97.14738 19...\n8  MULTIPOLYGON (((96.94981 22...\n9  MULTIPOLYGON (((96.75648 22...\n10 MULTIPOLYGON (((96.95498 22...\n\n\n\nglimpse(shan_sf)\n\nRows: 55\nColumns: 7\n$ ST       &lt;chr&gt; \"Shan (North)\", \"Shan (South)\", \"Shan (South)\", \"Shan (South)…\n$ ST_PCODE &lt;chr&gt; \"MMR015\", \"MMR014\", \"MMR014\", \"MMR014\", \"MMR015\", \"MMR014\", \"…\n$ DT       &lt;chr&gt; \"Mongmit\", \"Taunggyi\", \"Taunggyi\", \"Taunggyi\", \"Mongmit\", \"Ta…\n$ DT_PCODE &lt;chr&gt; \"MMR015D008\", \"MMR014D001\", \"MMR014D001\", \"MMR014D001\", \"MMR0…\n$ TS       &lt;chr&gt; \"Mongmit\", \"Pindaya\", \"Ywangan\", \"Pinlaung\", \"Mabein\", \"Kalaw…\n$ TS_PCODE &lt;chr&gt; \"MMR015017\", \"MMR014006\", \"MMR014007\", \"MMR014009\", \"MMR01501…\n$ geometry &lt;MULTIPOLYGON [°]&gt; MULTIPOLYGON (((96.96001 23..., MULTIPOLYGON (((…\n\n\n\n\n\nThe aspatial dataset, which contains ICT-related data for Shan State, is imported using read_csv():\n\nict &lt;- read_csv (\"data/aspatial/Shan-ICT.csv\")\n\nRows: 55 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): District Pcode, District Name, Township Pcode, Township Name\ndbl (7): Total households, Radio, Television, Land line phone, Mobile phone,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nsummary(ict)\n\n District Pcode     District Name      Township Pcode     Township Name     \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n Total households     Radio         Television    Land line phone \n Min.   : 3318    Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711    1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685    Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369    Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471    3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604    Max.   :30176   Max.   :62388   Max.   :6736.0  \n  Mobile phone      Computer      Internet at home\n Min.   :  150   Min.   :  20.0   Min.   :   8.0  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0  \n Median : 3559   Median : 244.0   Median : 316.0  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0  \n\n\n\n\n\nI created new variables using mutate(), calculating the proportion of households with each ICT service (per 1000 households) for Radio, Television, Landline Phone, Mobile Phone, Computer, and Internet:\n\nict_derived &lt;- ict %&gt;%\n  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %&gt;%\n  mutate(`TV_PR` = `Television`/`Total households`*1000) %&gt;%\n  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %&gt;%\n  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %&gt;%\n  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %&gt;%\n  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %&gt;%\n  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,\n         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,\n         `TT_HOUSEHOLDS`=`Total households`,\n         `RADIO`=`Radio`, `TV`=`Television`, \n         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,\n         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) \n\n\nsummary(ict_derived)\n\n   DT_PCODE              DT              TS_PCODE              TS           \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n TT_HOUSEHOLDS       RADIO             TV           LLPHONE      \n Min.   : 3318   Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711   1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685   Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369   Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471   3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604   Max.   :30176   Max.   :62388   Max.   :6736.0  \n     MPHONE         COMPUTER         INTERNET         RADIO_PR     \n Min.   :  150   Min.   :  20.0   Min.   :   8.0   Min.   : 21.05  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0   1st Qu.:138.95  \n Median : 3559   Median : 244.0   Median : 316.0   Median :210.95  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2   Mean   :215.68  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5   3rd Qu.:268.07  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0   Max.   :484.52  \n     TV_PR         LLPHONE_PR       MPHONE_PR       COMPUTER_PR    \n Min.   :116.0   Min.   :  2.78   Min.   : 36.42   Min.   : 3.278  \n 1st Qu.:450.2   1st Qu.: 22.84   1st Qu.:190.14   1st Qu.:11.832  \n Median :517.2   Median : 37.59   Median :305.27   Median :18.970  \n Mean   :509.5   Mean   : 51.09   Mean   :314.05   Mean   :24.393  \n 3rd Qu.:606.4   3rd Qu.: 69.72   3rd Qu.:428.43   3rd Qu.:29.897  \n Max.   :842.5   Max.   :181.49   Max.   :735.43   Max.   :92.402  \n  INTERNET_PR     \n Min.   :  1.041  \n 1st Qu.:  8.617  \n Median : 22.829  \n Mean   : 30.644  \n 3rd Qu.: 41.281  \n Max.   :117.985"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#exploratory-data-analysis-eda-explanation",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#exploratory-data-analysis-eda-explanation",
    "title": "Hands On Exercise 7",
    "section": "",
    "text": "I used histograms and boxplots to visualize the distribution of the ICT indicators across the regions. For example, I generated a histogram for radio ownership per household:\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\n\n\n\n\n\n\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\n\n\n\n\n\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\n\n\n\n\n\n\n\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\n\n\n\n\n\nradio &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ntv &lt;- ggplot(data=ict_derived, \n             aes(x= `TV_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nllphone &lt;- ggplot(data=ict_derived, \n             aes(x= `LLPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nmphone &lt;- ggplot(data=ict_derived, \n             aes(x= `MPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ncomputer &lt;- ggplot(data=ict_derived, \n             aes(x= `COMPUTER_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ninternet &lt;- ggplot(data=ict_derived, \n             aes(x= `INTERNET_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\nggarrange(radio, tv, llphone, mphone, computer, internet, \n          ncol = 3, \n          nrow = 2)\n\n\n\n\n\n\n\n\nI applied a similar approach to plot the boxplots and histograms for other ICT indicators.\n\n\n\nI created a choropleth map by merging the spatial data (shan_sf) with the aspatial ICT data (ict_derived) using the left_join() function, and then wrote the updated shan_sf object to an RDS file:\n\nshan_sf &lt;- left_join(shan_sf, \n                     ict_derived, by=c(\"TS_PCODE\"=\"TS_PCODE\"))\n  \nwrite_rds(shan_sf, \"data/rds/shan_sf.rds\")\n\n\nshan_sf &lt;- read_rds(\"data/rds/shan_sf.rds\")\n\n\nqtm(shan_sf, \"RADIO_PR\")\n\n\n\n\n\n\n\n\n\nTT_HOUSEHOLDS.map &lt;- tm_shape(shan_sf) + \n  tm_fill(col = \"TT_HOUSEHOLDS\",\n          n = 5,\n          style = \"jenks\", \n          title = \"Total households\") + \n  tm_borders(alpha = 0.5) \n\nRADIO.map &lt;- tm_shape(shan_sf) + \n  tm_fill(col = \"RADIO\",\n          n = 5,\n          style = \"jenks\",\n          title = \"Number Radio \") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(TT_HOUSEHOLDS.map, RADIO.map,\n             asp=NA, ncol=2)\n\n\n\n\n\n\n\n\n\ntm_shape(shan_sf) +\n    tm_polygons(c(\"TT_HOUSEHOLDS\", \"RADIO_PR\"),\n                style=\"jenks\") +\n    tm_facets(sync = TRUE, ncol = 2) +\n  tm_legend(legend.position = c(\"right\", \"bottom\"))+\n  tm_layout(outer.margins=0, asp=0)\n\n\n\n\n\n\n\n\n\n\n\nI calculated the correlation matrix for selected ICT indicators and created a mixed-type correlation plot using corrplot.mixed(). The correlation between the variables is represented with ellipses in the lower half and numeric values in the upper half.\n\ncluster_vars.cor = cor(ict_derived[,12:17])\ncorrplot.mixed(cluster_vars.cor,\n         lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\n\n\n\nI extracted specific columns (township names and ICT indicators) from the shan_sf dataset, and then displayed the first 10 rows. This dataset contains the variables required for clustering.\n\ncluster_vars &lt;- shan_sf %&gt;%\n  st_set_geometry(NULL) %&gt;%\n  select(\"TS.x\", \"RADIO_PR\", \"TV_PR\", \"LLPHONE_PR\", \"MPHONE_PR\", \"COMPUTER_PR\")\nhead(cluster_vars,10)\n\n        TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1    Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\n2    Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\n3    Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\n4   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\n5     Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\n6      Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\n7      Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\n8   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\n9  Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\n10   Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\n\nrow.names(cluster_vars) &lt;- cluster_vars$\"TS.x\"\nhead(cluster_vars,10)\n\n               TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit     Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya     Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan     Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\nMabein       Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw         Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\nPekon         Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme     Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\n\n\n\nI selected only the columns representing the ICT indicators and saved the resulting data frame to an RDS file for future use. I then reloaded the file to proceed with further analysis.\n\nshan_ict &lt;- select(cluster_vars, c(2:6))\nhead(shan_ict, 10)\n\n          RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit   286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya   417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan   484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung  231.6499 541.7189   28.54454  249.4903    13.76255\nMabein    449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw     280.7624 611.6204   42.06478  408.7951    29.63160\nPekon     318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk  387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme   210.9548 601.1773   39.58267  372.4930    30.94709\n\nwrite_rds(shan_ict, \"data/rds/shan_ict.rds\")\n\n\nshan_ict &lt;- read_rds(\"data/rds/shan_ict.rds\")\n\n\n\n\nI standardized the ICT data using Min-Max normalization (normalize) and Z-score standardization (scale). I also displayed summary statistics for both the normalized and Z-score standardized data.\n\nshan_ict.std &lt;- normalize(shan_ict)\nsummary(shan_ict.std)\n\n    RADIO_PR          TV_PR          LLPHONE_PR       MPHONE_PR     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.2544   1st Qu.:0.4600   1st Qu.:0.1123   1st Qu.:0.2199  \n Median :0.4097   Median :0.5523   Median :0.1948   Median :0.3846  \n Mean   :0.4199   Mean   :0.5416   Mean   :0.2703   Mean   :0.3972  \n 3rd Qu.:0.5330   3rd Qu.:0.6750   3rd Qu.:0.3746   3rd Qu.:0.5608  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n  COMPUTER_PR     \n Min.   :0.00000  \n 1st Qu.:0.09598  \n Median :0.17607  \n Mean   :0.23692  \n 3rd Qu.:0.29868  \n Max.   :1.00000  \n\n\n\nshan_ict.z &lt;- scale(shan_ict)\ndescribe(shan_ict.z)\n\n            vars  n mean sd median trimmed  mad   min  max range  skew kurtosis\nRADIO_PR       1 55    0  1  -0.04   -0.06 0.94 -1.85 2.55  4.40  0.48    -0.27\nTV_PR          2 55    0  1   0.05    0.04 0.78 -2.47 2.09  4.56 -0.38    -0.23\nLLPHONE_PR     3 55    0  1  -0.33   -0.15 0.68 -1.19 3.20  4.39  1.37     1.49\nMPHONE_PR      4 55    0  1  -0.05   -0.06 1.01 -1.58 2.40  3.98  0.48    -0.34\nCOMPUTER_PR    5 55    0  1  -0.26   -0.18 0.64 -1.03 3.31  4.34  1.80     2.96\n              se\nRADIO_PR    0.13\nTV_PR       0.13\nLLPHONE_PR  0.13\nMPHONE_PR   0.13\nCOMPUTER_PR 0.13\n\n\n\n\n\nI compared histograms of the raw ICT values and their Min-Max and Z-score standardized counterparts using ggplot2 and arranged them side by side.\n\nr &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df &lt;- as.data.frame(shan_ict.std)\ns &lt;- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df &lt;- as.data.frame(shan_ict.z)\nz &lt;- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\n\n\n\nr &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df &lt;- as.data.frame(shan_ict.std)\ns &lt;- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df &lt;- as.data.frame(shan_ict.z)\nz &lt;- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\n\n\n\n\n\nI computed the Euclidean distance matrix for the ICT data and performed hierarchical clustering using the Ward method. I then visualized the dendrogram.\n\nproxmat &lt;- dist(shan_ict, method = 'euclidean')\n\n\nproxmat\n\n             Mongmit   Pindaya   Ywangan  Pinlaung    Mabein     Kalaw\nPindaya    171.86828                                                  \nYwangan    381.88259 257.31610                                        \nPinlaung    57.46286 208.63519 400.05492                              \nMabein     263.37099 313.45776 529.14689 312.66966                    \nKalaw      160.05997 302.51785 499.53297 181.96406 198.14085          \nPekon       59.61977 117.91580 336.50410  94.61225 282.26877 211.91531\nLawksawk   140.11550 204.32952 432.16535 192.57320 130.36525 140.01101\nNawnghkio   89.07103 180.64047 377.87702 139.27495 204.63154 127.74787\nKyaukme    144.02475 311.01487 505.89191 139.67966 264.88283  79.42225\nMuse       563.01629 704.11252 899.44137 571.58335 453.27410 412.46033\nLaihka     141.87227 298.61288 491.83321 101.10150 345.00222 197.34633\nMongnai    115.86190 258.49346 422.71934  64.52387 358.86053 200.34668\nMawkmai    434.92968 437.99577 397.03752 398.11227 693.24602 562.59200\nKutkai      97.61092 212.81775 360.11861  78.07733 340.55064 204.93018\nMongton    192.67961 283.35574 361.23257 163.42143 425.16902 267.87522\nMongyai    256.72744 287.41816 333.12853 220.56339 516.40426 386.74701\nMongkaing  503.61965 481.71125 364.98429 476.29056 747.17454 625.24500\nLashio     251.29457 398.98167 602.17475 262.51735 231.28227 106.69059\nMongpan    193.32063 335.72896 483.68125 192.78316 301.52942 114.69105\nMatman     401.25041 354.39039 255.22031 382.40610 637.53975 537.63884\nTachileik  529.63213 635.51774 807.44220 555.01039 365.32538 373.64459\nNarphan    406.15714 474.50209 452.95769 371.26895 630.34312 463.53759\nMongkhet   349.45980 391.74783 408.97731 305.86058 610.30557 465.52013\nHsipaw     118.18050 245.98884 388.63147  76.55260 366.42787 212.36711\nMonghsat   214.20854 314.71506 432.98028 160.44703 470.48135 317.96188\nMongmao    242.54541 402.21719 542.85957 217.58854 384.91867 195.18913\nNansang    104.91839 275.44246 472.77637  85.49572 287.92364 124.30500\nLaukkaing  568.27732 726.85355 908.82520 563.81750 520.67373 427.77791\nPangsang   272.67383 428.24958 556.82263 244.47146 418.54016 224.03998\nNamtu      179.62251 225.40822 444.66868 170.04533 366.16094 307.27427\nMonghpyak  177.76325 221.30579 367.44835 222.20020 212.69450 167.08436\nKonkyan    403.39082 500.86933 528.12533 365.44693 613.51206 444.75859\nMongping   265.12574 310.64850 337.94020 229.75261 518.16310 375.64739\nHopong     136.93111 223.06050 352.85844  98.14855 398.00917 264.16294\nNyaungshwe  99.38590 216.52463 407.11649 138.12050 210.21337  95.66782\nHsihseng   131.49728 172.00796 342.91035 111.61846 381.20187 287.11074\nMongla     384.30076 549.42389 728.16301 372.59678 406.09124 260.26411\nHseni      189.37188 337.98982 534.44679 204.47572 213.61240  38.52842\nKunlong    224.12169 355.47066 531.63089 194.76257 396.61508 273.01375\nHopang     281.05362 443.26362 596.19312 265.96924 368.55167 185.14704\nNamhkan    386.02794 543.81859 714.43173 382.78835 379.56035 246.39577\nKengtung   246.45691 385.68322 573.23173 263.48638 219.47071  88.29335\nLangkho    164.26299 323.28133 507.78892 168.44228 253.84371  67.19580\nMonghsu    109.15790 198.35391 340.42789  80.86834 367.19820 237.34578\nTaunggyi   399.84278 503.75471 697.98323 429.54386 226.24011 252.26066\nPangwaun   381.51246 512.13162 580.13146 356.37963 523.44632 338.35194\nKyethi     202.92551 175.54012 287.29358 189.47065 442.07679 360.17247\nLoilen     145.48666 293.61143 469.51621  91.56527 375.06406 217.19877\nManton     430.64070 402.42888 306.16379 405.83081 674.01120 560.16577\nMongyang   309.51302 475.93982 630.71590 286.03834 411.88352 233.56349\nKunhing    173.50424 318.23811 449.67218 141.58836 375.82140 197.63683\nMongyawng  214.21738 332.92193 570.56521 235.55497 193.49994 173.43078\nTangyan    195.92520 208.43740 324.77002 169.50567 448.59948 348.06617\nNamhsan    237.78494 228.41073 286.16305 214.33352 488.33873 385.88676\n               Pekon  Lawksawk Nawnghkio   Kyaukme      Muse    Laihka\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk   157.51129                                                  \nNawnghkio  113.15370  90.82891                                        \nKyaukme    202.12206 186.29066 157.04230                              \nMuse       614.56144 510.13288 533.68806 434.75768                    \nLaihka     182.23667 246.74469 211.88187 128.24979 526.65211          \nMongnai    151.60031 241.71260 182.21245 142.45669 571.97975 100.53457\nMawkmai    416.00669 567.52693 495.15047 512.02846 926.93007 429.96554\nKutkai     114.98048 224.64646 147.44053 170.93318 592.90743 144.67198\nMongton    208.14888 311.07742 225.81118 229.28509 634.71074 212.07320\nMongyai    242.52301 391.26989 319.57938 339.27780 763.91399 264.13364\nMongkaing  480.23965 625.18712 546.69447 586.05094 995.66496 522.96309\nLashio     303.80011 220.75270 230.55346 129.95255 313.15288 238.64533\nMongpan    243.30037 228.54223 172.84425 110.37831 447.49969 210.76951\nMatman     368.25761 515.39711 444.05061 505.52285 929.11283 443.25453\nTachileik  573.39528 441.82621 470.45533 429.15493 221.19950 549.08985\nNarphan    416.84901 523.69580 435.59661 420.30003 770.40234 392.32592\nMongkhet   342.08722 487.41102 414.10280 409.03553 816.44931 324.97428\nHsipaw     145.37542 249.35081 176.09570 163.95741 591.03355 128.42987\nMonghsat   225.64279 352.31496 289.83220 253.25370 663.76026 158.93517\nMongmao    293.70625 314.64777 257.76465 146.09228 451.82530 185.99082\nNansang    160.37607 188.78869 151.13185  60.32773 489.35308  78.78999\nLaukkaing  624.82399 548.83928 552.65554 428.74978 149.26996 507.39700\nPangsang   321.81214 345.91486 287.10769 175.35273 460.24292 214.19291\nNamtu      165.02707 260.95300 257.52713 270.87277 659.16927 185.86794\nMonghpyak  190.93173 142.31691  93.03711 217.64419 539.43485 293.22640\nKonkyan    421.48797 520.31264 439.34272 393.79911 704.86973 351.75354\nMongping   259.68288 396.47081 316.14719 330.28984 744.44948 272.82761\nHopong     138.86577 274.91604 204.88286 218.84211 648.68011 157.48857\nNyaungshwe 139.31874 104.17830  43.26545 126.50414 505.88581 201.71653\nHsihseng   105.30573 257.11202 209.88026 250.27059 677.66886 175.89761\nMongla     441.20998 393.18472 381.40808 241.58966 256.80556 315.93218\nHseni      243.98001 171.50398 164.05304  81.20593 381.30567 204.49010\nKunlong    249.36301 318.30406 285.04608 215.63037 547.24297 122.68682\nHopang     336.38582 321.16462 279.84188 154.91633 377.44407 230.78652\nNamhkan    442.77120 379.41126 367.33575 247.81990 238.67060 342.43665\nKengtung   297.67761 209.38215 208.29647 136.23356 330.08211 258.23950\nLangkho    219.21623 190.30257 156.51662  51.67279 413.64173 160.94435\nMonghsu    113.84636 242.04063 170.09168 200.77712 633.21624 163.28926\nTaunggyi   440.66133 304.96838 344.79200 312.60547 250.81471 425.36916\nPangwaun   423.81347 453.02765 381.67478 308.31407 541.97887 351.78203\nKyethi     162.43575 317.74604 267.21607 328.14177 757.16745 255.83275\nLoilen     181.94596 265.29318 219.26405 146.92675 560.43400  59.69478\nManton     403.82131 551.13000 475.77296 522.86003 941.49778 458.30232\nMongyang   363.58788 363.37684 323.32123 188.59489 389.59919 229.71502\nKunhing    213.46379 278.68953 206.15773 145.00266 533.00162 142.03682\nMongyawng  248.43910 179.07229 220.61209 181.55295 422.37358 211.99976\nTangyan    167.79937 323.14701 269.07880 306.78359 736.93741 224.29176\nNamhsan    207.16559 362.84062 299.74967 347.85944 778.52971 273.79672\n             Mongnai   Mawkmai    Kutkai   Mongton   Mongyai Mongkaing\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai    374.50873                                                  \nKutkai      91.15307 364.95519                                        \nMongton    131.67061 313.35220 107.06341                              \nMongyai    203.23607 178.70499 188.94166 159.79790                    \nMongkaing  456.00842 133.29995 428.96133 365.50032 262.84016          \nLashio     270.86983 638.60773 289.82513 347.11584 466.36472 708.65819\nMongpan    178.09554 509.99632 185.18173 200.31803 346.39710 563.56780\nMatman     376.33870 147.83545 340.86349 303.04574 186.95158 135.51424\nTachileik  563.95232 919.38755 568.99109 608.76740 750.29555 967.14087\nNarphan    329.31700 273.75350 314.27683 215.97925 248.82845 285.65085\nMongkhet   275.76855 115.58388 273.91673 223.22828 104.98924 222.60577\nHsipaw      52.68195 351.34601  51.46282  90.69766 177.33790 423.77868\nMonghsat   125.25968 275.09705 154.32012 150.98053 127.35225 375.60376\nMongmao    188.29603 485.52853 204.69232 206.57001 335.61300 552.31959\nNansang     92.79567 462.41938 130.04549 199.58124 288.55962 542.16609\nLaukkaing  551.56800 882.51110 580.38112 604.66190 732.68347 954.11795\nPangsang   204.25746 484.14757 228.33583 210.77938 343.30638 548.40662\nNamtu      209.35473 427.95451 225.28268 308.71751 278.02761 525.04057\nMonghpyak  253.26470 536.71695 206.61627 258.04282 370.01575 568.21089\nKonkyan    328.82831 339.01411 310.60810 248.25265 287.87384 380.92091\nMongping   202.99615 194.31049 182.75266 119.86993  65.38727 257.18572\nHopong      91.53795 302.84362  73.45899 106.21031 124.62791 379.37916\nNyaungshwe 169.63695 502.99026 152.15482 219.72196 327.13541 557.32112\nHsihseng   142.36728 329.29477 128.21054 194.64317 162.27126 411.59788\nMongla     354.10985 686.88950 388.40984 411.06668 535.28615 761.48327\nHseni      216.81639 582.53670 229.37894 286.75945 408.23212 648.04408\nKunlong    202.92529 446.53763 204.54010 270.02165 299.36066 539.91284\nHopang     243.00945 561.24281 263.31986 273.50305 408.73288 626.17673\nNamhkan    370.05669 706.47792 392.48568 414.53594 550.62819 771.39688\nKengtung   272.28711 632.54638 279.19573 329.38387 460.39706 692.74693\nLangkho    174.67678 531.08019 180.51419 236.70878 358.95672 597.42714\nMonghsu     84.11238 332.07962  62.60859 107.04894 154.86049 400.71816\nTaunggyi   448.55282 810.74692 450.33382 508.40925 635.94105 866.21117\nPangwaun   312.13429 500.68857 321.80465 257.50434 394.07696 536.95736\nKyethi     210.50453 278.85535 184.23422 222.52947 137.79420 352.06533\nLoilen      58.41263 388.73386 131.56529 176.16001 224.79239 482.18190\nManton     391.54062 109.08779 361.82684 310.20581 195.59882  81.75337\nMongyang   260.39387 558.83162 285.33223 295.60023 414.31237 631.91325\nKunhing    110.55197 398.43973 108.84990 114.03609 238.99570 465.03971\nMongyawng  275.77546 620.04321 281.03383 375.22688 445.78964 700.98284\nTangyan    180.37471 262.66006 166.61820 198.88460 109.08506 348.56123\nNamhsan    218.10003 215.19289 191.32762 196.76188  77.35900 288.66231\n              Lashio   Mongpan    Matman Tachileik   Narphan  Mongkhet\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan    172.33279                                                  \nMatman     628.11049 494.81014                                        \nTachileik  311.95286 411.03849 890.12935                              \nNarphan    525.63854 371.13393 312.05193 760.29566                    \nMongkhet   534.44463 412.17123 203.02855 820.50164 217.28718          \nHsipaw     290.86435 179.52054 344.45451 576.18780 295.40170 253.80950\nMonghsat   377.86793 283.30992 313.59911 677.09508 278.21548 167.98445\nMongmao    214.23677 131.59966 501.59903 472.95568 331.42618 375.35820\nNansang    184.47950 144.77393 458.06573 486.77266 398.13308 360.99219\nLaukkaing  334.65738 435.58047 903.72094 325.06329 708.82887 769.06406\nPangsang   236.72516 140.23910 506.29940 481.31907 316.30314 375.58139\nNamtu      365.88437 352.91394 416.65397 659.56458 494.36143 355.99713\nMonghpyak  262.09281 187.85699 470.46845 444.04411 448.40651 462.63265\nKonkyan    485.51312 365.87588 392.40306 730.92980 158.82353 254.24424\nMongping   454.52548 318.47482 201.65224 727.08969 188.64567 113.80917\nHopong     345.31042 239.43845 291.84351 632.45718 294.40441 212.99485\nNyaungshwe 201.58191 137.29734 460.91883 445.81335 427.94086 417.08639\nHsihseng   369.00833 295.87811 304.02806 658.87060 377.52977 256.70338\nMongla     179.95877 253.20001 708.17595 347.33155 531.46949 574.40292\nHseni       79.41836 120.66550 564.64051 354.90063 474.12297 481.88406\nKunlong    295.23103 288.03320 468.27436 595.70536 413.07823 341.68641\nHopang     170.63913 135.62913 573.55355 403.82035 397.85908 451.51070\nNamhkan    173.27153 240.34131 715.42102 295.91660 536.85519 596.19944\nKengtung    59.85893 142.21554 613.01033 295.90429 505.40025 531.35998\nLangkho    115.18145  94.98486 518.86151 402.33622 420.65204 428.08061\nMonghsu    325.71557 216.25326 308.13805 605.02113 311.92379 247.73318\nTaunggyi   195.14541 319.81385 778.45810 150.84117 684.20905 712.80752\nPangwaun   362.45608 232.52209 523.43600 540.60474 264.64997 407.02947\nKyethi     447.10266 358.89620 233.83079 728.87329 374.90376 233.25039\nLoilen     268.92310 207.25000 406.56282 573.75476 354.79137 284.76895\nManton     646.66493 507.96808  59.52318 910.23039 280.26395 181.33894\nMongyang   209.33700 194.93467 585.61776 448.79027 401.39475 445.40621\nKunhing    255.10832 137.85278 403.66587 532.26397 281.62645 292.49814\nMongyawng  172.70139 275.15989 601.80824 432.10118 572.76394 522.91815\nTangyan    429.84475 340.39128 242.78233 719.84066 348.84991 201.49393\nNamhsan    472.04024 364.77086 180.09747 754.03913 316.54695 170.90848\n              Hsipaw  Monghsat   Mongmao   Nansang Laukkaing  Pangsang\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat   121.78922                                                  \nMongmao    185.99483 247.17708                                        \nNansang    120.24428 201.92690 164.99494                              \nLaukkaing  569.06099 626.44910 404.00848 480.60074                    \nPangsang   205.04337 256.37933  57.60801 193.36162 408.04016          \nNamtu      229.44658 231.78673 365.03882 217.61884 664.06286 392.97391\nMonghpyak  237.67919 356.84917 291.88846 227.52638 565.84279 315.11651\nKonkyan    296.74316 268.25060 281.87425 374.70456 635.92043 274.81900\nMongping   168.92101 140.95392 305.57166 287.36626 708.13447 308.33123\nHopong      62.86179 100.45714 244.16253 167.66291 628.48557 261.51075\nNyaungshwe 169.92664 286.37238 230.45003 131.18943 520.24345 257.77823\nHsihseng   136.54610 153.49551 311.98001 193.53779 670.74564 335.52974\nMongla     373.47509 429.00536 216.24705 289.45119 202.55831 217.88123\nHseni      231.48538 331.22632 184.67099 136.45492 391.74585 214.66375\nKunlong    205.10051 202.31862 224.43391 183.01388 521.88657 258.49342\nHopang     248.72536 317.64824  78.29342 196.47091 331.67199  92.57672\nNamhkan    382.79302 455.10875 223.32205 302.89487 196.46063 231.38484\nKengtung   284.08582 383.72138 207.58055 193.67980 351.48520 229.85484\nLangkho    183.05109 279.52329 134.50170  99.39859 410.41270 167.65920\nMonghsu     58.55724 137.24737 242.43599 153.59962 619.01766 260.52971\nTaunggyi   462.31183 562.88102 387.33906 365.04897 345.98041 405.59730\nPangwaun   298.12447 343.53898 187.40057 326.12960 470.63605 157.48757\nKyethi     195.17677 190.50609 377.89657 273.02385 749.99415 396.89963\nLoilen      98.04789 118.65144 190.26490  94.23028 535.57527 207.94433\nManton     359.60008 317.15603 503.79786 476.55544 907.38406 504.75214\nMongyang   267.10497 312.64797  91.06281 218.49285 326.19219 108.37735\nKunhing     90.77517 165.38834 103.91040 128.20940 500.41640 123.18870\nMongyawng  294.70967 364.40429 296.40789 191.11990 454.80044 336.16703\nTangyan    167.69794 144.59626 347.14183 249.70235 722.40954 364.76893\nNamhsan    194.47928 169.56962 371.71448 294.16284 760.45960 385.65526\n               Namtu Monghpyak   Konkyan  Mongping    Hopong Nyaungshwe\nPindaya                                                                \nYwangan                                                                \nPinlaung                                                               \nMabein                                                                 \nKalaw                                                                  \nPekon                                                                  \nLawksawk                                                               \nNawnghkio                                                              \nKyaukme                                                                \nMuse                                                                   \nLaihka                                                                 \nMongnai                                                                \nMawkmai                                                                \nKutkai                                                                 \nMongton                                                                \nMongyai                                                                \nMongkaing                                                              \nLashio                                                                 \nMongpan                                                                \nMatman                                                                 \nTachileik                                                              \nNarphan                                                                \nMongkhet                                                               \nHsipaw                                                                 \nMonghsat                                                               \nMongmao                                                                \nNansang                                                                \nLaukkaing                                                              \nPangsang                                                               \nNamtu                                                                  \nMonghpyak  346.57799                                                   \nKonkyan    478.37690 463.39594                                         \nMongping   321.66441 354.76537 242.02901                               \nHopong     206.82668 267.95563 304.49287 134.00139                     \nNyaungshwe 271.41464 103.97300 432.35040 319.32583 209.32532           \nHsihseng   131.89940 285.37627 383.49700 199.64389  91.65458  225.80242\nMongla     483.49434 408.03397 468.09747 512.61580 432.31105  347.60273\nHseni      327.41448 200.26876 448.84563 395.58453 286.41193  130.86310\nKunlong    233.60474 357.44661 329.11433 309.05385 219.06817  285.13095\nHopang     408.24516 304.26577 348.18522 379.27212 309.77356  247.19891\nNamhkan    506.32466 379.50202 481.59596 523.74815 444.13246  333.32428\nKengtung   385.33554 221.47613 474.82621 442.80821 340.47382  177.75714\nLangkho    305.03473 200.27496 386.95022 343.96455 239.63685  128.26577\nMonghsu    209.64684 232.17823 331.72187 158.90478  43.40665  173.82799\nTaunggyi   518.72748 334.17439 650.56905 621.53039 513.76415  325.09619\nPangwaun   517.03554 381.95144 263.97576 340.37881 346.00673  352.92324\nKyethi     186.90932 328.16234 400.10989 187.43974 136.49038  288.06872\nLoilen     194.24075 296.99681 334.19820 231.99959 124.74445  206.40432\nManton     448.58230 502.20840 366.66876 200.48082 310.58885  488.79874\nMongyang   413.26052 358.17599 329.39338 387.80686 323.35704  294.29500\nKunhing    296.43996 250.74435 253.74202 212.59619 145.15617  189.97131\nMongyawng  262.24331 285.56475 522.38580 455.59190 326.59925  218.12104\nTangyan    178.69483 335.26416 367.46064 161.67411 106.82328  284.14692\nNamhsan    240.95555 352.70492 352.20115 130.23777 132.70541  315.91750\n            Hsihseng    Mongla     Hseni   Kunlong    Hopang   Namhkan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla     478.66210                                                  \nHseni      312.74375 226.82048                                        \nKunlong    231.85967 346.46200 276.19175                              \nHopang     370.01334 147.02444 162.80878 271.34451                    \nNamhkan    492.09476  77.21355 212.11323 375.73885 146.18632          \nKengtung   370.72441 202.45004  66.12817 317.14187 164.29921 175.63015\nLangkho    276.27441 229.01675  66.66133 224.52741 134.24847 224.40029\nMonghsu     97.82470 424.51868 262.28462 239.89665 301.84458 431.32637\nTaunggyi   528.14240 297.09863 238.19389 471.29032 329.95252 257.29147\nPangwaun   433.06326 319.18643 330.70182 392.45403 206.98364 310.44067\nKyethi      84.04049 556.02500 388.33498 298.55859 440.48114 567.86202\nLoilen     158.84853 338.67408 227.10984 166.53599 242.89326 364.90647\nManton     334.87758 712.51416 584.63341 479.76855 577.52046 721.86149\nMongyang   382.59743 146.66661 210.19929 247.22785  69.25859 167.72448\nKunhing    220.15490 306.47566 206.47448 193.77551 172.96164 314.92119\nMongyawng  309.51462 315.57550 173.86004 240.39800 290.51360 321.21112\nTangyan     70.27241 526.80849 373.07575 268.07983 412.22167 542.64078\nNamhsan    125.74240 564.02740 411.96125 310.40560 440.51555 576.42717\n            Kengtung   Langkho   Monghsu  Taunggyi  Pangwaun    Kyethi\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho    107.16213                                                  \nMonghsu    316.91914 221.84918                                        \nTaunggyi   186.28225 288.27478 486.91951                              \nPangwaun   337.48335 295.38434 343.38498 497.61245                    \nKyethi     444.26274 350.91512 146.61572 599.57407 476.62610          \nLoilen     282.22935 184.10672 131.55208 455.91617 331.69981 232.32965\nManton     631.99123 535.95620 330.76503 803.08034 510.79265 272.03299\nMongyang   217.08047 175.35413 323.95988 374.58247 225.25026 453.86726\nKunhing    245.95083 146.38284 146.78891 429.98509 229.09986 278.95182\nMongyawng  203.87199 186.11584 312.85089 287.73864 475.33116 387.71518\nTangyan    429.95076 332.02048 127.42203 592.65262 447.05580  47.79331\nNamhsan    466.20497 368.20978 153.22576 631.49232 448.58030  68.67929\n              Loilen    Manton  Mongyang   Kunhing Mongyawng   Tangyan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho                                                               \nMonghsu                                                               \nTaunggyi                                                              \nPangwaun                                                              \nKyethi                                                                \nLoilen                                                                \nManton     419.06087                                                  \nMongyang   246.76592 585.70558                                        \nKunhing    130.39336 410.49230 188.89405                              \nMongyawng  261.75211 629.43339 304.21734 295.35984                    \nTangyan    196.60826 271.82672 421.06366 249.74161 377.52279          \nNamhsan    242.15271 210.48485 450.97869 270.79121 430.02019  63.67613\n\n\n\nhclust_ward &lt;- hclust(proxmat, method = 'ward.D')\n\n\nplot(hclust_ward, cex = 0.6)\n\n\n\n\n\n\n\n\n\n\n\nI calculated the agglomerative coefficient for different clustering methods (average, single, complete, and ward) to assess their performance.\n\nm &lt;- c( \"average\", \"single\", \"complete\", \"ward\")\nnames(m) &lt;- c( \"average\", \"single\", \"complete\", \"ward\")\n\nac &lt;- function(x) {\n  agnes(shan_ict, method = x)$ac\n}\n\nmap_dbl(m, ac)\n\n  average    single  complete      ward \n0.8131144 0.6628705 0.8950702 0.9427730 \n\n\n\n\n\nI applied the Gap statistic to determine the optimal number of clusters, followed by visualizing the result.\n\nset.seed(12345)\ngap_stat &lt;- clusGap(shan_ict, \n                    FUN = hcut, \n                    nstart = 25, \n                    K.max = 10, \n                    B = 50)\n# Print the result\nprint(gap_stat, method = \"firstmax\")\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = shan_ict, FUNcluster = hcut, K.max = 10, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..10; spaceH0=\"scaledPCA\"\n --&gt; Number of clusters (method 'firstmax'): 1\n          logW   E.logW       gap     SE.sim\n [1,] 8.407129 8.680794 0.2736651 0.04460994\n [2,] 8.130029 8.350712 0.2206824 0.03880130\n [3,] 7.992265 8.202550 0.2102844 0.03362652\n [4,] 7.862224 8.080655 0.2184311 0.03784781\n [5,] 7.756461 7.978022 0.2215615 0.03897071\n [6,] 7.665594 7.887777 0.2221833 0.03973087\n [7,] 7.590919 7.806333 0.2154145 0.04054939\n [8,] 7.526680 7.731619 0.2049390 0.04198644\n [9,] 7.458024 7.660795 0.2027705 0.04421874\n[10,] 7.377412 7.593858 0.2164465 0.04540947\n\n\n\nfviz_gap_stat(gap_stat)\n\n\n\n\n\n\n\n\n\n\n\nI visualized the clusters identified from the hierarchical clustering and added rectangular boundaries around the clusters in the dendrogram.\n\nplot(hclust_ward, cex = 0.6)\nrect.hclust(hclust_ward, \n            k = 6, \n            border = 2:5)\n\n\n\n\n\n\n\n\n\nshan_ict_mat &lt;- data.matrix(shan_ict)\n\n\nheatmaply(normalize(shan_ict_mat),\n          Colv=NA,\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\",\n          seriate = \"OLO\",\n          colors = Blues,\n          k_row = 6,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"Geographic Segmentation of Shan State by ICT indicators\",\n          xlab = \"ICT Indicators\",\n          ylab = \"Townships of Shan State\"\n          )\n\n\n\n\n\n\n\n\nI assigned clusters to each township and merged the cluster assignments with the original spatial data, followed by visualizing the cluster distribution on a map.\n\ngroups &lt;- as.factor(cutree(hclust_ward, k=6))\n\n\nshan_sf_cluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER`=`as.matrix.groups.`)\n\n\nqtm(shan_sf_cluster, \"CLUSTER\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html",
    "title": "Hands on Exercise 8",
    "section": "",
    "text": "In this hands-on exercise, I gained practical experience in delineating homogeneous regions using geographically referenced multivariate data. The analysis consists of two main techniques: hierarchical cluster analysis and spatially constrained cluster analysis.\n\n\nBy completing this exercise, I learned how to:\n\nConvert GIS polygon data into an R simple feature data.frame using appropriate functions from the sf package.\nTransform the simple feature data.frame into an R SpatialPolygonDataFrame object using relevant functions from the sf package.\nPerform cluster analysis using hclust() from Base R.\nExecute spatially constrained cluster analysis with skater() from Base R.\nVisualize the analysis output through the ggplot2 and tmap packages.\n\n\n\n\n\n\nIn spatial policy and geobusiness, it is common to divide markets or planning areas into homogeneous regions using multivariate data. In this exercise, I focused on dividing Shan State in Myanmar into homogeneous regions using several Information and Communication Technology (ICT) indicators, including Radio, Television, Landline Phone, Mobile Phone, Computer, and Internet at home.\n\n\n\n\nIn the code provided, I installed and loaded several R packages using pacman::p_load(), which efficiently manages package installation and loading:\n\npacman::p_load(spdep, tmap, sf, ClustGeo, \n               ggpubr, cluster, factoextra, NbClust,\n               heatmaply, corrplot, psych, tidyverse, GGally)\n\n\n\n\n\n\nI used the st_read() function from the sf package to read geospatial data for Myanmar township boundaries. I filtered the data to only include three regions of Shan State (East, North, and South) and selected columns 2 to 7. The resultant geospatial data was stored in shan_sf:\n\nshan_sf &lt;- st_read(dsn = \"data/geospatial\", \n                   layer = \"myanmar_township_boundaries\") %&gt;%\n  filter(ST %in% c(\"Shan (East)\", \"Shan (North)\", \"Shan (South)\")) %&gt;%\n  select(c(2:7))\n\nReading layer `myanmar_township_boundaries' from data source \n  `C:\\EasonXu-HY99\\IS415\\Hands-on_Ex\\Hands-on_Ex08\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.17275 ymin: 9.671252 xmax: 101.1699 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\nThe dataset is then displayed using the following functions:\n\nshan_sf\n\nSimple feature collection with 55 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 96.15107 ymin: 19.29932 xmax: 101.1699 ymax: 24.15907\nGeodetic CRS:  WGS 84\nFirst 10 features:\n             ST ST_PCODE       DT   DT_PCODE        TS  TS_PCODE\n1  Shan (North)   MMR015  Mongmit MMR015D008   Mongmit MMR015017\n2  Shan (South)   MMR014 Taunggyi MMR014D001   Pindaya MMR014006\n3  Shan (South)   MMR014 Taunggyi MMR014D001   Ywangan MMR014007\n4  Shan (South)   MMR014 Taunggyi MMR014D001  Pinlaung MMR014009\n5  Shan (North)   MMR015  Mongmit MMR015D008    Mabein MMR015018\n6  Shan (South)   MMR014 Taunggyi MMR014D001     Kalaw MMR014005\n7  Shan (South)   MMR014 Taunggyi MMR014D001     Pekon MMR014010\n8  Shan (South)   MMR014 Taunggyi MMR014D001  Lawksawk MMR014008\n9  Shan (North)   MMR015  Kyaukme MMR015D003 Nawnghkio MMR015013\n10 Shan (North)   MMR015  Kyaukme MMR015D003   Kyaukme MMR015012\n                         geometry\n1  MULTIPOLYGON (((96.96001 23...\n2  MULTIPOLYGON (((96.7731 21....\n3  MULTIPOLYGON (((96.78483 21...\n4  MULTIPOLYGON (((96.49518 20...\n5  MULTIPOLYGON (((96.66306 24...\n6  MULTIPOLYGON (((96.49518 20...\n7  MULTIPOLYGON (((97.14738 19...\n8  MULTIPOLYGON (((96.94981 22...\n9  MULTIPOLYGON (((96.75648 22...\n10 MULTIPOLYGON (((96.95498 22...\n\n\n\nglimpse(shan_sf)\n\nRows: 55\nColumns: 7\n$ ST       &lt;chr&gt; \"Shan (North)\", \"Shan (South)\", \"Shan (South)\", \"Shan (South)…\n$ ST_PCODE &lt;chr&gt; \"MMR015\", \"MMR014\", \"MMR014\", \"MMR014\", \"MMR015\", \"MMR014\", \"…\n$ DT       &lt;chr&gt; \"Mongmit\", \"Taunggyi\", \"Taunggyi\", \"Taunggyi\", \"Mongmit\", \"Ta…\n$ DT_PCODE &lt;chr&gt; \"MMR015D008\", \"MMR014D001\", \"MMR014D001\", \"MMR014D001\", \"MMR0…\n$ TS       &lt;chr&gt; \"Mongmit\", \"Pindaya\", \"Ywangan\", \"Pinlaung\", \"Mabein\", \"Kalaw…\n$ TS_PCODE &lt;chr&gt; \"MMR015017\", \"MMR014006\", \"MMR014007\", \"MMR014009\", \"MMR01501…\n$ geometry &lt;MULTIPOLYGON [°]&gt; MULTIPOLYGON (((96.96001 23..., MULTIPOLYGON (((…\n\n\n\n\n\nThe aspatial dataset, which contains ICT-related data for Shan State, is imported using read_csv():\n\nict &lt;- read_csv (\"data/aspatial/Shan-ICT.csv\")\n\nRows: 55 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): District Pcode, District Name, Township Pcode, Township Name\ndbl (7): Total households, Radio, Television, Land line phone, Mobile phone,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nsummary(ict)\n\n District Pcode     District Name      Township Pcode     Township Name     \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n Total households     Radio         Television    Land line phone \n Min.   : 3318    Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711    1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685    Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369    Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471    3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604    Max.   :30176   Max.   :62388   Max.   :6736.0  \n  Mobile phone      Computer      Internet at home\n Min.   :  150   Min.   :  20.0   Min.   :   8.0  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0  \n Median : 3559   Median : 244.0   Median : 316.0  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0  \n\n\n\n\n\nIn this section, I applied the SKATER (Spatial ’K’luster Analysis by Tree Edge Removal) approach to perform spatially constrained clustering. I started by converting the shan_sf spatial data into an as_Spatial() format, which is necessary for certain spatial clustering methods.\n\nshan_sp &lt;- as_Spatial(shan_sf)\n\n\n\n\nI created a neighbor list using the poly2nb() function, which identifies which polygons (townships) in shan_sp share borders. The neighbor relationships are crucial for defining the spatial structure of the data, and I summarized the neighbor list to understand its characteristics.\n\nshan.nb &lt;- poly2nb(shan_sp)\nsummary(shan.nb)\n\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\n\n\ncoords &lt;- st_coordinates(\n  st_centroid(st_geometry(shan_sf)))\n\n\nplot(st_geometry(shan_sf), \n     border=grey(.5))\nplot(shan.nb,\n     coords, \n     col=\"blue\", \n     add=TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\nI calculated the edge costs for the minimum spanning tree based on the ICT variables. First, I prepared the ict_derived dataset by calculating the proportion of households with each ICT service and merged this dataset with the shan_sf spatial data.\n\nict_derived &lt;- ict %&gt;%\n  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %&gt;%\n  mutate(`TV_PR` = `Television`/`Total households`*1000) %&gt;%\n  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %&gt;%\n  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %&gt;%\n  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %&gt;%\n  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %&gt;%\n  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,\n         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,\n         `TT_HOUSEHOLDS`=`Total households`,\n         `RADIO`=`Radio`, `TV`=`Television`, \n         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,\n         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) \n\n\nshan_sf &lt;- left_join(shan_sf, \n                     ict_derived, by=c(\"TS_PCODE\"=\"TS_PCODE\"))\n  \nwrite_rds(shan_sf, \"data/rds/shan_sf.rds\")\n\n\nshan_sf &lt;- read_rds(\"data/rds/shan_sf.rds\")\n\n\ncluster_vars &lt;- shan_sf %&gt;%\n  st_set_geometry(NULL) %&gt;%\n  select(\"TS.x\", \"RADIO_PR\", \"TV_PR\", \"LLPHONE_PR\", \"MPHONE_PR\", \"COMPUTER_PR\")\nhead(cluster_vars,10)\n\n        TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1    Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\n2    Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\n3    Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\n4   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\n5     Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\n6      Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\n7      Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\n8   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\n9  Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\n10   Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\n\nshan_ict &lt;- select(cluster_vars, c(2:6))\nhead(shan_ict, 10)\n\n   RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1  286.1852 554.1313   35.30618  260.6944    12.15939\n2  417.4647 505.1300   19.83584  162.3917    12.88190\n3  484.5215 260.5734   11.93591  120.2856     4.41465\n4  231.6499 541.7189   28.54454  249.4903    13.76255\n5  449.4903 708.6423   72.75255  392.6089    16.45042\n6  280.7624 611.6204   42.06478  408.7951    29.63160\n7  318.6118 535.8494   39.83270  214.8476    18.97032\n8  387.1017 630.0035   31.51366  320.5686    21.76677\n9  349.3359 547.9456   38.44960  323.0201    15.76465\n10 210.9548 601.1773   39.58267  372.4930    30.94709\n\nwrite_rds(shan_ict, \"data/rds/shan_ict.rds\")\n\n\nshan_ict &lt;- read_rds(\"data/rds/shan_ict.rds\")\n\n\nlcosts &lt;- nbcosts(shan.nb, shan_ict)\n\n\nshan.w &lt;- nb2listw(shan.nb, \n                   lcosts, \n                   style=\"B\")\nsummary(shan.w)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\nWeights style: B \nWeights constants summary:\n   n   nn       S0       S1        S2\nB 55 3025 76267.65 58260785 522016004\n\n\n\n\n\n\nI computed the minimum spanning tree (MST) from the list-weight object using the mstree() function.\n\nshan.mst &lt;- mstree(shan.w)\n\n\nclass(shan.mst)\n\n[1] \"mst\"    \"matrix\"\n\n\n\ndim(shan.mst)\n\n[1] 54  3\n\n\n\nhead(shan.mst)\n\n     [,1] [,2]      [,3]\n[1,]   31   25 229.44658\n[2,]   25   10 163.95741\n[3,]   10    1 144.02475\n[4,]   10    9 157.04230\n[5,]    9    8  90.82891\n[6,]    8    6 140.01101\n\n\n\nplot(st_geometry(shan_sf), \n                 border=gray(.5))\nplot.mst(shan.mst, \n         coords, \n         col=\"blue\", \n         cex.lab=0.7, \n         cex.circles=0.005, \n         add=TRUE)\n\n\n\n\n\n\n\n\n\n\n\nI performed spatially constrained clustering using the SKATER method. The SKATER algorithm removes edges from the minimum spanning tree to create clusters based on both spatial proximity and similarity in ICT indicators.\nI used the spdep::skater() function to compute 6 clusters (by making 5 cuts) based on the MST (Minimum Spanning Tree) and the ICT indicators.\n\nclust6 &lt;- spdep::skater(edges = shan.mst[,1:2], \n                 data = shan_ict, \n                 method = \"euclidean\", \n                 ncuts = 5)\n\n\nstr(clust6)\n\nList of 8\n $ groups      : num [1:55] 3 3 6 3 3 3 3 3 3 3 ...\n $ edges.groups:List of 6\n  ..$ :List of 3\n  .. ..$ node: num [1:22] 13 48 54 55 45 37 34 16 25 31 ...\n  .. ..$ edge: num [1:21, 1:3] 48 55 54 37 34 16 45 31 13 13 ...\n  .. ..$ ssw : num 3423\n  ..$ :List of 3\n  .. ..$ node: num [1:18] 47 27 53 38 42 15 41 51 43 32 ...\n  .. ..$ edge: num [1:17, 1:3] 53 15 42 38 41 51 15 27 15 43 ...\n  .. ..$ ssw : num 3759\n  ..$ :List of 3\n  .. ..$ node: num [1:11] 2 6 8 1 36 4 10 9 46 5 ...\n  .. ..$ edge: num [1:10, 1:3] 6 1 8 36 4 6 8 10 10 9 ...\n  .. ..$ ssw : num 1458\n  ..$ :List of 3\n  .. ..$ node: num [1:2] 44 20\n  .. ..$ edge: num [1, 1:3] 44 20 95\n  .. ..$ ssw : num 95\n  ..$ :List of 3\n  .. ..$ node: num 23\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n  ..$ :List of 3\n  .. ..$ node: num 3\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n $ not.prune   : NULL\n $ candidates  : int [1:6] 1 2 3 4 5 6\n $ ssto        : num 12613\n $ ssw         : num [1:6] 12613 10977 9962 9540 9123 ...\n $ crit        : num [1:2] 1 Inf\n $ vec.crit    : num [1:55] 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"class\")= chr \"skater\"\n\n\n\nccs6 &lt;- clust6$groups\nccs6\n\n [1] 3 3 6 3 3 3 3 3 3 3 2 1 1 1 2 1 1 1 2 4 1 2 5 1 1 1 2 1 2 2 1 2 2 1 1 3 1 2\n[39] 2 2 2 2 2 4 1 3 2 1 1 1 2 1 2 1 1\n\n\n\ntable(ccs6)\n\nccs6\n 1  2  3  4  5  6 \n22 18 11  2  1  1 \n\n\n\nplot(st_geometry(shan_sf), \n     border=gray(.5))\nplot(clust6, \n     coords, \n     cex.lab=.7,\n     groups.colors=c(\"red\",\"green\",\"blue\", \"brown\", \"pink\"),\n     cex.circles=0.005, \n     add=TRUE)\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\n\n\n\n\n\n\n\n\n\n\n\n\nTo visualize the clusters further, I computed a distance matrix using the Euclidean method and applied hierarchical clustering (hclust) to compare it with the SKATER clusters. I also created a choropleth map to display both sets of clusters side by side.\n\nproxmat &lt;- dist(shan_ict, method = 'euclidean')\n\n\nhclust_ward &lt;- hclust(proxmat, method = 'ward.D')\n\n\ngroups &lt;- as.factor(cutree(hclust_ward, k=6))\n\n\nshan_sf_cluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER`=`as.matrix.groups.`)\n\n\ngroups_mat &lt;- as.matrix(clust6$groups)\nshan_sf_spatialcluster &lt;- cbind(shan_sf_cluster, as.factor(groups_mat)) %&gt;%\n  rename(`SP_CLUSTER`=`as.factor.groups_mat.`)\nqtm(shan_sf_spatialcluster, \"SP_CLUSTER\")\n\n\n\n\n\n\n\n\n\nhclust.map &lt;- qtm(shan_sf_cluster,\n                  \"CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\nshclust.map &lt;- qtm(shan_sf_spatialcluster,\n                   \"SP_CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(hclust.map, shclust.map,\n             asp=NA, ncol=2)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe ClustGeo package allows me to perform spatially constrained cluster analysis by combining attribute-based dissimilarity and spatial/geographical constraints. It offers a Ward-like hierarchical clustering algorithm (hclustgeo()) that accounts for both data attributes and spatial relationships.\nI used two dissimilarity matrices: D0 for attributes (such as ICT variables) and D1 for spatial constraints. The goal is to find a balance between the two by using a mixing parameter, alpha. This parameter influences how much weight is given to spatial proximity when forming clusters.\n\n\n\nI began by performing standard hierarchical clustering using hclustgeo() based on the attribute dissimilarity matrix (proxmat).\n\nnongeo_cluster &lt;- hclustgeo(proxmat)\nplot(nongeo_cluster, cex = 0.5)\nrect.hclust(nongeo_cluster, \n            k = 6, \n            border = 2:5)\n\n\n\n\n\n\n\n\n\n\n\ngroups &lt;- as.factor(cutree(nongeo_cluster, k=6))\n\n\nshan_sf_ngeo_cluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\nqtm(shan_sf_ngeo_cluster, \"CLUSTER\")\n\n\n\n\n\n\n\n\n\n\n\n\nTo introduce spatial constraints, I computed the distance matrix between townships using st_distance() and then used the choicealpha() function to find an optimal value for alpha that balances spatial contiguity and clustering quality.\n\ndist &lt;- st_distance(shan_sf, shan_sf)\ndistmat &lt;- as.dist(dist)\n\n\ncr &lt;- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K=6, graph = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclustG &lt;- hclustgeo(proxmat, distmat, alpha = 0.2)\n\n\ngroups &lt;- as.factor(cutree(clustG, k=6))\n\n\nshan_sf_Gcluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\nshan_sf_Gcluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\nqtm(shan_sf_Gcluster, \"CLUSTER\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nI created boxplots to explore how the values of individual ICT indicators vary across the clusters formed.\n\nggplot(data = shan_sf_ngeo_cluster,\n       aes(x = CLUSTER, y = RADIO_PR)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n\nI used parallel coordinate plots to visualize the multivariate relationships between ICT variables across the clusters.\n\nggparcoord(data = shan_sf_ngeo_cluster, \n           columns = c(17:21), \n           scale = \"globalminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of ICT Variables by Cluster\") +\n  facet_grid(~ CLUSTER) + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\n\n\n\n\n\nshan_sf_ngeo_cluster %&gt;% \n  st_set_geometry(NULL) %&gt;%\n  group_by(CLUSTER) %&gt;%\n  summarise(mean_RADIO_PR = mean(RADIO_PR),\n            mean_TV_PR = mean(TV_PR),\n            mean_LLPHONE_PR = mean(LLPHONE_PR),\n            mean_MPHONE_PR = mean(MPHONE_PR),\n            mean_COMPUTER_PR = mean(COMPUTER_PR))\n\n# A tibble: 6 × 6\n  CLUSTER mean_RADIO_PR mean_TV_PR mean_LLPHONE_PR mean_MPHONE_PR\n  &lt;chr&gt;           &lt;dbl&gt;      &lt;dbl&gt;           &lt;dbl&gt;          &lt;dbl&gt;\n1 1               221.        521.            44.2           246.\n2 2               237.        402.            23.9           134.\n3 3               300.        611.            52.2           392.\n4 4               196.        744.            99.0           651.\n5 5               124.        224.            38.0           132.\n6 6                98.6       499.            74.5           468.\n# ℹ 1 more variable: mean_COMPUTER_PR &lt;dbl&gt;"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#data-import-and-preparation-explanation",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#data-import-and-preparation-explanation",
    "title": "Hands on Exercise 8",
    "section": "",
    "text": "I used the st_read() function from the sf package to read geospatial data for Myanmar township boundaries. I filtered the data to only include three regions of Shan State (East, North, and South) and selected columns 2 to 7. The resultant geospatial data was stored in shan_sf:\n\nshan_sf &lt;- st_read(dsn = \"data/geospatial\", \n                   layer = \"myanmar_township_boundaries\") %&gt;%\n  filter(ST %in% c(\"Shan (East)\", \"Shan (North)\", \"Shan (South)\")) %&gt;%\n  select(c(2:7))\n\nReading layer `myanmar_township_boundaries' from data source \n  `C:\\EasonXu-HY99\\IS415\\Hands-on_Ex\\Hands-on_Ex08\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.17275 ymin: 9.671252 xmax: 101.1699 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\nThe dataset is then displayed using the following functions:\n\nshan_sf\n\nSimple feature collection with 55 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 96.15107 ymin: 19.29932 xmax: 101.1699 ymax: 24.15907\nGeodetic CRS:  WGS 84\nFirst 10 features:\n             ST ST_PCODE       DT   DT_PCODE        TS  TS_PCODE\n1  Shan (North)   MMR015  Mongmit MMR015D008   Mongmit MMR015017\n2  Shan (South)   MMR014 Taunggyi MMR014D001   Pindaya MMR014006\n3  Shan (South)   MMR014 Taunggyi MMR014D001   Ywangan MMR014007\n4  Shan (South)   MMR014 Taunggyi MMR014D001  Pinlaung MMR014009\n5  Shan (North)   MMR015  Mongmit MMR015D008    Mabein MMR015018\n6  Shan (South)   MMR014 Taunggyi MMR014D001     Kalaw MMR014005\n7  Shan (South)   MMR014 Taunggyi MMR014D001     Pekon MMR014010\n8  Shan (South)   MMR014 Taunggyi MMR014D001  Lawksawk MMR014008\n9  Shan (North)   MMR015  Kyaukme MMR015D003 Nawnghkio MMR015013\n10 Shan (North)   MMR015  Kyaukme MMR015D003   Kyaukme MMR015012\n                         geometry\n1  MULTIPOLYGON (((96.96001 23...\n2  MULTIPOLYGON (((96.7731 21....\n3  MULTIPOLYGON (((96.78483 21...\n4  MULTIPOLYGON (((96.49518 20...\n5  MULTIPOLYGON (((96.66306 24...\n6  MULTIPOLYGON (((96.49518 20...\n7  MULTIPOLYGON (((97.14738 19...\n8  MULTIPOLYGON (((96.94981 22...\n9  MULTIPOLYGON (((96.75648 22...\n10 MULTIPOLYGON (((96.95498 22...\n\n\n\nglimpse(shan_sf)\n\nRows: 55\nColumns: 7\n$ ST       &lt;chr&gt; \"Shan (North)\", \"Shan (South)\", \"Shan (South)\", \"Shan (South)…\n$ ST_PCODE &lt;chr&gt; \"MMR015\", \"MMR014\", \"MMR014\", \"MMR014\", \"MMR015\", \"MMR014\", \"…\n$ DT       &lt;chr&gt; \"Mongmit\", \"Taunggyi\", \"Taunggyi\", \"Taunggyi\", \"Mongmit\", \"Ta…\n$ DT_PCODE &lt;chr&gt; \"MMR015D008\", \"MMR014D001\", \"MMR014D001\", \"MMR014D001\", \"MMR0…\n$ TS       &lt;chr&gt; \"Mongmit\", \"Pindaya\", \"Ywangan\", \"Pinlaung\", \"Mabein\", \"Kalaw…\n$ TS_PCODE &lt;chr&gt; \"MMR015017\", \"MMR014006\", \"MMR014007\", \"MMR014009\", \"MMR01501…\n$ geometry &lt;MULTIPOLYGON [°]&gt; MULTIPOLYGON (((96.96001 23..., MULTIPOLYGON (((…\n\n\n\n\n\nThe aspatial dataset, which contains ICT-related data for Shan State, is imported using read_csv():\n\nict &lt;- read_csv (\"data/aspatial/Shan-ICT.csv\")\n\nRows: 55 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): District Pcode, District Name, Township Pcode, Township Name\ndbl (7): Total households, Radio, Television, Land line phone, Mobile phone,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nsummary(ict)\n\n District Pcode     District Name      Township Pcode     Township Name     \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n Total households     Radio         Television    Land line phone \n Min.   : 3318    Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711    1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685    Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369    Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471    3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604    Max.   :30176   Max.   :62388   Max.   :6736.0  \n  Mobile phone      Computer      Internet at home\n Min.   :  150   Min.   :  20.0   Min.   :   8.0  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0  \n Median : 3559   Median : 244.0   Median : 316.0  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0  \n\n\n\n\n\nIn this section, I applied the SKATER (Spatial ’K’luster Analysis by Tree Edge Removal) approach to perform spatially constrained clustering. I started by converting the shan_sf spatial data into an as_Spatial() format, which is necessary for certain spatial clustering methods.\n\nshan_sp &lt;- as_Spatial(shan_sf)\n\n\n\n\nI created a neighbor list using the poly2nb() function, which identifies which polygons (townships) in shan_sp share borders. The neighbor relationships are crucial for defining the spatial structure of the data, and I summarized the neighbor list to understand its characteristics.\n\nshan.nb &lt;- poly2nb(shan_sp)\nsummary(shan.nb)\n\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\n\n\ncoords &lt;- st_coordinates(\n  st_centroid(st_geometry(shan_sf)))\n\n\nplot(st_geometry(shan_sf), \n     border=grey(.5))\nplot(shan.nb,\n     coords, \n     col=\"blue\", \n     add=TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\nI calculated the edge costs for the minimum spanning tree based on the ICT variables. First, I prepared the ict_derived dataset by calculating the proportion of households with each ICT service and merged this dataset with the shan_sf spatial data.\n\nict_derived &lt;- ict %&gt;%\n  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %&gt;%\n  mutate(`TV_PR` = `Television`/`Total households`*1000) %&gt;%\n  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %&gt;%\n  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %&gt;%\n  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %&gt;%\n  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %&gt;%\n  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,\n         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,\n         `TT_HOUSEHOLDS`=`Total households`,\n         `RADIO`=`Radio`, `TV`=`Television`, \n         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,\n         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) \n\n\nshan_sf &lt;- left_join(shan_sf, \n                     ict_derived, by=c(\"TS_PCODE\"=\"TS_PCODE\"))\n  \nwrite_rds(shan_sf, \"data/rds/shan_sf.rds\")\n\n\nshan_sf &lt;- read_rds(\"data/rds/shan_sf.rds\")\n\n\ncluster_vars &lt;- shan_sf %&gt;%\n  st_set_geometry(NULL) %&gt;%\n  select(\"TS.x\", \"RADIO_PR\", \"TV_PR\", \"LLPHONE_PR\", \"MPHONE_PR\", \"COMPUTER_PR\")\nhead(cluster_vars,10)\n\n        TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1    Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\n2    Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\n3    Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\n4   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\n5     Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\n6      Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\n7      Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\n8   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\n9  Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\n10   Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\n\nshan_ict &lt;- select(cluster_vars, c(2:6))\nhead(shan_ict, 10)\n\n   RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1  286.1852 554.1313   35.30618  260.6944    12.15939\n2  417.4647 505.1300   19.83584  162.3917    12.88190\n3  484.5215 260.5734   11.93591  120.2856     4.41465\n4  231.6499 541.7189   28.54454  249.4903    13.76255\n5  449.4903 708.6423   72.75255  392.6089    16.45042\n6  280.7624 611.6204   42.06478  408.7951    29.63160\n7  318.6118 535.8494   39.83270  214.8476    18.97032\n8  387.1017 630.0035   31.51366  320.5686    21.76677\n9  349.3359 547.9456   38.44960  323.0201    15.76465\n10 210.9548 601.1773   39.58267  372.4930    30.94709\n\nwrite_rds(shan_ict, \"data/rds/shan_ict.rds\")\n\n\nshan_ict &lt;- read_rds(\"data/rds/shan_ict.rds\")\n\n\nlcosts &lt;- nbcosts(shan.nb, shan_ict)\n\n\nshan.w &lt;- nb2listw(shan.nb, \n                   lcosts, \n                   style=\"B\")\nsummary(shan.w)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\nWeights style: B \nWeights constants summary:\n   n   nn       S0       S1        S2\nB 55 3025 76267.65 58260785 522016004\n\n\n\n\n\n\nI computed the minimum spanning tree (MST) from the list-weight object using the mstree() function.\n\nshan.mst &lt;- mstree(shan.w)\n\n\nclass(shan.mst)\n\n[1] \"mst\"    \"matrix\"\n\n\n\ndim(shan.mst)\n\n[1] 54  3\n\n\n\nhead(shan.mst)\n\n     [,1] [,2]      [,3]\n[1,]   31   25 229.44658\n[2,]   25   10 163.95741\n[3,]   10    1 144.02475\n[4,]   10    9 157.04230\n[5,]    9    8  90.82891\n[6,]    8    6 140.01101\n\n\n\nplot(st_geometry(shan_sf), \n                 border=gray(.5))\nplot.mst(shan.mst, \n         coords, \n         col=\"blue\", \n         cex.lab=0.7, \n         cex.circles=0.005, \n         add=TRUE)\n\n\n\n\n\n\n\n\n\n\n\nI performed spatially constrained clustering using the SKATER method. The SKATER algorithm removes edges from the minimum spanning tree to create clusters based on both spatial proximity and similarity in ICT indicators.\nI used the spdep::skater() function to compute 6 clusters (by making 5 cuts) based on the MST (Minimum Spanning Tree) and the ICT indicators.\n\nclust6 &lt;- spdep::skater(edges = shan.mst[,1:2], \n                 data = shan_ict, \n                 method = \"euclidean\", \n                 ncuts = 5)\n\n\nstr(clust6)\n\nList of 8\n $ groups      : num [1:55] 3 3 6 3 3 3 3 3 3 3 ...\n $ edges.groups:List of 6\n  ..$ :List of 3\n  .. ..$ node: num [1:22] 13 48 54 55 45 37 34 16 25 31 ...\n  .. ..$ edge: num [1:21, 1:3] 48 55 54 37 34 16 45 31 13 13 ...\n  .. ..$ ssw : num 3423\n  ..$ :List of 3\n  .. ..$ node: num [1:18] 47 27 53 38 42 15 41 51 43 32 ...\n  .. ..$ edge: num [1:17, 1:3] 53 15 42 38 41 51 15 27 15 43 ...\n  .. ..$ ssw : num 3759\n  ..$ :List of 3\n  .. ..$ node: num [1:11] 2 6 8 1 36 4 10 9 46 5 ...\n  .. ..$ edge: num [1:10, 1:3] 6 1 8 36 4 6 8 10 10 9 ...\n  .. ..$ ssw : num 1458\n  ..$ :List of 3\n  .. ..$ node: num [1:2] 44 20\n  .. ..$ edge: num [1, 1:3] 44 20 95\n  .. ..$ ssw : num 95\n  ..$ :List of 3\n  .. ..$ node: num 23\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n  ..$ :List of 3\n  .. ..$ node: num 3\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n $ not.prune   : NULL\n $ candidates  : int [1:6] 1 2 3 4 5 6\n $ ssto        : num 12613\n $ ssw         : num [1:6] 12613 10977 9962 9540 9123 ...\n $ crit        : num [1:2] 1 Inf\n $ vec.crit    : num [1:55] 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"class\")= chr \"skater\"\n\n\n\nccs6 &lt;- clust6$groups\nccs6\n\n [1] 3 3 6 3 3 3 3 3 3 3 2 1 1 1 2 1 1 1 2 4 1 2 5 1 1 1 2 1 2 2 1 2 2 1 1 3 1 2\n[39] 2 2 2 2 2 4 1 3 2 1 1 1 2 1 2 1 1\n\n\n\ntable(ccs6)\n\nccs6\n 1  2  3  4  5  6 \n22 18 11  2  1  1 \n\n\n\nplot(st_geometry(shan_sf), \n     border=gray(.5))\nplot(clust6, \n     coords, \n     cex.lab=.7,\n     groups.colors=c(\"red\",\"green\",\"blue\", \"brown\", \"pink\"),\n     cex.circles=0.005, \n     add=TRUE)\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\n\n\n\n\n\n\n\n\n\n\n\n\nTo visualize the clusters further, I computed a distance matrix using the Euclidean method and applied hierarchical clustering (hclust) to compare it with the SKATER clusters. I also created a choropleth map to display both sets of clusters side by side.\n\nproxmat &lt;- dist(shan_ict, method = 'euclidean')\n\n\nhclust_ward &lt;- hclust(proxmat, method = 'ward.D')\n\n\ngroups &lt;- as.factor(cutree(hclust_ward, k=6))\n\n\nshan_sf_cluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER`=`as.matrix.groups.`)\n\n\ngroups_mat &lt;- as.matrix(clust6$groups)\nshan_sf_spatialcluster &lt;- cbind(shan_sf_cluster, as.factor(groups_mat)) %&gt;%\n  rename(`SP_CLUSTER`=`as.factor.groups_mat.`)\nqtm(shan_sf_spatialcluster, \"SP_CLUSTER\")\n\n\n\n\n\n\n\n\n\nhclust.map &lt;- qtm(shan_sf_cluster,\n                  \"CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\nshclust.map &lt;- qtm(shan_sf_spatialcluster,\n                   \"SP_CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(hclust.map, shclust.map,\n             asp=NA, ncol=2)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them)."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#spatially-constrained-clustering-skater-approach",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#spatially-constrained-clustering-skater-approach",
    "title": "Hands on Exercise 8",
    "section": "",
    "text": "shan_sp &lt;- as_Spatial(shan_sf)\n\n\n\n\nshan.nb &lt;- poly2nb(shan_sp)\nsummary(shan.nb)\n\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\n\n\ncoords &lt;- st_coordinates(\n  st_centroid(st_geometry(shan_sf)))\n\n\nplot(st_geometry(shan_sf), \n     border=grey(.5))\nplot(shan.nb,\n     coords, \n     col=\"blue\", \n     add=TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nict_derived &lt;- ict %&gt;%\n  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %&gt;%\n  mutate(`TV_PR` = `Television`/`Total households`*1000) %&gt;%\n  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %&gt;%\n  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %&gt;%\n  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %&gt;%\n  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %&gt;%\n  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,\n         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,\n         `TT_HOUSEHOLDS`=`Total households`,\n         `RADIO`=`Radio`, `TV`=`Television`, \n         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,\n         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) \n\n\nshan_sf &lt;- left_join(shan_sf, \n                     ict_derived, by=c(\"TS_PCODE\"=\"TS_PCODE\"))\n  \nwrite_rds(shan_sf, \"data/rds/shan_sf.rds\")\n\n\nshan_sf &lt;- read_rds(\"data/rds/shan_sf.rds\")\n\n\ncluster_vars &lt;- shan_sf %&gt;%\n  st_set_geometry(NULL) %&gt;%\n  select(\"TS.x\", \"RADIO_PR\", \"TV_PR\", \"LLPHONE_PR\", \"MPHONE_PR\", \"COMPUTER_PR\")\nhead(cluster_vars,10)\n\n        TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1    Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\n2    Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\n3    Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\n4   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\n5     Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\n6      Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\n7      Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\n8   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\n9  Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\n10   Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\n\nshan_ict &lt;- select(cluster_vars, c(2:6))\nhead(shan_ict, 10)\n\n   RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1  286.1852 554.1313   35.30618  260.6944    12.15939\n2  417.4647 505.1300   19.83584  162.3917    12.88190\n3  484.5215 260.5734   11.93591  120.2856     4.41465\n4  231.6499 541.7189   28.54454  249.4903    13.76255\n5  449.4903 708.6423   72.75255  392.6089    16.45042\n6  280.7624 611.6204   42.06478  408.7951    29.63160\n7  318.6118 535.8494   39.83270  214.8476    18.97032\n8  387.1017 630.0035   31.51366  320.5686    21.76677\n9  349.3359 547.9456   38.44960  323.0201    15.76465\n10 210.9548 601.1773   39.58267  372.4930    30.94709\n\nwrite_rds(shan_ict, \"data/rds/shan_ict.rds\")\n\n\nshan_ict &lt;- read_rds(\"data/rds/shan_ict.rds\")\n\n\nlcosts &lt;- nbcosts(shan.nb, shan_ict)\n\n\nshan.w &lt;- nb2listw(shan.nb, \n                   lcosts, \n                   style=\"B\")\nsummary(shan.w)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\nWeights style: B \nWeights constants summary:\n   n   nn       S0       S1        S2\nB 55 3025 76267.65 58260785 522016004\n\n\n\n\n\n\n\nshan.mst &lt;- mstree(shan.w)\n\n\nclass(shan.mst)\n\n[1] \"mst\"    \"matrix\"\n\n\n\ndim(shan.mst)\n\n[1] 54  3\n\n\n\nhead(shan.mst)\n\n     [,1] [,2]      [,3]\n[1,]   47   27 187.40057\n[2,]   27   30  57.60801\n[3,]   27   41  78.29342\n[4,]   30   51 108.37735\n[5,]   51   38 146.66661\n[6,]   41   39 162.80878\n\n\n\nplot(st_geometry(shan_sf), \n                 border=gray(.5))\nplot.mst(shan.mst, \n         coords, \n         col=\"blue\", \n         cex.lab=0.7, \n         cex.circles=0.005, \n         add=TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\nclust6 &lt;- spdep::skater(edges = shan.mst[,1:2], \n                 data = shan_ict, \n                 method = \"euclidean\", \n                 ncuts = 5)\n\n\nstr(clust6)\n\nList of 8\n $ groups      : num [1:55] 3 3 6 3 3 3 3 3 3 3 ...\n $ edges.groups:List of 6\n  ..$ :List of 3\n  .. ..$ node: num [1:18] 47 53 38 42 15 41 51 43 32 30 ...\n  .. ..$ edge: num [1:17, 1:3] 53 15 42 38 41 51 15 47 15 43 ...\n  .. ..$ ssw : num 3759\n  ..$ :List of 3\n  .. ..$ node: num [1:22] 13 48 54 55 45 37 34 16 25 52 ...\n  .. ..$ edge: num [1:21, 1:3] 48 55 54 37 34 16 45 25 13 13 ...\n  .. ..$ ssw : num 3423\n  ..$ :List of 3\n  .. ..$ node: num [1:11] 2 6 8 1 36 4 10 9 46 5 ...\n  .. ..$ edge: num [1:10, 1:3] 6 1 8 36 4 6 8 10 10 9 ...\n  .. ..$ ssw : num 1458\n  ..$ :List of 3\n  .. ..$ node: num [1:2] 44 20\n  .. ..$ edge: num [1, 1:3] 44 20 95\n  .. ..$ ssw : num 95\n  ..$ :List of 3\n  .. ..$ node: num 23\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n  ..$ :List of 3\n  .. ..$ node: num 3\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n $ not.prune   : NULL\n $ candidates  : int [1:6] 1 2 3 4 5 6\n $ ssto        : num 12613\n $ ssw         : num [1:6] 12613 10977 9962 9540 9123 ...\n $ crit        : num [1:2] 1 Inf\n $ vec.crit    : num [1:55] 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"class\")= chr \"skater\"\n\n\n\nccs6 &lt;- clust6$groups\nccs6\n\n [1] 3 3 6 3 3 3 3 3 3 3 1 2 2 2 1 2 2 2 1 4 2 1 5 2 2 2 1 2 1 1 2 1 1 2 2 3 2 1\n[39] 1 1 1 1 1 4 2 3 1 2 2 2 1 2 1 2 2\n\n\n\ntable(ccs6)\n\nccs6\n 1  2  3  4  5  6 \n18 22 11  2  1  1 \n\n\n\nplot(st_geometry(shan_sf), \n     border=gray(.5))\nplot(clust6, \n     coords, \n     cex.lab=.7,\n     groups.colors=c(\"red\",\"green\",\"blue\", \"brown\", \"pink\"),\n     cex.circles=0.005, \n     add=TRUE)\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\n\n\n\n\n\n\n\n\n\n\n\n\n\nproxmat &lt;- dist(shan_ict, method = 'euclidean')\n\n\nhclust_ward &lt;- hclust(proxmat, method = 'ward.D')\n\n\ngroups &lt;- as.factor(cutree(hclust_ward, k=6))\n\n\nshan_sf_cluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER`=`as.matrix.groups.`)\n\n\ngroups_mat &lt;- as.matrix(clust6$groups)\nshan_sf_spatialcluster &lt;- cbind(shan_sf_cluster, as.factor(groups_mat)) %&gt;%\n  rename(`SP_CLUSTER`=`as.factor.groups_mat.`)\nqtm(shan_sf_spatialcluster, \"SP_CLUSTER\")\n\n\n\n\n\n\n\n\n\nhclust.map &lt;- qtm(shan_sf_cluster,\n                  \"CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\nshclust.map &lt;- qtm(shan_sf_spatialcluster,\n                   \"SP_CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(hclust.map, shclust.map,\n             asp=NA, ncol=2)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them)."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#spatially-constrained-clustering-clustgeo-method",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#spatially-constrained-clustering-clustgeo-method",
    "title": "Hands on Exercise 8",
    "section": "",
    "text": "ClustGeo package is an R package specially designed to support the need of performing spatially constrained cluster analysis. More specifically, it provides a Ward-like hierarchical clustering algorithm called hclustgeo() including spatial/geographical constraints.\nIn the nutshell, the algorithm uses two dissimilarity matrices D0 and D1 along with a mixing parameter alpha, whereby the value of alpha must be a real number between [0, 1]. D0 can be non-Euclidean and the weights of the observations can be non-uniform. It gives the dissimilarities in the attribute/clustering variable space. D1, on the other hand, gives the dissimilarities in the constraint space. The criterion minimised at each stage is a convex combination of the homogeneity criterion calculated with D0 and the homogeneity criterion calculated with D1.\nThe idea is then to determine a value of alpha which increases the spatial contiguity without deteriorating too much the quality of the solution based on the variables of interest. This need is supported by a function called choicealpha().\n\n\n\n\nnongeo_cluster &lt;- hclustgeo(proxmat)\nplot(nongeo_cluster, cex = 0.5)\nrect.hclust(nongeo_cluster, \n            k = 6, \n            border = 2:5)\n\n\n\n\n\n\n\n\n\n\n\ngroups &lt;- as.factor(cutree(nongeo_cluster, k=6))\n\n\nshan_sf_ngeo_cluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\nqtm(shan_sf_ngeo_cluster, \"CLUSTER\")\n\n\n\n\n\n\n\n\n\n\n\n\n\ndist &lt;- st_distance(shan_sf, shan_sf)\ndistmat &lt;- as.dist(dist)\n\n\ncr &lt;- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K=6, graph = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclustG &lt;- hclustgeo(proxmat, distmat, alpha = 0.2)\n\n\ngroups &lt;- as.factor(cutree(clustG, k=6))\n\n\nshan_sf_Gcluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\nshan_sf_Gcluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\nqtm(shan_sf_Gcluster, \"CLUSTER\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#visual-interpretation-of-clusters",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#visual-interpretation-of-clusters",
    "title": "Hands on Exercise 8",
    "section": "",
    "text": "I created boxplots to explore how the values of individual ICT indicators vary across the clusters formed.\n\nggplot(data = shan_sf_ngeo_cluster,\n       aes(x = CLUSTER, y = RADIO_PR)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n\nI used parallel coordinate plots to visualize the multivariate relationships between ICT variables across the clusters.\n\nggparcoord(data = shan_sf_ngeo_cluster, \n           columns = c(17:21), \n           scale = \"globalminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of ICT Variables by Cluster\") +\n  facet_grid(~ CLUSTER) + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\n\n\n\n\n\nshan_sf_ngeo_cluster %&gt;% \n  st_set_geometry(NULL) %&gt;%\n  group_by(CLUSTER) %&gt;%\n  summarise(mean_RADIO_PR = mean(RADIO_PR),\n            mean_TV_PR = mean(TV_PR),\n            mean_LLPHONE_PR = mean(LLPHONE_PR),\n            mean_MPHONE_PR = mean(MPHONE_PR),\n            mean_COMPUTER_PR = mean(COMPUTER_PR))\n\n# A tibble: 6 × 6\n  CLUSTER mean_RADIO_PR mean_TV_PR mean_LLPHONE_PR mean_MPHONE_PR\n  &lt;chr&gt;           &lt;dbl&gt;      &lt;dbl&gt;           &lt;dbl&gt;          &lt;dbl&gt;\n1 1               221.        521.            44.2           246.\n2 2               237.        402.            23.9           134.\n3 3               300.        611.            52.2           392.\n4 4               196.        744.            99.0           651.\n5 5               124.        224.            38.0           132.\n6 6                98.6       499.            74.5           468.\n# ℹ 1 more variable: mean_COMPUTER_PR &lt;dbl&gt;"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#spatially-constrained-clustering-using-the-clustgeo-method",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#spatially-constrained-clustering-using-the-clustgeo-method",
    "title": "Hands on Exercise 8",
    "section": "",
    "text": "The ClustGeo package allows me to perform spatially constrained cluster analysis by combining attribute-based dissimilarity and spatial/geographical constraints. It offers a Ward-like hierarchical clustering algorithm (hclustgeo()) that accounts for both data attributes and spatial relationships.\nI used two dissimilarity matrices: D0 for attributes (such as ICT variables) and D1 for spatial constraints. The goal is to find a balance between the two by using a mixing parameter, alpha. This parameter influences how much weight is given to spatial proximity when forming clusters.\n\n\n\nI began by performing standard hierarchical clustering using hclustgeo() based on the attribute dissimilarity matrix (proxmat).\n\nnongeo_cluster &lt;- hclustgeo(proxmat)\nplot(nongeo_cluster, cex = 0.5)\nrect.hclust(nongeo_cluster, \n            k = 6, \n            border = 2:5)\n\n\n\n\n\n\n\n\n\n\n\ngroups &lt;- as.factor(cutree(nongeo_cluster, k=6))\n\n\nshan_sf_ngeo_cluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\nqtm(shan_sf_ngeo_cluster, \"CLUSTER\")\n\n\n\n\n\n\n\n\n\n\n\n\nTo introduce spatial constraints, I computed the distance matrix between townships using st_distance() and then used the choicealpha() function to find an optimal value for alpha that balances spatial contiguity and clustering quality.\n\ndist &lt;- st_distance(shan_sf, shan_sf)\ndistmat &lt;- as.dist(dist)\n\n\ncr &lt;- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K=6, graph = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclustG &lt;- hclustgeo(proxmat, distmat, alpha = 0.2)\n\n\ngroups &lt;- as.factor(cutree(clustG, k=6))\n\n\nshan_sf_Gcluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\nshan_sf_Gcluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\nqtm(shan_sf_Gcluster, \"CLUSTER\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In-class_Ex09.html",
    "href": "In-class_Ex/In-class_Ex09/In-class_Ex09.html",
    "title": "In Class Exercise 9",
    "section": "",
    "text": "Geographic Segmentation with Spatially Constrained Cluster Analysis\nThis section outlines the application of various clustering methods for segmenting geographic regions in Shan State, Myanmar, based on ICT indicators. I utilized packages such as spdep, sf, ClustGeo, and more to perform the analysis and visualize the results.\n\nLoading Required Packages and Data\nFirst, I loaded the necessary R packages and read the spatial and aspatial datasets that contain the ICT indicators and spatial features.\n\npacman::p_load(spdep, sp, tmap, sf, ClustGeo, cluster, factoextra, NbClust, tidyverse, GGally)\n\n\nshan_sf &lt;- read_rds(\"data/rds/shan_sf.rds\") \nshan_ict &lt;- read_rds(\"data/rds/shan_ict.rds\") \nshan_sf_cluster &lt;- read_rds(\"data/rds/shan_sf_cluster.rds\")\n\n\n\nPerforming Hierarchical Clustering\nI calculated the Euclidean distance matrix and applied hierarchical clustering using the Ward method. Six clusters were then identified using cutree().\n\nproxmat &lt;- dist(shan_ict, method = 'euclidean') \nhclust_ward &lt;- hclust(proxmat, method = 'ward.D') \ngroups &lt;- as.factor(cutree(hclust_ward, k=6))\n\nI added the clustering results to the spatial dataset and renamed the columns accordingly.\n\nshan_sf_cluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;% \n  rename(`CLUSTER` = `as.matrix.groups.`) %&gt;% \n  select(-c(3:4, 7:9)) %&gt;% \n  rename(TS = TS.x)\n\nI plotted the dendrogram to visualize the hierarchical clustering results and highlighted the six clusters with different colored rectangles.\n\nplot(hclust_ward, cex = 0.6) \nrect.hclust(hclust_ward, k = 6, border = 2:5)\n\n\n\n\n\n\n\n\n\n\nVisualizing Clusters on a Map\nUsing qtm(), I visualized the six clusters on a choropleth map.\n\nqtm(shan_sf_cluster, \"CLUSTER\")\n\n\n\n\n\n\n\n\n\n\nComputing Spatial Proximity and Neighborhood Information\nI computed the pairwise spatial distances between the townships and created a neighborhood list using poly2nb(). The neighborhood relationships were summarized, and the results were plotted along with the township boundaries.\n\ndist &lt;- st_distance(shan_sf, shan_sf) \ndistmat &lt;- as.dist(dist)\n\n\nshan.nb &lt;- poly2nb(shan_sf) \nsummary(shan.nb)\n\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\n\nno need to change shan_sf to shan_sp\n\nplot(st_geometry(shan_sf), border = grey(.5)) \npts &lt;- st_coordinates(st_centroid(shan_sf)) \n\nWarning: st_centroid assumes attributes are constant over geometries\n\nplot(shan.nb, pts, col=\"blue\", add=TRUE)\n\n\n\n\n\n\n\n\n\n\nComputing Costs and Constructing Minimum Spanning Tree (MST)\nI computed the edge costs based on the ICT indicators and constructed the MST using the neighborhood list.\n\nlcosts &lt;- nbcosts(shan.nb, shan_ict)\n\n\nshan.w &lt;- nb2listw(shan.nb, lcosts, style = \"B\") \nsummary(shan.w)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\nWeights style: B \nWeights constants summary:\n   n   nn       S0       S1        S2\nB 55 3025 76267.65 58260785 522016004\n\n\n\nshan.mst &lt;- mstree(shan.w)\n\nI visualized the MST along with the township boundaries to understand the spatial relationships.\n\nplot(st_geometry(shan_sf), border=grey(.5)) \nplot.mst(shan.mst, pts, col=\"blue\", cex.lab=0.7, cex.circles=0.005, add=TRUE)\n\n\n\n\n\n\n\n\n\n\nClustering Using the SKATER Method\nI applied the SKATER method for spatially constrained clustering and visualized the resulting clusters on the map.\n\nskater.clust6 &lt;- skater(edges = shan.mst[,1:2], data = shan_ict, method = \"euclidean\", ncuts = 5)\n\n\nplot(st_geometry(shan_sf), border=gray(.5)) \nplot(skater.clust6, pts, cex.lab=.7, groups.colors=c(\"red\",\"green\",\"blue\",\"brown\",\"pink\"), cex.circles=0.005, add=TRUE)\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\n\n\n\n\n\n\n\n\n\nI combined the SKATER clustering results with the spatial dataset and created a new column for the clusters.\n\ngroups_mat &lt;- as.matrix((skater.clust6$groups)) \nshan_sf_spatialcluster &lt;- cbind(shan_sf_cluster, as.factor(groups_mat)) %&gt;% \n  rename(`skater_CLUSTER` = `as.factor.groups_mat.`) \nqtm(shan_sf_spatialcluster, \"skater_CLUSTER\")\n\n\n\n\n\n\n\n\n\n\nDetermining the Mixing Parameter (Alpha) for ClustGeo\nI used the choicealpha() function to find an optimal value of alpha that balances spatial proximity and attribute-based clustering quality. I then performed spatially constrained clustering using hclustgeo() with the chosen alpha value (0.2 in this case).\n\ncr &lt;- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K=6, graph = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclustG &lt;- hclustgeo(proxmat, distmat, alpha = 0.2) \ngroups &lt;- as.factor(cutree(clustG, k=6)) \nshan_sf_clustGeo &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;% \n  rename(`clustGeo` = `as.matrix.groups.`)\n\nI mapped the results to visualize the ClustGeo clusters.\n\nqtm(shan_sf_clustGeo, \"clustGeo\")\n\n\n\n\n\n\n\n\n\n\nVisual Interpretation of Clusters\nI used parallel coordinate plots to analyze how the ICT indicators vary across the ClustGeo clusters.\n\nggparcoord(data = shan_sf_clustGeo, columns = c(17:21), scale = \"globalminmax\", alphaLines = 0.2, boxplot = TRUE, title = \"Multiple Parallel Coordinates Plots of ICT Variables by Cluster\") + facet_grid(~ clustGeo) + theme(axis.text.x = element_text(angle = 30))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html",
    "title": "Hands-on Exercise 9",
    "section": "",
    "text": "Geographically weighted regression (GWR) is a spatial statistical technique that takes non-stationary variables into consideration (e.g., climate; demographic factors; physical environment characteristics) and models the local relationships between these independent variables and an outcome of interest (also known as dependent variable). In this hands-on exercise, you will learn how to build hedonic pricing models by using GWR methods. The dependent variable is the resale prices of condominium in 2015. The independent variables are divided into either structural and locational."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#overview",
    "title": "Hands-on Exercise 9",
    "section": "",
    "text": "Geographically weighted regression (GWR) is a spatial statistical technique that takes non-stationary variables into consideration (e.g., climate; demographic factors; physical environment characteristics) and models the local relationships between these independent variables and an outcome of interest (also known as dependent variable). In this hands-on exercise, you will learn how to build hedonic pricing models by using GWR methods. The dependent variable is the resale prices of condominium in 2015. The independent variables are divided into either structural and locational."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#the-data",
    "title": "Hands-on Exercise 9",
    "section": "The Data",
    "text": "The Data\nTwo data sets will be used in this model building exercise, they are:\n\nURA Master Plan subzone boundary in shapefile format (i.e. MP14_SUBZONE_WEB_PL)\ncondo_resale_2015 in csv format (i.e. condo_resale_2015.csv)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#getting-started",
    "title": "Hands-on Exercise 9",
    "section": "Getting Started",
    "text": "Getting Started\n\npacman::p_load(olsrr, corrplot, ggpubr, sf, spdep, GWmodel, tmap, tidyverse, gtsummary)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#a-short-note-about-gwmodel",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#a-short-note-about-gwmodel",
    "title": "Hands-on Exercise 9",
    "section": "A short note about GWmodel",
    "text": "A short note about GWmodel\nGWmodel package provides a collection of localised spatial statistical methods, namely: GW summary statistics, GW principal components analysis, GW discriminant analysis and various forms of GW regression; some of which are provided in basic and robust (outlier resistant) forms. Commonly, outputs or parameters of the GWmodel are mapped to provide a useful exploratory tool, which can often precede (and direct) a more traditional or sophisticated statistical analysis."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#geospatial-data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#geospatial-data-wrangling",
    "title": "Hands-on Exercise 9",
    "section": "Geospatial Data Wrangling",
    "text": "Geospatial Data Wrangling\n\nImporting geospatial data\n\nmpsz = st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\EasonXu-HY99\\IS415\\Hands-on_Ex\\Hands-on_Ex09\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nUpdating CRS Information\nI transformed the Coordinate Reference System (CRS) of the geospatial data to Singapore’s Svy21 projection (EPSG: 3414) to ensure compatibility with other datasets and consistent spatial analysis.\n\nmpsz_svy21 &lt;- st_transform(mpsz, 3414)\n\n\nst_crs(mpsz_svy21)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\nst_bbox(mpsz_svy21)\n\n     xmin      ymin      xmax      ymax \n 2667.538 15748.721 56396.440 50256.334"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#aspatial-data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#aspatial-data-wrangling",
    "title": "Hands-on Exercise 9",
    "section": "Aspatial Data Wrangling",
    "text": "Aspatial Data Wrangling\n\nImporting the Aspatial Data\nI imported the aspatial data, which contains condo resale transactions for the year 2015, into R. The dataset includes various features such as selling price, area, age of the condo, and proximities to amenities.\n\ncondo_resale = read_csv(\"data/aspatial/Condo_resale_2015.csv\")\n\nRows: 1436 Columns: 23\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (23): LATITUDE, LONGITUDE, POSTCODE, SELLING_PRICE, AREA_SQM, AGE, PROX_...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nglimpse(condo_resale)\n\nRows: 1,436\nColumns: 23\n$ LATITUDE             &lt;dbl&gt; 1.287145, 1.328698, 1.313727, 1.308563, 1.321437,…\n$ LONGITUDE            &lt;dbl&gt; 103.7802, 103.8123, 103.7971, 103.8247, 103.9505,…\n$ POSTCODE             &lt;dbl&gt; 118635, 288420, 267833, 258380, 467169, 466472, 3…\n$ SELLING_PRICE        &lt;dbl&gt; 3000000, 3880000, 3325000, 4250000, 1400000, 1320…\n$ AREA_SQM             &lt;dbl&gt; 309, 290, 248, 127, 145, 139, 218, 141, 165, 168,…\n$ AGE                  &lt;dbl&gt; 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22, 6,…\n$ PROX_CBD             &lt;dbl&gt; 7.941259, 6.609797, 6.898000, 4.038861, 11.783402…\n$ PROX_CHILDCARE       &lt;dbl&gt; 0.16597932, 0.28027246, 0.42922669, 0.39473543, 0…\n$ PROX_ELDERLYCARE     &lt;dbl&gt; 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.121…\n$ PROX_URA_GROWTH_AREA &lt;dbl&gt; 6.618741, 7.505109, 6.463887, 4.906512, 6.410632,…\n$ PROX_HAWKER_MARKET   &lt;dbl&gt; 1.76542207, 0.54507614, 0.37789301, 1.68259969, 0…\n$ PROX_KINDERGARTEN    &lt;dbl&gt; 0.05835552, 0.61592412, 0.14120309, 0.38200076, 0…\n$ PROX_MRT             &lt;dbl&gt; 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.528…\n$ PROX_PARK            &lt;dbl&gt; 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.116…\n$ PROX_PRIMARY_SCH     &lt;dbl&gt; 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.709…\n$ PROX_TOP_PRIMARY_SCH &lt;dbl&gt; 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.709…\n$ PROX_SHOPPING_MALL   &lt;dbl&gt; 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.307…\n$ PROX_SUPERMARKET     &lt;dbl&gt; 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.581…\n$ PROX_BUS_STOP        &lt;dbl&gt; 0.10336166, 0.28673408, 0.28504777, 0.29872340, 0…\n$ NO_Of_UNITS          &lt;dbl&gt; 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34, 3…\n$ FAMILY_FRIENDLY      &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD             &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\nI checked a few key columns (latitude and longitude) and summarized the dataset to better understand its contents.\n\nhead(condo_resale$LONGITUDE) \n\n[1] 103.7802 103.8123 103.7971 103.8247 103.9505 103.9386\n\n\n\nhead(condo_resale$LATITUDE)\n\n[1] 1.287145 1.328698 1.313727 1.308563 1.321437 1.314198\n\n\n\nsummary(condo_resale)\n\n    LATITUDE       LONGITUDE        POSTCODE      SELLING_PRICE     \n Min.   :1.240   Min.   :103.7   Min.   : 18965   Min.   :  540000  \n 1st Qu.:1.309   1st Qu.:103.8   1st Qu.:259849   1st Qu.: 1100000  \n Median :1.328   Median :103.8   Median :469298   Median : 1383222  \n Mean   :1.334   Mean   :103.8   Mean   :440439   Mean   : 1751211  \n 3rd Qu.:1.357   3rd Qu.:103.9   3rd Qu.:589486   3rd Qu.: 1950000  \n Max.   :1.454   Max.   :104.0   Max.   :828833   Max.   :18000000  \n    AREA_SQM          AGE           PROX_CBD       PROX_CHILDCARE    \n Min.   : 34.0   Min.   : 0.00   Min.   : 0.3869   Min.   :0.004927  \n 1st Qu.:103.0   1st Qu.: 5.00   1st Qu.: 5.5574   1st Qu.:0.174481  \n Median :121.0   Median :11.00   Median : 9.3567   Median :0.258135  \n Mean   :136.5   Mean   :12.14   Mean   : 9.3254   Mean   :0.326313  \n 3rd Qu.:156.0   3rd Qu.:18.00   3rd Qu.:12.6661   3rd Qu.:0.368293  \n Max.   :619.0   Max.   :37.00   Max.   :19.1804   Max.   :3.465726  \n PROX_ELDERLYCARE  PROX_URA_GROWTH_AREA PROX_HAWKER_MARKET PROX_KINDERGARTEN \n Min.   :0.05451   Min.   :0.2145       Min.   :0.05182    Min.   :0.004927  \n 1st Qu.:0.61254   1st Qu.:3.1643       1st Qu.:0.55245    1st Qu.:0.276345  \n Median :0.94179   Median :4.6186       Median :0.90842    Median :0.413385  \n Mean   :1.05351   Mean   :4.5981       Mean   :1.27987    Mean   :0.458903  \n 3rd Qu.:1.35122   3rd Qu.:5.7550       3rd Qu.:1.68578    3rd Qu.:0.578474  \n Max.   :3.94916   Max.   :9.1554       Max.   :5.37435    Max.   :2.229045  \n    PROX_MRT         PROX_PARK       PROX_PRIMARY_SCH  PROX_TOP_PRIMARY_SCH\n Min.   :0.05278   Min.   :0.02906   Min.   :0.07711   Min.   :0.07711     \n 1st Qu.:0.34646   1st Qu.:0.26211   1st Qu.:0.44024   1st Qu.:1.34451     \n Median :0.57430   Median :0.39926   Median :0.63505   Median :1.88213     \n Mean   :0.67316   Mean   :0.49802   Mean   :0.75471   Mean   :2.27347     \n 3rd Qu.:0.84844   3rd Qu.:0.65592   3rd Qu.:0.95104   3rd Qu.:2.90954     \n Max.   :3.48037   Max.   :2.16105   Max.   :3.92899   Max.   :6.74819     \n PROX_SHOPPING_MALL PROX_SUPERMARKET PROX_BUS_STOP       NO_Of_UNITS    \n Min.   :0.0000     Min.   :0.0000   Min.   :0.001595   Min.   :  18.0  \n 1st Qu.:0.5258     1st Qu.:0.3695   1st Qu.:0.098356   1st Qu.: 188.8  \n Median :0.9357     Median :0.5687   Median :0.151710   Median : 360.0  \n Mean   :1.0455     Mean   :0.6141   Mean   :0.193974   Mean   : 409.2  \n 3rd Qu.:1.3994     3rd Qu.:0.7862   3rd Qu.:0.220466   3rd Qu.: 590.0  \n Max.   :3.4774     Max.   :2.2441   Max.   :2.476639   Max.   :1703.0  \n FAMILY_FRIENDLY     FREEHOLD      LEASEHOLD_99YR  \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000   Median :0.0000  \n Mean   :0.4868   Mean   :0.4227   Mean   :0.4882  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n\n\n\n\nConverting Aspatial Data Frame into a Spatial (sf) Object\nI converted the condo_resale data frame into an sf object, using the longitude and latitude columns for spatial coordinates, and then reprojected the data to match the Svy21 CRS (EPSG: 3414).\n\ncondo_resale.sf &lt;- st_as_sf(condo_resale,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %&gt;%\n  st_transform(crs=3414)\n\n\nhead(condo_resale.sf)\n\nSimple feature collection with 6 features and 21 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 22085.12 ymin: 29951.54 xmax: 41042.56 ymax: 34546.2\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 6 × 22\n  POSTCODE SELLING_PRICE AREA_SQM   AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE\n     &lt;dbl&gt;         &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;          &lt;dbl&gt;            &lt;dbl&gt;\n1   118635       3000000      309    30     7.94          0.166            2.52 \n2   288420       3880000      290    32     6.61          0.280            1.93 \n3   267833       3325000      248    33     6.90          0.429            0.502\n4   258380       4250000      127     7     4.04          0.395            1.99 \n5   467169       1400000      145    28    11.8           0.119            1.12 \n6   466472       1320000      139    22    10.3           0.125            0.789\n# ℹ 15 more variables: PROX_URA_GROWTH_AREA &lt;dbl&gt;, PROX_HAWKER_MARKET &lt;dbl&gt;,\n#   PROX_KINDERGARTEN &lt;dbl&gt;, PROX_MRT &lt;dbl&gt;, PROX_PARK &lt;dbl&gt;,\n#   PROX_PRIMARY_SCH &lt;dbl&gt;, PROX_TOP_PRIMARY_SCH &lt;dbl&gt;,\n#   PROX_SHOPPING_MALL &lt;dbl&gt;, PROX_SUPERMARKET &lt;dbl&gt;, PROX_BUS_STOP &lt;dbl&gt;,\n#   NO_Of_UNITS &lt;dbl&gt;, FAMILY_FRIENDLY &lt;dbl&gt;, FREEHOLD &lt;dbl&gt;,\n#   LEASEHOLD_99YR &lt;dbl&gt;, geometry &lt;POINT [m]&gt;"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#exploratory-data-analysis-eda",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#exploratory-data-analysis-eda",
    "title": "Hands-on Exercise 9",
    "section": "Exploratory Data Analysis (EDA)",
    "text": "Exploratory Data Analysis (EDA)\n\nStatistical Graphics\nI started the EDA by visualizing the distribution of the selling prices of condos. I used a histogram to show the spread of selling prices.\n\nggplot(data=condo_resale.sf, aes(x=`SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\n\n\n\n\nI transformed the selling price variable by taking its logarithm to better understand its distribution, especially when dealing with skewed data.\n\ncondo_resale.sf &lt;- condo_resale.sf %&gt;%\n  mutate(`LOG_SELLING_PRICE` = log(SELLING_PRICE))\n\nI plotted the transformed variable (LOG_SELLING_PRICE) to see the effect of the transformation on the distribution.\n\nggplot(data=condo_resale.sf, aes(x=`LOG_SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\n\n\n\n\n\n\nMultiple Histogram Plots for Various Variables\nTo get a better sense of the distribution of other variables, I plotted histograms for several condo features, including area, age, and proximities to various amenities like childcare centers, parks, and MRT stations. Each variable was visualized separately.\n\nAREA_SQM &lt;- ggplot(data=condo_resale.sf, aes(x= `AREA_SQM`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nAGE &lt;- ggplot(data=condo_resale.sf, aes(x= `AGE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CBD &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_CBD`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CHILDCARE &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_CHILDCARE`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_ELDERLYCARE &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_ELDERLYCARE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_URA_GROWTH_AREA &lt;- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_URA_GROWTH_AREA`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_HAWKER_MARKET &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_HAWKER_MARKET`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_KINDERGARTEN &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_KINDERGARTEN`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_MRT &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_MRT`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PARK &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_PARK`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PRIMARY_SCH &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_TOP_PRIMARY_SCH &lt;- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_TOP_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nggarrange(AREA_SQM, AGE, PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, \n          PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN, PROX_MRT,\n          PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH,  \n          ncol = 3, nrow = 4)\n\n\n\n\n\n\n\n\n\n\nDrawing Statistical Point Map\nTo visualize the spatial distribution of condo resale prices, I used tmap to create an interactive map with points representing each condo sale, colored by the selling price. The polygons represent the subzones in Singapore.\nFirst, I switched to “view” mode to enable interactive mapping.\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\n\nNext, I plotted the subzone polygons and overlaid the condo resale points, with each point’s color representing the selling price. The map’s zoom level was constrained for better control.\n\ntmap_options(check.and.fix = TRUE)\n\ntm_shape(mpsz_svy21)+\n  tm_polygons() +\ntm_shape(condo_resale.sf) +  \n  tm_dots(col = \"SELLING_PRICE\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\nWarning: The shape mpsz_svy21 is invalid (after reprojection). See\nsf::st_is_valid\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#hedonic-pricing-modelling-in-r",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#hedonic-pricing-modelling-in-r",
    "title": "Hands-on Exercise 9",
    "section": "Hedonic Pricing Modelling in R",
    "text": "Hedonic Pricing Modelling in R\n\nSimple Linear Regression Method\nTo begin exploring the relationship between condo prices and various features, I started with a Simple Linear Regression (SLR) model using the area in square meters (AREA_SQM) as the predictor of selling price.\n\ncondo.slr &lt;- lm(formula=SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\n\nsummary(condo.slr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3695815  -391764   -87517   258900 13503875 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -258121.1    63517.2  -4.064 5.09e-05 ***\nAREA_SQM      14719.0      428.1  34.381  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 942700 on 1434 degrees of freedom\nMultiple R-squared:  0.4518,    Adjusted R-squared:  0.4515 \nF-statistic:  1182 on 1 and 1434 DF,  p-value: &lt; 2.2e-16\n\n\nTo visualize this relationship, I plotted the data points and added a regression line to show the fit of the linear model.\n\nggplot(data=condo_resale.sf,  \n       aes(x=`AREA_SQM`, y=`SELLING_PRICE`)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\nMultiple Linear Regression Method\nI moved on to a Multiple Linear Regression (MLR) model, which considers multiple variables affecting condo prices. To start, I plotted a correlation matrix to explore relationships between variables.\n\ncorrplot(cor(condo_resale[, 5:23]), diag = FALSE, order = \"AOE\",\n         tl.pos = \"td\", tl.cex = 0.5, method = \"number\", type = \"upper\")\n\n\n\n\n\n\n\n\n\nBuilding the Hedonic Pricing Model\nI then built a hedonic pricing model using the MLR method. The model includes a wide range of predictors, such as condo size, age, and proximity to amenities like MRT stations and shopping malls.\n\ncondo.mlr &lt;- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE    + \n                  PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                  PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + PROX_KINDERGARTEN + \n                  PROX_MRT  + PROX_PARK + PROX_PRIMARY_SCH + \n                  PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n                  PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                data=condo_resale.sf)\nsummary(condo.mlr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + PROX_CHILDCARE + \n    PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + \n    PROX_KINDERGARTEN + PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + \n    PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3475964  -293923   -23069   241043 12260381 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)           481728.40  121441.01   3.967 7.65e-05 ***\nAREA_SQM               12708.32     369.59  34.385  &lt; 2e-16 ***\nAGE                   -24440.82    2763.16  -8.845  &lt; 2e-16 ***\nPROX_CBD              -78669.78    6768.97 -11.622  &lt; 2e-16 ***\nPROX_CHILDCARE       -351617.91  109467.25  -3.212  0.00135 ** \nPROX_ELDERLYCARE      171029.42   42110.51   4.061 5.14e-05 ***\nPROX_URA_GROWTH_AREA   38474.53   12523.57   3.072  0.00217 ** \nPROX_HAWKER_MARKET     23746.10   29299.76   0.810  0.41782    \nPROX_KINDERGARTEN     147468.99   82668.87   1.784  0.07466 .  \nPROX_MRT             -314599.68   57947.44  -5.429 6.66e-08 ***\nPROX_PARK             563280.50   66551.68   8.464  &lt; 2e-16 ***\nPROX_PRIMARY_SCH      180186.08   65237.95   2.762  0.00582 ** \nPROX_TOP_PRIMARY_SCH    2280.04   20410.43   0.112  0.91107    \nPROX_SHOPPING_MALL   -206604.06   42840.60  -4.823 1.57e-06 ***\nPROX_SUPERMARKET      -44991.80   77082.64  -0.584  0.55953    \nPROX_BUS_STOP         683121.35  138353.28   4.938 8.85e-07 ***\nNO_Of_UNITS             -231.18      89.03  -2.597  0.00951 ** \nFAMILY_FRIENDLY       140340.77   47020.55   2.985  0.00289 ** \nFREEHOLD              359913.01   49220.22   7.312 4.38e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 755800 on 1417 degrees of freedom\nMultiple R-squared:  0.6518,    Adjusted R-squared:  0.6474 \nF-statistic: 147.4 on 18 and 1417 DF,  p-value: &lt; 2.2e-16\n\n\n\n\n\nPreparing Publication Quality Table: olsrr Method\nTo present the results in a publication-quality format, I first simplified the model by removing some variables and then used the olsrr package to create a high-quality summary table.\n\ncondo.mlr1 &lt;- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                   PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                   PROX_URA_GROWTH_AREA + PROX_MRT  + PROX_PARK + \n                   PROX_PRIMARY_SCH + PROX_SHOPPING_MALL    + PROX_BUS_STOP + \n                   NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD,\n                 data=condo_resale.sf)\nols_regress(condo.mlr1)\n\n                                Model Summary                                 \n-----------------------------------------------------------------------------\nR                            0.807       RMSE                     751998.679 \nR-Squared                    0.651       MSE                571471422208.591 \nAdj. R-Squared               0.647       Coef. Var                    43.168 \nPred R-Squared               0.638       AIC                       42966.758 \nMAE                     414819.628       SBC                       43051.072 \n-----------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n AIC: Akaike Information Criteria \n SBC: Schwarz Bayesian Criteria \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.512586e+15          14        1.080418e+14    189.059    0.0000 \nResidual      8.120609e+14        1421    571471422208.591                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     527633.222    108183.223                   4.877    0.000     315417.244     739849.200 \n            AREA_SQM      12777.523       367.479        0.584     34.771    0.000      12056.663      13498.382 \n                 AGE     -24687.739      2754.845       -0.167     -8.962    0.000     -30091.739     -19283.740 \n            PROX_CBD     -77131.323      5763.125       -0.263    -13.384    0.000     -88436.469     -65826.176 \n      PROX_CHILDCARE    -318472.751    107959.512       -0.084     -2.950    0.003    -530249.889    -106695.613 \n    PROX_ELDERLYCARE     185575.623     39901.864        0.090      4.651    0.000     107302.737     263848.510 \nPROX_URA_GROWTH_AREA      39163.254     11754.829        0.060      3.332    0.001      16104.571      62221.936 \n            PROX_MRT    -294745.107     56916.367       -0.112     -5.179    0.000    -406394.234    -183095.980 \n           PROX_PARK     570504.807     65507.029        0.150      8.709    0.000     442003.938     699005.677 \n    PROX_PRIMARY_SCH     159856.136     60234.599        0.062      2.654    0.008      41697.849     278014.424 \n  PROX_SHOPPING_MALL    -220947.251     36561.832       -0.115     -6.043    0.000    -292668.213    -149226.288 \n       PROX_BUS_STOP     682482.221    134513.243        0.134      5.074    0.000     418616.359     946348.082 \n         NO_Of_UNITS       -245.480        87.947       -0.053     -2.791    0.005       -418.000        -72.961 \n     FAMILY_FRIENDLY     146307.576     46893.021        0.057      3.120    0.002      54320.593     238294.560 \n            FREEHOLD     350599.812     48506.485        0.136      7.228    0.000     255447.802     445751.821 \n-----------------------------------------------------------------------------------------------------------------\n\n\n\n\nPreparing Publication Quality Table: gtsummary Method\nUsing the gtsummary package, I created a professional-looking regression table, displaying key statistics for the regression model.\n\ntbl_regression(condo.mlr1, intercept = TRUE)\n\n\n\n\n\n\n\nCharacteristic\nBeta\n95% CI1\np-value\n\n\n\n\n(Intercept)\n527,633\n315,417, 739,849\n&lt;0.001\n\n\nAREA_SQM\n12,778\n12,057, 13,498\n&lt;0.001\n\n\nAGE\n-24,688\n-30,092, -19,284\n&lt;0.001\n\n\nPROX_CBD\n-77,131\n-88,436, -65,826\n&lt;0.001\n\n\nPROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n\n\nPROX_ELDERLYCARE\n185,576\n107,303, 263,849\n&lt;0.001\n\n\nPROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n&lt;0.001\n\n\nPROX_MRT\n-294,745\n-406,394, -183,096\n&lt;0.001\n\n\nPROX_PARK\n570,505\n442,004, 699,006\n&lt;0.001\n\n\nPROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n\n\nPROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n&lt;0.001\n\n\nPROX_BUS_STOP\n682,482\n418,616, 946,348\n&lt;0.001\n\n\nNO_Of_UNITS\n-245\n-418, -73\n0.005\n\n\nFAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n\n\nFREEHOLD\n350,600\n255,448, 445,752\n&lt;0.001\n\n\n\n1 CI = Confidence Interval\n\n\n\n\n\n\n\n\nAdditionally, I added key statistical measures such as R-squared, adjusted R-squared, AIC, and p-values to the table using the add_glance_source_note() function.\n\ntbl_regression(condo.mlr1, \n               intercept = TRUE) %&gt;% \n  add_glance_source_note(\n    label = list(sigma ~ \"\\U03C3\"),\n    include = c(r.squared, adj.r.squared, \n                AIC, statistic,\n                p.value, sigma))\n\n\n\n\n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n&lt;0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n&lt;0.001\n    AGE\n-24,688\n-30,092, -19,284\n&lt;0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n&lt;0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n&lt;0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n&lt;0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n&lt;0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n&lt;0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n&lt;0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n&lt;0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n&lt;0.001\n  \n  \n    \n      R² = 0.651; Adjusted R² = 0.647; AIC = 42,967; Statistic = 189; p-value = &lt;0.001; σ = 755,957\n    \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\n\n\nChecking for Multicollinearity\nI checked for multicollinearity in the multiple linear regression (MLR) model using the Variance Inflation Factor (VIF) and tolerance values. High VIF values indicate potential multicollinearity issues.\n\nols_vif_tol(condo.mlr1)\n\n              Variables Tolerance      VIF\n1              AREA_SQM 0.8728554 1.145665\n2                   AGE 0.7071275 1.414172\n3              PROX_CBD 0.6356147 1.573280\n4        PROX_CHILDCARE 0.3066019 3.261559\n5      PROX_ELDERLYCARE 0.6598479 1.515501\n6  PROX_URA_GROWTH_AREA 0.7510311 1.331503\n7              PROX_MRT 0.5236090 1.909822\n8             PROX_PARK 0.8279261 1.207837\n9      PROX_PRIMARY_SCH 0.4524628 2.210126\n10   PROX_SHOPPING_MALL 0.6738795 1.483945\n11        PROX_BUS_STOP 0.3514118 2.845664\n12          NO_Of_UNITS 0.6901036 1.449058\n13      FAMILY_FRIENDLY 0.7244157 1.380423\n14             FREEHOLD 0.6931163 1.442759\n\n\n\n\nTest for Non-Linearity\nTo assess the linearity assumption of the model, I plotted the residuals versus the fitted values. Non-linearity would be indicated by patterns or trends in the residuals.\n\nols_plot_resid_fit(condo.mlr1)\n\n\n\n\n\n\n\n\n\n\nTest for Normality Assumption\nI checked if the residuals from the MLR model followed a normal distribution by plotting a histogram of the residuals and performing a formal normality test.\n\nols_plot_resid_hist(condo.mlr1)\n\n\n\n\n\n\n\n\n\nols_test_normality(condo.mlr1)\n\nWarning in ks.test.default(y, \"pnorm\", mean(y), sd(y)): ties should not be\npresent for the one-sample Kolmogorov-Smirnov test\n\n\n-----------------------------------------------\n       Test             Statistic       pvalue  \n-----------------------------------------------\nShapiro-Wilk              0.6856         0.0000 \nKolmogorov-Smirnov        0.1366         0.0000 \nCramer-von Mises         121.0768        0.0000 \nAnderson-Darling         67.9551         0.0000 \n-----------------------------------------------\n\n\n\n\nTesting for Spatial Autocorrelation\n\nExtracting Residuals\nI extracted the residuals from the MLR model and converted them into a spatial format. This step is necessary to assess whether spatial autocorrelation exists in the residuals.\n\nmlr.output &lt;- as.data.frame(condo.mlr1$residuals)\n\n\n\nConverting to Spatial Data\nI converted the condo_resale.res.sf dataset (which includes the residuals) into a spatial object using the as_Spatial() function.\n\ncondo_resale.res.sf &lt;- cbind(condo_resale.sf, \n                        condo.mlr1$residuals) %&gt;%\nrename(`MLR_RES` = `condo.mlr1.residuals`)\n\n\ncondo_resale.sp &lt;- as_Spatial(condo_resale.res.sf)\ncondo_resale.sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1436 \nextent      : 14940.85, 43352.45, 24765.67, 48382.81  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 23\nnames       : POSTCODE, SELLING_PRICE, AREA_SQM, AGE,    PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN,    PROX_MRT,   PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH, PROX_SHOPPING_MALL, ... \nmin values  :    18965,        540000,       34,   0, 0.386916393,    0.004927023,      0.054508623,          0.214539508,        0.051817113,       0.004927023, 0.052779424, 0.029064164,      0.077106132,          0.077106132,                  0, ... \nmax values  :   828833,       1.8e+07,      619,  37, 19.18042832,     3.46572633,      3.949157205,           9.15540001,        5.374348075,       2.229045366,  3.48037319,  2.16104919,      3.928989144,          6.748192062,        3.477433767, ... \n\n\n\n\nVisualizing Residuals on a Map\nTo investigate the spatial distribution of residuals, I plotted them on a map using tmap in view mode.\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\n\n\ntm_shape(mpsz_svy21)+\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons(alpha = 0.4) +\ntm_shape(condo_resale.res.sf) +  \n  tm_dots(col = \"MLR_RES\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\nWarning: The shape mpsz_svy21 is invalid (after reprojection). See\nsf::st_is_valid\n\n\nVariable(s) \"MLR_RES\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\n\n\nConstructing Neighbors List\nI created a neighbors list for the condo resale points within a 1500-meter distance, which defines the spatial relationships between points.\n\nnb &lt;- dnearneigh(coordinates(condo_resale.sp), 0, 1500, longlat = FALSE)\n\nWarning in dnearneigh(coordinates(condo_resale.sp), 0, 1500, longlat = FALSE):\nneighbour object has 10 sub-graphs\n\nsummary(nb)\n\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \n10 disjoint connected subgraphs\nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\n\n\n\nCalculating Spatial Weights\nNext, I calculated spatial weights based on the neighbor list using the nb2listw() function. These weights are necessary for Moran’s I test.\n\nnb_lw &lt;- nb2listw(nb, style = 'W')\nsummary(nb_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \n10 disjoint connected subgraphs\nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\nWeights style: W \nWeights constants summary:\n     n      nn   S0       S1       S2\nW 1436 2062096 1436 94.81916 5798.341\n\n\n\n\nTesting for Spatial Autocorrelation\nFinally, I applied Moran’s I test to check for spatial autocorrelation in the residuals. Significant spatial autocorrelation would indicate that spatial patterns exist in the model’s residuals, potentially suggesting that spatial dependencies were not fully accounted for in the model.\n\nlm.morantest(condo.mlr1, nb_lw)\n\n\n    Global Moran I for regression residuals\n\ndata:  \nmodel: lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD +\nPROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_MRT +\nPROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP +\nNO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, data = condo_resale.sf)\nweights: nb_lw\n\nMoran I statistic standard deviate = 24.366, p-value &lt; 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nObserved Moran I      Expectation         Variance \n    1.438876e-01    -5.487594e-03     3.758259e-05"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex10/In-class_Ex10.html",
    "href": "In-class_Ex/In-class_Ex10/In-class_Ex10.html",
    "title": "In Class Exercise 10",
    "section": "",
    "text": "pacman::p_load(olsrr, ggstatsplot, sf,tmap, tidyverse, gtsummary,performance, see, sfdep)\n\nThis code loads all the required R packages using the pacman package to streamline the loading of dependencies.\n\ncondo_resale &lt;- read_csv(\"data/aspatial/Condo_resale_2015.csv\")\n\nRows: 1436 Columns: 23\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (23): LATITUDE, LONGITUDE, POSTCODE, SELLING_PRICE, AREA_SQM, AGE, PROX_...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nmpsz &lt;- read_rds(\"data/rds/mpsz.rds\")\n\ncondo_resale_sf &lt;- read_rds(\"data/rds/condo_resale_sf.rds\")\n\nI loaded the condo resale dataset, subzone geospatial data, and the spatial version of the condo resale data.\n\n\n\nggcorrmat(condo_resale[, 5:23])\n\n\n\n\n\n\n\n\nThis produces a correlation matrix using the ggcorrmat function, which helps visualize the relationships between the numerical variables in the condo_resale dataset.\n\n\n\n\ncondo_mlr &lt;- lm(formula = SELLING_PRICE ~ AREA_SQM + \n                  AGE   + PROX_CBD + PROX_CHILDCARE + \n                  PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n                  PROX_HAWKER_MARKET    + PROX_KINDERGARTEN + \n                  PROX_MRT  + PROX_PARK + PROX_PRIMARY_SCH + \n                  PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + \n                  PROX_SUPERMARKET + PROX_BUS_STOP + \n                  NO_Of_UNITS + FAMILY_FRIENDLY + \n                  FREEHOLD + LEASEHOLD_99YR, \n                data=condo_resale_sf)\nsummary(condo_mlr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + PROX_CHILDCARE + \n    PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + \n    PROX_KINDERGARTEN + PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + \n    PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD + \n    LEASEHOLD_99YR, data = condo_resale_sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3471036  -286903   -22426   239412 12254549 \n\nCoefficients:\n                      Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)           543071.4   136210.9   3.987 7.03e-05 ***\nAREA_SQM               12688.7      370.1  34.283  &lt; 2e-16 ***\nAGE                   -24566.0     2766.0  -8.881  &lt; 2e-16 ***\nPROX_CBD              -78122.0     6791.4 -11.503  &lt; 2e-16 ***\nPROX_CHILDCARE       -333219.0   111020.3  -3.001 0.002734 ** \nPROX_ELDERLYCARE      170950.0    42110.8   4.060 5.19e-05 ***\nPROX_URA_GROWTH_AREA   38507.6    12523.7   3.075 0.002147 ** \nPROX_HAWKER_MARKET     23801.2    29299.9   0.812 0.416739    \nPROX_KINDERGARTEN     144098.0    82738.7   1.742 0.081795 .  \nPROX_MRT             -322775.9    58528.1  -5.515 4.14e-08 ***\nPROX_PARK             564487.9    66563.0   8.481  &lt; 2e-16 ***\nPROX_PRIMARY_SCH      186170.5    65515.2   2.842 0.004553 ** \nPROX_TOP_PRIMARY_SCH    -477.1    20598.0  -0.023 0.981525    \nPROX_SHOPPING_MALL   -207721.5    42855.5  -4.847 1.39e-06 ***\nPROX_SUPERMARKET      -48074.7    77145.3  -0.623 0.533273    \nPROX_BUS_STOP         675755.0   138552.0   4.877 1.20e-06 ***\nNO_Of_UNITS             -216.2       90.3  -2.394 0.016797 *  \nFAMILY_FRIENDLY       142128.3    47055.1   3.020 0.002569 ** \nFREEHOLD              300646.5    77296.5   3.890 0.000105 ***\nLEASEHOLD_99YR        -77137.4    77570.9  -0.994 0.320192    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 755800 on 1416 degrees of freedom\nMultiple R-squared:  0.652, Adjusted R-squared:  0.6474 \nF-statistic: 139.6 on 19 and 1416 DF,  p-value: &lt; 2.2e-16\n\n\nA multiple linear regression model is fitted to predict the SELLING_PRICE of condos using a variety of predictors. The summary function outputs coefficients, R-squared, and statistical significance.\n\n\n\n\nols_regress(condo_mlr)\n\n                                Model Summary                                 \n-----------------------------------------------------------------------------\nR                            0.807       RMSE                     750537.537 \nR-Squared                    0.652       MSE                571262902261.223 \nAdj. R-Squared               0.647       Coef. Var                    43.160 \nPred R-Squared               0.637       AIC                       42971.173 \nMAE                     412117.987       SBC                       43081.835 \n-----------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n AIC: Akaike Information Criteria \n SBC: Schwarz Bayesian Criteria \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.515738e+15          19        7.977571e+13    139.648    0.0000 \nResidual      8.089083e+14        1416    571262902261.223                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     543071.420    136210.918                   3.987    0.000     275874.535     810268.305 \n            AREA_SQM      12688.669       370.119        0.579     34.283    0.000      11962.627      13414.710 \n                 AGE     -24566.001      2766.041       -0.166     -8.881    0.000     -29991.980     -19140.022 \n            PROX_CBD     -78121.985      6791.377       -0.267    -11.503    0.000     -91444.227     -64799.744 \n      PROX_CHILDCARE    -333219.036    111020.303       -0.087     -3.001    0.003    -551000.984    -115437.089 \n    PROX_ELDERLYCARE     170949.961     42110.748        0.083      4.060    0.000      88343.803     253556.120 \nPROX_URA_GROWTH_AREA      38507.622     12523.661        0.059      3.075    0.002      13940.700      63074.545 \n  PROX_HAWKER_MARKET      23801.197     29299.923        0.019      0.812    0.417     -33674.725      81277.120 \n   PROX_KINDERGARTEN     144097.972     82738.669        0.030      1.742    0.082     -18205.570     306401.514 \n            PROX_MRT    -322775.874     58528.079       -0.123     -5.515    0.000    -437586.937    -207964.811 \n           PROX_PARK     564487.876     66563.011        0.148      8.481    0.000     433915.162     695060.590 \n    PROX_PRIMARY_SCH     186170.524     65515.193        0.072      2.842    0.005      57653.253     314687.795 \nPROX_TOP_PRIMARY_SCH       -477.073     20597.972       -0.001     -0.023    0.982     -40882.894      39928.747 \n  PROX_SHOPPING_MALL    -207721.520     42855.500       -0.109     -4.847    0.000    -291788.613    -123654.427 \n    PROX_SUPERMARKET     -48074.679     77145.257       -0.012     -0.623    0.533    -199405.956     103256.599 \n       PROX_BUS_STOP     675755.044    138551.991        0.133      4.877    0.000     403965.817     947544.272 \n         NO_Of_UNITS       -216.180        90.302       -0.046     -2.394    0.017       -393.320        -39.040 \n     FAMILY_FRIENDLY     142128.272     47055.082        0.056      3.020    0.003      49823.107     234433.438 \n            FREEHOLD     300646.543     77296.529        0.117      3.890    0.000     149018.525     452274.561 \n      LEASEHOLD_99YR     -77137.375     77570.869       -0.030     -0.994    0.320    -229303.551      75028.801 \n-----------------------------------------------------------------------------------------------------------------\n\n\nUsing the olsrr package, this function provides detailed diagnostics for the MLR model.\n\n\n\nI performed forward, backward, and stepwise selection methods to optimize the MLR model based on p-values.\n\ncondo_fw_mlr &lt;- ols_step_forward_p(\n  condo_mlr,\n  p_val = 0.05,\n  details = FALSE)\ncondo_fw_mlr\n\n\n                                     Stepwise Summary                                      \n-----------------------------------------------------------------------------------------\nStep    Variable                   AIC          SBC         SBIC         R2       Adj. R2 \n-----------------------------------------------------------------------------------------\n 0      Base Model              44449.068    44459.608    40371.745    0.00000    0.00000 \n 1      AREA_SQM                43587.753    43603.562    39510.883    0.45184    0.45146 \n 2      PROX_CBD                43243.523    43264.602    39167.182    0.56928    0.56868 \n 3      PROX_PARK               43177.691    43204.039    39101.331    0.58915    0.58829 \n 4      FREEHOLD                43125.474    43157.092    39049.179    0.60438    0.60327 \n 5      AGE                     43069.222    43106.109    38993.167    0.62010    0.61878 \n 6      PROX_ELDERLYCARE        43046.515    43088.672    38970.548    0.62659    0.62502 \n 7      PROX_SHOPPING_MALL      43020.990    43068.417    38945.209    0.63367    0.63188 \n 8      PROX_URA_GROWTH_AREA    43009.092    43061.788    38933.407    0.63720    0.63517 \n 9      PROX_MRT                42999.058    43057.024    38923.483    0.64023    0.63796 \n 10     PROX_BUS_STOP           42984.951    43048.186    38909.582    0.64424    0.64175 \n 11     FAMILY_FRIENDLY         42981.085    43049.590    38905.797    0.64569    0.64296 \n 12     NO_Of_UNITS             42975.246    43049.021    38900.092    0.64762    0.64465 \n 13     PROX_CHILDCARE          42971.858    43050.902    38896.812    0.64894    0.64573 \n 14     PROX_PRIMARY_SCH        42966.758    43051.072    38891.872    0.65067    0.64723 \n-----------------------------------------------------------------------------------------\n\nFinal Model Output \n------------------\n\n                                Model Summary                                 \n-----------------------------------------------------------------------------\nR                            0.807       RMSE                     751998.679 \nR-Squared                    0.651       MSE                571471422208.591 \nAdj. R-Squared               0.647       Coef. Var                    43.168 \nPred R-Squared               0.638       AIC                       42966.758 \nMAE                     414819.628       SBC                       43051.072 \n-----------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n AIC: Akaike Information Criteria \n SBC: Schwarz Bayesian Criteria \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.512586e+15          14        1.080418e+14    189.059    0.0000 \nResidual      8.120609e+14        1421    571471422208.591                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     527633.222    108183.223                   4.877    0.000     315417.244     739849.200 \n            AREA_SQM      12777.523       367.479        0.584     34.771    0.000      12056.663      13498.382 \n            PROX_CBD     -77131.323      5763.125       -0.263    -13.384    0.000     -88436.469     -65826.176 \n           PROX_PARK     570504.807     65507.029        0.150      8.709    0.000     442003.938     699005.677 \n            FREEHOLD     350599.812     48506.485        0.136      7.228    0.000     255447.802     445751.821 \n                 AGE     -24687.739      2754.845       -0.167     -8.962    0.000     -30091.739     -19283.740 \n    PROX_ELDERLYCARE     185575.623     39901.864        0.090      4.651    0.000     107302.737     263848.510 \n  PROX_SHOPPING_MALL    -220947.251     36561.832       -0.115     -6.043    0.000    -292668.213    -149226.288 \nPROX_URA_GROWTH_AREA      39163.254     11754.829        0.060      3.332    0.001      16104.571      62221.936 \n            PROX_MRT    -294745.107     56916.367       -0.112     -5.179    0.000    -406394.234    -183095.980 \n       PROX_BUS_STOP     682482.221    134513.243        0.134      5.074    0.000     418616.359     946348.082 \n     FAMILY_FRIENDLY     146307.576     46893.021        0.057      3.120    0.002      54320.593     238294.560 \n         NO_Of_UNITS       -245.480        87.947       -0.053     -2.791    0.005       -418.000        -72.961 \n      PROX_CHILDCARE    -318472.751    107959.512       -0.084     -2.950    0.003    -530249.889    -106695.613 \n    PROX_PRIMARY_SCH     159856.136     60234.599        0.062      2.654    0.008      41697.849     278014.424 \n-----------------------------------------------------------------------------------------------------------------\n\n\n\nplot(condo_fw_mlr)\n\n\n\n\n\n\n\n\n\ncondo_bw_mlr &lt;- ols_step_backward_p(\n  condo_mlr,\n  p_val = 0.05,\n  details = FALSE)\ncondo_bw_mlr\n\n\n                                     Stepwise Summary                                      \n-----------------------------------------------------------------------------------------\nStep    Variable                   AIC          SBC         SBIC         R2       Adj. R2 \n-----------------------------------------------------------------------------------------\n 0      Full Model              42971.173    43081.835    38896.546    0.65203    0.64736 \n 1      PROX_TOP_PRIMARY_SCH    42969.173    43074.565    38894.518    0.65203    0.64761 \n 2      PROX_SUPERMARKET        42967.567    43067.689    38892.873    0.65193    0.64776 \n 3      PROX_HAWKER_MARKET      42966.461    43061.315    38891.719    0.65172    0.64779 \n 4      LEASEHOLD_99YR          42965.558    43055.141    38890.764    0.65145    0.64777 \n 5      PROX_KINDERGARTEN       42966.758    43051.072    38891.872    0.65067    0.64723 \n-----------------------------------------------------------------------------------------\n\nFinal Model Output \n------------------\n\n                                Model Summary                                 \n-----------------------------------------------------------------------------\nR                            0.807       RMSE                     751998.679 \nR-Squared                    0.651       MSE                571471422208.591 \nAdj. R-Squared               0.647       Coef. Var                    43.168 \nPred R-Squared               0.638       AIC                       42966.758 \nMAE                     414819.628       SBC                       43051.072 \n-----------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n AIC: Akaike Information Criteria \n SBC: Schwarz Bayesian Criteria \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.512586e+15          14        1.080418e+14    189.059    0.0000 \nResidual      8.120609e+14        1421    571471422208.591                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     527633.222    108183.223                   4.877    0.000     315417.244     739849.200 \n            AREA_SQM      12777.523       367.479        0.584     34.771    0.000      12056.663      13498.382 \n                 AGE     -24687.739      2754.845       -0.167     -8.962    0.000     -30091.739     -19283.740 \n            PROX_CBD     -77131.323      5763.125       -0.263    -13.384    0.000     -88436.469     -65826.176 \n      PROX_CHILDCARE    -318472.751    107959.512       -0.084     -2.950    0.003    -530249.889    -106695.613 \n    PROX_ELDERLYCARE     185575.623     39901.864        0.090      4.651    0.000     107302.737     263848.510 \nPROX_URA_GROWTH_AREA      39163.254     11754.829        0.060      3.332    0.001      16104.571      62221.936 \n            PROX_MRT    -294745.107     56916.367       -0.112     -5.179    0.000    -406394.234    -183095.980 \n           PROX_PARK     570504.807     65507.029        0.150      8.709    0.000     442003.938     699005.677 \n    PROX_PRIMARY_SCH     159856.136     60234.599        0.062      2.654    0.008      41697.849     278014.424 \n  PROX_SHOPPING_MALL    -220947.251     36561.832       -0.115     -6.043    0.000    -292668.213    -149226.288 \n       PROX_BUS_STOP     682482.221    134513.243        0.134      5.074    0.000     418616.359     946348.082 \n         NO_Of_UNITS       -245.480        87.947       -0.053     -2.791    0.005       -418.000        -72.961 \n     FAMILY_FRIENDLY     146307.576     46893.021        0.057      3.120    0.002      54320.593     238294.560 \n            FREEHOLD     350599.812     48506.485        0.136      7.228    0.000     255447.802     445751.821 \n-----------------------------------------------------------------------------------------------------------------\n\n\n\ncondo_sb_mlr &lt;- ols_step_both_p(\n  condo_mlr,\n  p_val = 0.05,\n  details = FALSE)\ncondo_sb_mlr\n\n\n                                       Stepwise Summary                                        \n---------------------------------------------------------------------------------------------\nStep    Variable                       AIC          SBC         SBIC         R2       Adj. R2 \n---------------------------------------------------------------------------------------------\n 0      Base Model                  44449.068    44459.608    40371.745    0.00000    0.00000 \n 1      AREA_SQM (+)                43587.753    43603.562    39510.883    0.45184    0.45146 \n 2      PROX_CBD (+)                43243.523    43264.602    39167.182    0.56928    0.56868 \n 3      PROX_PARK (+)               43177.691    43204.039    39101.331    0.58915    0.58829 \n 4      FREEHOLD (+)                43125.474    43157.092    39049.179    0.60438    0.60327 \n 5      AGE (+)                     43069.222    43106.109    38993.167    0.62010    0.61878 \n 6      PROX_ELDERLYCARE (+)        43046.515    43088.672    38970.548    0.62659    0.62502 \n 7      PROX_SHOPPING_MALL (+)      43020.990    43068.417    38945.209    0.63367    0.63188 \n 8      PROX_URA_GROWTH_AREA (+)    43009.092    43061.788    38933.407    0.63720    0.63517 \n 9      PROX_MRT (+)                42999.058    43057.024    38923.483    0.64023    0.63796 \n 10     PROX_BUS_STOP (+)           42984.951    43048.186    38909.582    0.64424    0.64175 \n 11     FAMILY_FRIENDLY (+)         42981.085    43049.590    38905.797    0.64569    0.64296 \n 12     NO_Of_UNITS (+)             42975.246    43049.021    38900.092    0.64762    0.64465 \n 13     PROX_CHILDCARE (+)          42971.858    43050.902    38896.812    0.64894    0.64573 \n 14     PROX_PRIMARY_SCH (+)        42966.758    43051.072    38891.872    0.65067    0.64723 \n 15     PROX_KINDERGARTEN (+)       42965.558    43055.141    38890.764    0.65145    0.64777 \n---------------------------------------------------------------------------------------------\n\nFinal Model Output \n------------------\n\n                                Model Summary                                 \n-----------------------------------------------------------------------------\nR                            0.807       RMSE                     751161.087 \nR-Squared                    0.651       MSE                570600646491.086 \nAdj. R-Squared               0.648       Coef. Var                    43.135 \nPred R-Squared               0.638       AIC                       42965.558 \nMAE                     413583.799       SBC                       43055.141 \n-----------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n AIC: Akaike Information Criteria \n SBC: Schwarz Bayesian Criteria \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.514394e+15          15        1.009596e+14    176.936    0.0000 \nResidual      8.102529e+14        1420    570600646491.086                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     459826.675    114616.014                   4.012    0.000     234991.777     684661.574 \n            AREA_SQM      12720.174       368.610        0.581     34.509    0.000      11997.096      13443.252 \n            PROX_CBD     -75676.065      5816.474       -0.258    -13.011    0.000     -87085.870     -64266.259 \n           PROX_PARK     575749.528     65523.382        0.151      8.787    0.000     447216.504     704282.552 \n            FREEHOLD     360203.286     48768.851        0.140      7.386    0.000     264536.552     455870.021 \n                 AGE     -24697.719      2752.751       -0.167     -8.972    0.000     -30097.615     -19297.824 \n    PROX_ELDERLYCARE     182435.081     39910.469        0.088      4.571    0.000     104145.268     260724.893 \n  PROX_SHOPPING_MALL    -224513.955     36588.872       -0.117     -6.136    0.000    -296288.004    -152739.906 \nPROX_URA_GROWTH_AREA      40145.474     11758.824        0.062      3.414    0.001      17078.942      63212.007 \n            PROX_MRT    -311753.202     57670.032       -0.119     -5.406    0.000    -424880.814    -198625.590 \n       PROX_BUS_STOP     711858.014    135420.040        0.140      5.257    0.000     446213.188     977502.840 \n     FAMILY_FRIENDLY     144034.218     46874.683        0.057      3.073    0.002      52083.153     235985.283 \n         NO_Of_UNITS       -236.270        88.032       -0.051     -2.684    0.007       -408.956        -63.583 \n      PROX_CHILDCARE    -336118.857    108331.761       -0.088     -3.103    0.002    -548626.339    -123611.374 \n    PROX_PRIMARY_SCH     162183.897     60202.895        0.063      2.694    0.007      44087.730     280280.063 \n   PROX_KINDERGARTEN     141915.768     79726.155        0.029      1.780    0.075     -14477.927     298309.464 \n-----------------------------------------------------------------------------------------------------------------\n\n\nEach method is designed to improve the model by selecting the best predictors.\n\n\n\n\nmetric &lt;- compare_performance(condo_mlr, \n                    condo_fw_mlr$model,\n                    condo_bw_mlr$model,\n                    condo_sb_mlr$model)\n\n\nmetric$Name &lt;- gsub(\".*\\\\\\\\([a-zA-Z0-9_]+)\\\\\\\\, \\\\\\\\model\\\\\\\\.*\", \"\\\\1\", metric$Name)\n\n\nplot(metric)\n\n\n\n\n\n\n\n\n\nggcoefstats(condo_sb_mlr$model,\n            sort = \"ascending\")\n\nNumber of labels is greater than default palette color count.\n• Select another color `palette` (and/or `package`).\n\n\n\n\n\n\n\n\n\nThe compare_performance() function compares the performance of the initial, forward, backward, and stepwise models. This is useful to determine which method provided the best fit.\n\n\n\n\ncheck_collinearity(condo_sb_mlr$model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n                 Term  VIF   VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n             AREA_SQM 1.15 [1.10, 1.24]         1.07      0.87     [0.81, 0.91]\n             PROX_CBD 1.60 [1.50, 1.73]         1.27      0.62     [0.58, 0.67]\n            PROX_PARK 1.21 [1.15, 1.30]         1.10      0.83     [0.77, 0.87]\n             FREEHOLD 1.46 [1.37, 1.57]         1.21      0.68     [0.64, 0.73]\n                  AGE 1.41 [1.33, 1.52]         1.19      0.71     [0.66, 0.75]\n     PROX_ELDERLYCARE 1.52 [1.42, 1.63]         1.23      0.66     [0.61, 0.70]\n   PROX_SHOPPING_MALL 1.49 [1.40, 1.60]         1.22      0.67     [0.62, 0.72]\n PROX_URA_GROWTH_AREA 1.33 [1.26, 1.43]         1.16      0.75     [0.70, 0.79]\n             PROX_MRT 1.96 [1.83, 2.13]         1.40      0.51     [0.47, 0.55]\n        PROX_BUS_STOP 2.89 [2.66, 3.15]         1.70      0.35     [0.32, 0.38]\n      FAMILY_FRIENDLY 1.38 [1.30, 1.48]         1.18      0.72     [0.67, 0.77]\n          NO_Of_UNITS 1.45 [1.37, 1.56]         1.21      0.69     [0.64, 0.73]\n       PROX_CHILDCARE 3.29 [3.02, 3.59]         1.81      0.30     [0.28, 0.33]\n     PROX_PRIMARY_SCH 2.21 [2.05, 2.40]         1.49      0.45     [0.42, 0.49]\n    PROX_KINDERGARTEN 1.11 [1.06, 1.20]         1.05      0.90     [0.84, 0.94]\n\n\n\nplot(check_collinearity(condo_sb_mlr$model)) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\nVariable `Component` is not in your data frame :/\n\n\n\n\n\n\n\n\n\nThis checks for multicollinearity in the selected model, which can be problematic if predictors are highly correlated.\n\nout &lt;- plot(check_model(condo_sb_mlr$model, panel = FALSE))\n\nFor confidence bands, please install `qqplotr`.\n\nout[[2]]\n\n\n\n\n\n\n\n\n\nplot(check_normality(condo_sb_mlr$model))\n\nFor confidence bands, please install `qqplotr`.\n\n\n\n\n\n\n\n\n\nDiagnostic plots for model assumptions (normality and linearity) are generated to assess model validity.\n\n\n\n\noutliers &lt;- check_outliers(condo_sb_mlr$model, method = \"cook\")\noutliers\n\nOK: No outliers detected.\n- Based on the following method and threshold: cook (1).\n- For variable: (Whole model)\n\n\n\nplot(check_outliers(condo_sb_mlr$model, method = \"cook\"))\n\n\n\n\n\n\n\n\nCook’s distance is used to identify influential outliers in the model.\n\n\n\n\n\n\nmlr_output &lt;- as.data.frame(condo_fw_mlr$model$residuals) %&gt;%\n  rename(`FW_MLR_RES` = `condo_fw_mlr$model$residuals`)\n\n\ncondo_resale_sf &lt;- cbind(condo_resale_sf, mlr_output$FW_MLR_RES) %&gt;%\n  rename(`MLR_RES` = `mlr_output.FW_MLR_RES`)\n\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\ntm_shape(mpsz)+\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons(alpha = 0.4) +\ntm_shape(condo_resale_sf) +  \n  tm_dots(col = \"MLR_RES\",\n          alpha = 0.6,\n          style=\"quantile\") \n\nWarning: The shape mpsz is invalid (after reprojection). See sf::st_is_valid\n\n\nVariable(s) \"MLR_RES\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\nThis creates an interactive map, visualizing the spatial distribution of the residuals using tmap.\n\n\n\nI performed a spatial stationarity test using Moran’s I to check for spatial autocorrelation in the model residuals.\n\ncondo_resale_sf &lt;- condo_resale_sf %&gt;%\n  mutate(nb = st_knn(geometry, k=6,longlat = FALSE),\n         wt = st_weights(nb, style = \"W\"), .before = 1)\n\n\nglobal_moran_perm(condo_resale_sf$MLR_RES, \n                  condo_resale_sf$nb, \n                  condo_resale_sf$wt, \n                  alternative = \"two.sided\", \n                  nsim = 99)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.32254, observed rank = 100, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\nMoran’s I test with permutation is conducted to detect spatial autocorrelation in the residuals. The result shows whether there’s significant spatial clustering of model residuals."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex10/In-class_Ex10.html#loading-required-libraries-and-data",
    "href": "In-class_Ex/In-class_Ex10/In-class_Ex10.html#loading-required-libraries-and-data",
    "title": "In Class Exercise 10",
    "section": "",
    "text": "pacman::p_load(olsrr, ggstatsplot, sf,tmap, tidyverse, gtsummary,performance, see, sfdep)\n\nThis code loads all the required R packages using the pacman package to streamline the loading of dependencies.\n\ncondo_resale &lt;- read_csv(\"data/aspatial/Condo_resale_2015.csv\")\n\nRows: 1436 Columns: 23\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (23): LATITUDE, LONGITUDE, POSTCODE, SELLING_PRICE, AREA_SQM, AGE, PROX_...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nmpsz &lt;- read_rds(\"data/rds/mpsz.rds\")\n\ncondo_resale_sf &lt;- read_rds(\"data/rds/condo_resale_sf.rds\")\n\nI loaded the condo resale dataset, subzone geospatial data, and the spatial version of the condo resale data.\n\n\n\nggcorrmat(condo_resale[, 5:23])\n\n\n\n\n\n\n\n\nThis produces a correlation matrix using the ggcorrmat function, which helps visualize the relationships between the numerical variables in the condo_resale dataset.\n\n\n\n\ncondo_mlr &lt;- lm(formula = SELLING_PRICE ~ AREA_SQM + \n                  AGE   + PROX_CBD + PROX_CHILDCARE + \n                  PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n                  PROX_HAWKER_MARKET    + PROX_KINDERGARTEN + \n                  PROX_MRT  + PROX_PARK + PROX_PRIMARY_SCH + \n                  PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + \n                  PROX_SUPERMARKET + PROX_BUS_STOP + \n                  NO_Of_UNITS + FAMILY_FRIENDLY + \n                  FREEHOLD + LEASEHOLD_99YR, \n                data=condo_resale_sf)\nsummary(condo_mlr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + PROX_CHILDCARE + \n    PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + \n    PROX_KINDERGARTEN + PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + \n    PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD + \n    LEASEHOLD_99YR, data = condo_resale_sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3471036  -286903   -22426   239412 12254549 \n\nCoefficients:\n                      Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)           543071.4   136210.9   3.987 7.03e-05 ***\nAREA_SQM               12688.7      370.1  34.283  &lt; 2e-16 ***\nAGE                   -24566.0     2766.0  -8.881  &lt; 2e-16 ***\nPROX_CBD              -78122.0     6791.4 -11.503  &lt; 2e-16 ***\nPROX_CHILDCARE       -333219.0   111020.3  -3.001 0.002734 ** \nPROX_ELDERLYCARE      170950.0    42110.8   4.060 5.19e-05 ***\nPROX_URA_GROWTH_AREA   38507.6    12523.7   3.075 0.002147 ** \nPROX_HAWKER_MARKET     23801.2    29299.9   0.812 0.416739    \nPROX_KINDERGARTEN     144098.0    82738.7   1.742 0.081795 .  \nPROX_MRT             -322775.9    58528.1  -5.515 4.14e-08 ***\nPROX_PARK             564487.9    66563.0   8.481  &lt; 2e-16 ***\nPROX_PRIMARY_SCH      186170.5    65515.2   2.842 0.004553 ** \nPROX_TOP_PRIMARY_SCH    -477.1    20598.0  -0.023 0.981525    \nPROX_SHOPPING_MALL   -207721.5    42855.5  -4.847 1.39e-06 ***\nPROX_SUPERMARKET      -48074.7    77145.3  -0.623 0.533273    \nPROX_BUS_STOP         675755.0   138552.0   4.877 1.20e-06 ***\nNO_Of_UNITS             -216.2       90.3  -2.394 0.016797 *  \nFAMILY_FRIENDLY       142128.3    47055.1   3.020 0.002569 ** \nFREEHOLD              300646.5    77296.5   3.890 0.000105 ***\nLEASEHOLD_99YR        -77137.4    77570.9  -0.994 0.320192    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 755800 on 1416 degrees of freedom\nMultiple R-squared:  0.652, Adjusted R-squared:  0.6474 \nF-statistic: 139.6 on 19 and 1416 DF,  p-value: &lt; 2.2e-16\n\n\nA multiple linear regression model is fitted to predict the SELLING_PRICE of condos using a variety of predictors. The summary function outputs coefficients, R-squared, and statistical significance.\n\n\n\n\nols_regress(condo_mlr)\n\n                                Model Summary                                 \n-----------------------------------------------------------------------------\nR                            0.807       RMSE                     750537.537 \nR-Squared                    0.652       MSE                571262902261.223 \nAdj. R-Squared               0.647       Coef. Var                    43.160 \nPred R-Squared               0.637       AIC                       42971.173 \nMAE                     412117.987       SBC                       43081.835 \n-----------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n AIC: Akaike Information Criteria \n SBC: Schwarz Bayesian Criteria \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.515738e+15          19        7.977571e+13    139.648    0.0000 \nResidual      8.089083e+14        1416    571262902261.223                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     543071.420    136210.918                   3.987    0.000     275874.535     810268.305 \n            AREA_SQM      12688.669       370.119        0.579     34.283    0.000      11962.627      13414.710 \n                 AGE     -24566.001      2766.041       -0.166     -8.881    0.000     -29991.980     -19140.022 \n            PROX_CBD     -78121.985      6791.377       -0.267    -11.503    0.000     -91444.227     -64799.744 \n      PROX_CHILDCARE    -333219.036    111020.303       -0.087     -3.001    0.003    -551000.984    -115437.089 \n    PROX_ELDERLYCARE     170949.961     42110.748        0.083      4.060    0.000      88343.803     253556.120 \nPROX_URA_GROWTH_AREA      38507.622     12523.661        0.059      3.075    0.002      13940.700      63074.545 \n  PROX_HAWKER_MARKET      23801.197     29299.923        0.019      0.812    0.417     -33674.725      81277.120 \n   PROX_KINDERGARTEN     144097.972     82738.669        0.030      1.742    0.082     -18205.570     306401.514 \n            PROX_MRT    -322775.874     58528.079       -0.123     -5.515    0.000    -437586.937    -207964.811 \n           PROX_PARK     564487.876     66563.011        0.148      8.481    0.000     433915.162     695060.590 \n    PROX_PRIMARY_SCH     186170.524     65515.193        0.072      2.842    0.005      57653.253     314687.795 \nPROX_TOP_PRIMARY_SCH       -477.073     20597.972       -0.001     -0.023    0.982     -40882.894      39928.747 \n  PROX_SHOPPING_MALL    -207721.520     42855.500       -0.109     -4.847    0.000    -291788.613    -123654.427 \n    PROX_SUPERMARKET     -48074.679     77145.257       -0.012     -0.623    0.533    -199405.956     103256.599 \n       PROX_BUS_STOP     675755.044    138551.991        0.133      4.877    0.000     403965.817     947544.272 \n         NO_Of_UNITS       -216.180        90.302       -0.046     -2.394    0.017       -393.320        -39.040 \n     FAMILY_FRIENDLY     142128.272     47055.082        0.056      3.020    0.003      49823.107     234433.438 \n            FREEHOLD     300646.543     77296.529        0.117      3.890    0.000     149018.525     452274.561 \n      LEASEHOLD_99YR     -77137.375     77570.869       -0.030     -0.994    0.320    -229303.551      75028.801 \n-----------------------------------------------------------------------------------------------------------------\n\n\nUsing the olsrr package, this function provides detailed diagnostics for the MLR model.\n\n\n\nI performed forward, backward, and stepwise selection methods to optimize the MLR model based on p-values.\n\ncondo_fw_mlr &lt;- ols_step_forward_p(\n  condo_mlr,\n  p_val = 0.05,\n  details = FALSE)\ncondo_fw_mlr\n\n\n                                     Stepwise Summary                                      \n-----------------------------------------------------------------------------------------\nStep    Variable                   AIC          SBC         SBIC         R2       Adj. R2 \n-----------------------------------------------------------------------------------------\n 0      Base Model              44449.068    44459.608    40371.745    0.00000    0.00000 \n 1      AREA_SQM                43587.753    43603.562    39510.883    0.45184    0.45146 \n 2      PROX_CBD                43243.523    43264.602    39167.182    0.56928    0.56868 \n 3      PROX_PARK               43177.691    43204.039    39101.331    0.58915    0.58829 \n 4      FREEHOLD                43125.474    43157.092    39049.179    0.60438    0.60327 \n 5      AGE                     43069.222    43106.109    38993.167    0.62010    0.61878 \n 6      PROX_ELDERLYCARE        43046.515    43088.672    38970.548    0.62659    0.62502 \n 7      PROX_SHOPPING_MALL      43020.990    43068.417    38945.209    0.63367    0.63188 \n 8      PROX_URA_GROWTH_AREA    43009.092    43061.788    38933.407    0.63720    0.63517 \n 9      PROX_MRT                42999.058    43057.024    38923.483    0.64023    0.63796 \n 10     PROX_BUS_STOP           42984.951    43048.186    38909.582    0.64424    0.64175 \n 11     FAMILY_FRIENDLY         42981.085    43049.590    38905.797    0.64569    0.64296 \n 12     NO_Of_UNITS             42975.246    43049.021    38900.092    0.64762    0.64465 \n 13     PROX_CHILDCARE          42971.858    43050.902    38896.812    0.64894    0.64573 \n 14     PROX_PRIMARY_SCH        42966.758    43051.072    38891.872    0.65067    0.64723 \n-----------------------------------------------------------------------------------------\n\nFinal Model Output \n------------------\n\n                                Model Summary                                 \n-----------------------------------------------------------------------------\nR                            0.807       RMSE                     751998.679 \nR-Squared                    0.651       MSE                571471422208.591 \nAdj. R-Squared               0.647       Coef. Var                    43.168 \nPred R-Squared               0.638       AIC                       42966.758 \nMAE                     414819.628       SBC                       43051.072 \n-----------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n AIC: Akaike Information Criteria \n SBC: Schwarz Bayesian Criteria \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.512586e+15          14        1.080418e+14    189.059    0.0000 \nResidual      8.120609e+14        1421    571471422208.591                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     527633.222    108183.223                   4.877    0.000     315417.244     739849.200 \n            AREA_SQM      12777.523       367.479        0.584     34.771    0.000      12056.663      13498.382 \n            PROX_CBD     -77131.323      5763.125       -0.263    -13.384    0.000     -88436.469     -65826.176 \n           PROX_PARK     570504.807     65507.029        0.150      8.709    0.000     442003.938     699005.677 \n            FREEHOLD     350599.812     48506.485        0.136      7.228    0.000     255447.802     445751.821 \n                 AGE     -24687.739      2754.845       -0.167     -8.962    0.000     -30091.739     -19283.740 \n    PROX_ELDERLYCARE     185575.623     39901.864        0.090      4.651    0.000     107302.737     263848.510 \n  PROX_SHOPPING_MALL    -220947.251     36561.832       -0.115     -6.043    0.000    -292668.213    -149226.288 \nPROX_URA_GROWTH_AREA      39163.254     11754.829        0.060      3.332    0.001      16104.571      62221.936 \n            PROX_MRT    -294745.107     56916.367       -0.112     -5.179    0.000    -406394.234    -183095.980 \n       PROX_BUS_STOP     682482.221    134513.243        0.134      5.074    0.000     418616.359     946348.082 \n     FAMILY_FRIENDLY     146307.576     46893.021        0.057      3.120    0.002      54320.593     238294.560 \n         NO_Of_UNITS       -245.480        87.947       -0.053     -2.791    0.005       -418.000        -72.961 \n      PROX_CHILDCARE    -318472.751    107959.512       -0.084     -2.950    0.003    -530249.889    -106695.613 \n    PROX_PRIMARY_SCH     159856.136     60234.599        0.062      2.654    0.008      41697.849     278014.424 \n-----------------------------------------------------------------------------------------------------------------\n\n\n\nplot(condo_fw_mlr)\n\n\n\n\n\n\n\n\n\ncondo_bw_mlr &lt;- ols_step_backward_p(\n  condo_mlr,\n  p_val = 0.05,\n  details = FALSE)\ncondo_bw_mlr\n\n\n                                     Stepwise Summary                                      \n-----------------------------------------------------------------------------------------\nStep    Variable                   AIC          SBC         SBIC         R2       Adj. R2 \n-----------------------------------------------------------------------------------------\n 0      Full Model              42971.173    43081.835    38896.546    0.65203    0.64736 \n 1      PROX_TOP_PRIMARY_SCH    42969.173    43074.565    38894.518    0.65203    0.64761 \n 2      PROX_SUPERMARKET        42967.567    43067.689    38892.873    0.65193    0.64776 \n 3      PROX_HAWKER_MARKET      42966.461    43061.315    38891.719    0.65172    0.64779 \n 4      LEASEHOLD_99YR          42965.558    43055.141    38890.764    0.65145    0.64777 \n 5      PROX_KINDERGARTEN       42966.758    43051.072    38891.872    0.65067    0.64723 \n-----------------------------------------------------------------------------------------\n\nFinal Model Output \n------------------\n\n                                Model Summary                                 \n-----------------------------------------------------------------------------\nR                            0.807       RMSE                     751998.679 \nR-Squared                    0.651       MSE                571471422208.591 \nAdj. R-Squared               0.647       Coef. Var                    43.168 \nPred R-Squared               0.638       AIC                       42966.758 \nMAE                     414819.628       SBC                       43051.072 \n-----------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n AIC: Akaike Information Criteria \n SBC: Schwarz Bayesian Criteria \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.512586e+15          14        1.080418e+14    189.059    0.0000 \nResidual      8.120609e+14        1421    571471422208.591                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     527633.222    108183.223                   4.877    0.000     315417.244     739849.200 \n            AREA_SQM      12777.523       367.479        0.584     34.771    0.000      12056.663      13498.382 \n                 AGE     -24687.739      2754.845       -0.167     -8.962    0.000     -30091.739     -19283.740 \n            PROX_CBD     -77131.323      5763.125       -0.263    -13.384    0.000     -88436.469     -65826.176 \n      PROX_CHILDCARE    -318472.751    107959.512       -0.084     -2.950    0.003    -530249.889    -106695.613 \n    PROX_ELDERLYCARE     185575.623     39901.864        0.090      4.651    0.000     107302.737     263848.510 \nPROX_URA_GROWTH_AREA      39163.254     11754.829        0.060      3.332    0.001      16104.571      62221.936 \n            PROX_MRT    -294745.107     56916.367       -0.112     -5.179    0.000    -406394.234    -183095.980 \n           PROX_PARK     570504.807     65507.029        0.150      8.709    0.000     442003.938     699005.677 \n    PROX_PRIMARY_SCH     159856.136     60234.599        0.062      2.654    0.008      41697.849     278014.424 \n  PROX_SHOPPING_MALL    -220947.251     36561.832       -0.115     -6.043    0.000    -292668.213    -149226.288 \n       PROX_BUS_STOP     682482.221    134513.243        0.134      5.074    0.000     418616.359     946348.082 \n         NO_Of_UNITS       -245.480        87.947       -0.053     -2.791    0.005       -418.000        -72.961 \n     FAMILY_FRIENDLY     146307.576     46893.021        0.057      3.120    0.002      54320.593     238294.560 \n            FREEHOLD     350599.812     48506.485        0.136      7.228    0.000     255447.802     445751.821 \n-----------------------------------------------------------------------------------------------------------------\n\n\n\ncondo_sb_mlr &lt;- ols_step_both_p(\n  condo_mlr,\n  p_val = 0.05,\n  details = FALSE)\ncondo_sb_mlr\n\n\n                                       Stepwise Summary                                        \n---------------------------------------------------------------------------------------------\nStep    Variable                       AIC          SBC         SBIC         R2       Adj. R2 \n---------------------------------------------------------------------------------------------\n 0      Base Model                  44449.068    44459.608    40371.745    0.00000    0.00000 \n 1      AREA_SQM (+)                43587.753    43603.562    39510.883    0.45184    0.45146 \n 2      PROX_CBD (+)                43243.523    43264.602    39167.182    0.56928    0.56868 \n 3      PROX_PARK (+)               43177.691    43204.039    39101.331    0.58915    0.58829 \n 4      FREEHOLD (+)                43125.474    43157.092    39049.179    0.60438    0.60327 \n 5      AGE (+)                     43069.222    43106.109    38993.167    0.62010    0.61878 \n 6      PROX_ELDERLYCARE (+)        43046.515    43088.672    38970.548    0.62659    0.62502 \n 7      PROX_SHOPPING_MALL (+)      43020.990    43068.417    38945.209    0.63367    0.63188 \n 8      PROX_URA_GROWTH_AREA (+)    43009.092    43061.788    38933.407    0.63720    0.63517 \n 9      PROX_MRT (+)                42999.058    43057.024    38923.483    0.64023    0.63796 \n 10     PROX_BUS_STOP (+)           42984.951    43048.186    38909.582    0.64424    0.64175 \n 11     FAMILY_FRIENDLY (+)         42981.085    43049.590    38905.797    0.64569    0.64296 \n 12     NO_Of_UNITS (+)             42975.246    43049.021    38900.092    0.64762    0.64465 \n 13     PROX_CHILDCARE (+)          42971.858    43050.902    38896.812    0.64894    0.64573 \n 14     PROX_PRIMARY_SCH (+)        42966.758    43051.072    38891.872    0.65067    0.64723 \n 15     PROX_KINDERGARTEN (+)       42965.558    43055.141    38890.764    0.65145    0.64777 \n---------------------------------------------------------------------------------------------\n\nFinal Model Output \n------------------\n\n                                Model Summary                                 \n-----------------------------------------------------------------------------\nR                            0.807       RMSE                     751161.087 \nR-Squared                    0.651       MSE                570600646491.086 \nAdj. R-Squared               0.648       Coef. Var                    43.135 \nPred R-Squared               0.638       AIC                       42965.558 \nMAE                     413583.799       SBC                       43055.141 \n-----------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n AIC: Akaike Information Criteria \n SBC: Schwarz Bayesian Criteria \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.514394e+15          15        1.009596e+14    176.936    0.0000 \nResidual      8.102529e+14        1420    570600646491.086                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     459826.675    114616.014                   4.012    0.000     234991.777     684661.574 \n            AREA_SQM      12720.174       368.610        0.581     34.509    0.000      11997.096      13443.252 \n            PROX_CBD     -75676.065      5816.474       -0.258    -13.011    0.000     -87085.870     -64266.259 \n           PROX_PARK     575749.528     65523.382        0.151      8.787    0.000     447216.504     704282.552 \n            FREEHOLD     360203.286     48768.851        0.140      7.386    0.000     264536.552     455870.021 \n                 AGE     -24697.719      2752.751       -0.167     -8.972    0.000     -30097.615     -19297.824 \n    PROX_ELDERLYCARE     182435.081     39910.469        0.088      4.571    0.000     104145.268     260724.893 \n  PROX_SHOPPING_MALL    -224513.955     36588.872       -0.117     -6.136    0.000    -296288.004    -152739.906 \nPROX_URA_GROWTH_AREA      40145.474     11758.824        0.062      3.414    0.001      17078.942      63212.007 \n            PROX_MRT    -311753.202     57670.032       -0.119     -5.406    0.000    -424880.814    -198625.590 \n       PROX_BUS_STOP     711858.014    135420.040        0.140      5.257    0.000     446213.188     977502.840 \n     FAMILY_FRIENDLY     144034.218     46874.683        0.057      3.073    0.002      52083.153     235985.283 \n         NO_Of_UNITS       -236.270        88.032       -0.051     -2.684    0.007       -408.956        -63.583 \n      PROX_CHILDCARE    -336118.857    108331.761       -0.088     -3.103    0.002    -548626.339    -123611.374 \n    PROX_PRIMARY_SCH     162183.897     60202.895        0.063      2.694    0.007      44087.730     280280.063 \n   PROX_KINDERGARTEN     141915.768     79726.155        0.029      1.780    0.075     -14477.927     298309.464 \n-----------------------------------------------------------------------------------------------------------------\n\n\nEach method is designed to improve the model by selecting the best predictors.\n\n\n\n\nmetric &lt;- compare_performance(condo_mlr, \n                    condo_fw_mlr$model,\n                    condo_bw_mlr$model,\n                    condo_sb_mlr$model)\n\n\nmetric$Name &lt;- gsub(\".*\\\\\\\\([a-zA-Z0-9_]+)\\\\\\\\, \\\\\\\\model\\\\\\\\.*\", \"\\\\1\", metric$Name)\n\n\nplot(metric)\n\n\n\n\n\n\n\n\n\nggcoefstats(condo_sb_mlr$model,\n            sort = \"ascending\")\n\nNumber of labels is greater than default palette color count.\n• Select another color `palette` (and/or `package`).\n\n\n\n\n\n\n\n\n\nThe compare_performance() function compares the performance of the initial, forward, backward, and stepwise models. This is useful to determine which method provided the best fit.\n\n\n\n\ncheck_collinearity(condo_sb_mlr$model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n                 Term  VIF   VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n             AREA_SQM 1.15 [1.10, 1.24]         1.07      0.87     [0.81, 0.91]\n             PROX_CBD 1.60 [1.50, 1.73]         1.27      0.62     [0.58, 0.67]\n            PROX_PARK 1.21 [1.15, 1.30]         1.10      0.83     [0.77, 0.87]\n             FREEHOLD 1.46 [1.37, 1.57]         1.21      0.68     [0.64, 0.73]\n                  AGE 1.41 [1.33, 1.52]         1.19      0.71     [0.66, 0.75]\n     PROX_ELDERLYCARE 1.52 [1.42, 1.63]         1.23      0.66     [0.61, 0.70]\n   PROX_SHOPPING_MALL 1.49 [1.40, 1.60]         1.22      0.67     [0.62, 0.72]\n PROX_URA_GROWTH_AREA 1.33 [1.26, 1.43]         1.16      0.75     [0.70, 0.79]\n             PROX_MRT 1.96 [1.83, 2.13]         1.40      0.51     [0.47, 0.55]\n        PROX_BUS_STOP 2.89 [2.66, 3.15]         1.70      0.35     [0.32, 0.38]\n      FAMILY_FRIENDLY 1.38 [1.30, 1.48]         1.18      0.72     [0.67, 0.77]\n          NO_Of_UNITS 1.45 [1.37, 1.56]         1.21      0.69     [0.64, 0.73]\n       PROX_CHILDCARE 3.29 [3.02, 3.59]         1.81      0.30     [0.28, 0.33]\n     PROX_PRIMARY_SCH 2.21 [2.05, 2.40]         1.49      0.45     [0.42, 0.49]\n    PROX_KINDERGARTEN 1.11 [1.06, 1.20]         1.05      0.90     [0.84, 0.94]\n\n\n\nplot(check_collinearity(condo_sb_mlr$model)) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\nVariable `Component` is not in your data frame :/\n\n\n\n\n\n\n\n\n\nThis checks for multicollinearity in the selected model, which can be problematic if predictors are highly correlated.\n\nout &lt;- plot(check_model(condo_sb_mlr$model, panel = FALSE))\n\nFor confidence bands, please install `qqplotr`.\n\nout[[2]]\n\n\n\n\n\n\n\n\n\nplot(check_normality(condo_sb_mlr$model))\n\nFor confidence bands, please install `qqplotr`.\n\n\n\n\n\n\n\n\n\nDiagnostic plots for model assumptions (normality and linearity) are generated to assess model validity.\n\n\n\n\noutliers &lt;- check_outliers(condo_sb_mlr$model, method = \"cook\")\noutliers\n\nOK: No outliers detected.\n- Based on the following method and threshold: cook (1).\n- For variable: (Whole model)\n\n\n\nplot(check_outliers(condo_sb_mlr$model, method = \"cook\"))\n\n\n\n\n\n\n\n\nCook’s distance is used to identify influential outliers in the model.\n\n\n\n\n\n\nmlr_output &lt;- as.data.frame(condo_fw_mlr$model$residuals) %&gt;%\n  rename(`FW_MLR_RES` = `condo_fw_mlr$model$residuals`)\n\n\ncondo_resale_sf &lt;- cbind(condo_resale_sf, mlr_output$FW_MLR_RES) %&gt;%\n  rename(`MLR_RES` = `mlr_output.FW_MLR_RES`)\n\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\ntm_shape(mpsz)+\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons(alpha = 0.4) +\ntm_shape(condo_resale_sf) +  \n  tm_dots(col = \"MLR_RES\",\n          alpha = 0.6,\n          style=\"quantile\") \n\nWarning: The shape mpsz is invalid (after reprojection). See sf::st_is_valid\n\n\nVariable(s) \"MLR_RES\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\nThis creates an interactive map, visualizing the spatial distribution of the residuals using tmap.\n\n\n\nI performed a spatial stationarity test using Moran’s I to check for spatial autocorrelation in the model residuals.\n\ncondo_resale_sf &lt;- condo_resale_sf %&gt;%\n  mutate(nb = st_knn(geometry, k=6,longlat = FALSE),\n         wt = st_weights(nb, style = \"W\"), .before = 1)\n\n\nglobal_moran_perm(condo_resale_sf$MLR_RES, \n                  condo_resale_sf$nb, \n                  condo_resale_sf$wt, \n                  alternative = \"two.sided\", \n                  nsim = 99)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.32254, observed rank = 100, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\nMoran’s I test with permutation is conducted to detect spatial autocorrelation in the residuals. The result shows whether there’s significant spatial clustering of model residuals."
  }
]