[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "IS415",
    "section": "",
    "text": "Welcome to my IS415 website, dedicated to the fascinating world of Geospatial Analytics. This site showcases all my exercise results and research conducted throughout the course.\n\n\n\nGeospatial Analytics involves the analysis and interpretation of data related to geographic locations. By using various tools and techniques, we can derive meaningful insights from spatial data, enabling better decision-making in various fields like urban planning, environmental monitoring, and logistics.\n\n\n\nThis section contains links to my exercises and their corresponding results. Each exercise demonstrates a different aspect of geospatial analysis, from data collection to visualization.\n\nExercise 1: Geospatial Data Science with R\nExercise 2: Thematic Mapping and GeoVisualisation with R\n\n\n\n\nMy research in this course focuses on various applications of geospatial analytics. Below, you can find my in-depth research projects.\n\n\n\nFeel free to reach out if you have any questions or comments about my work.\n\nThank you for visiting my IS415 website!"
  },
  {
    "objectID": "index.html#course-overview",
    "href": "index.html#course-overview",
    "title": "IS415",
    "section": "",
    "text": "Welcome to my IS415 website, dedicated to the fascinating world of Geospatial Analytics. This site showcases all my exercise results and research conducted throughout the course."
  },
  {
    "objectID": "index.html#about-geospatial-analytics",
    "href": "index.html#about-geospatial-analytics",
    "title": "IS415",
    "section": "",
    "text": "Geospatial Analytics involves the analysis and interpretation of data related to geographic locations. By using various tools and techniques, we can derive meaningful insights from spatial data, enabling better decision-making in various fields like urban planning, environmental monitoring, and logistics."
  },
  {
    "objectID": "index.html#exercises-and-results",
    "href": "index.html#exercises-and-results",
    "title": "IS415",
    "section": "",
    "text": "This section contains links to my exercises and their corresponding results. Each exercise demonstrates a different aspect of geospatial analysis, from data collection to visualization.\n\nExercise 1: Geospatial Data Science with R\nExercise 2: Thematic Mapping and GeoVisualisation with R"
  },
  {
    "objectID": "index.html#research",
    "href": "index.html#research",
    "title": "IS415",
    "section": "",
    "text": "My research in this course focuses on various applications of geospatial analytics. Below, you can find my in-depth research projects."
  },
  {
    "objectID": "index.html#contact",
    "href": "index.html#contact",
    "title": "IS415",
    "section": "",
    "text": "Feel free to reach out if you have any questions or comments about my work.\n\nThank you for visiting my IS415 website!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "1 Learning Outcome\nGeospatial Data Science involves the process of importing, wrangling, integrating, and analyzing geographically referenced datasets. In this hands-on exercise, I have learned how to perform geospatial data science tasks in R using the sf package, which provides powerful tools for working with spatial data.\n\n\n2 Data Acquisition\nData is the foundation of any analytical task, including geospatial analysis. Therefore, before diving into analysis, I first gathered the necessary datasets. In this exercise, I have acquired the following data:\n\nMaster Plan 2014 Subzone Boundary from data.gov.sg\nPre-Schools Location from data.gov.sg\nCycling Path data from LTA DataMall\nThe latest version of Singapore Airbnb listing data from Inside Airbnb\n\n\n\n3 Getting Started\nBefore importing and working with geospatial data, I ensured that the necessary packages were loaded. The following command uses pacman::p_load() to load or install the required R packages: sf for spatial data handling and tidyverse for data manipulation.\n\npacman::p_load(sf, tidyverse)\n\n\n\n4 Importing Geospatial Data\nNext, I imported the geospatial data into R as sf objects, which are data frames that include spatial information. - Master Plan 2014 Subzone Boundary: The st_read() function is used to read spatial data. Here, I specified the data source directory (dsn) and the specific layer to be loaded.\n\nmpsz = st_read(dsn = \"data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP\", \n                  layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\EasonXu-HY99\\IS415\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial\\MasterPlan2014SubzoneBoundaryWebSHP' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nCycling Path data: Similarly, I imported the cycling path data using st_read(). This command loads the specified layer from the provided directory.\n\n\ncyclingpath = st_read(dsn = \"data/geospatial/CyclingPath_Jul2024\", \n                         layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\EasonXu-HY99\\IS415\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial\\CyclingPath_Jul2024' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3138 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42644.17 ymax: 48948.15\nProjected CRS: SVY21\n\n\n\nPre-Schools Location: The pre-schools data is stored in a KML (Keyhole Markup Language) file. The st_read() function can directly import this format, converting it into an sf object.\n\n\npreschool = st_read(\"data/geospatial/PreSchoolsLocation/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\EasonXu-HY99\\IS415\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial\\PreSchoolsLocation\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\n\n5 Checking the Content of A Simple Feature Data Frame\nOnce the spatial data was imported, I inspected its contents to understand its structure and the types of geometries it contains. - Inspecting geometries: The st_geometry() function extracts and displays the geometric data from an sf object, helping me understand the spatial structure of the dataset.\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\n\nGlimpse of the data: Using glimpse() from tidyverse, I obtained a quick overview of the mpsz data frame, showing its structure and the first few rows of each column.\n\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\n\nViewing the first few records: The head() function displayed the first few rows of the mpsz data frame, which helped me quickly inspect the data.\n\n\nhead(mpsz, n=5)  \n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\n\n\n6 Plotting the Geospatial Data\nVisualizing spatial data is a key part of geospatial analysis. The plot() function is used to create basic plots of spatial objects.\n\nPlotting the entire mpsz object: This command created a default plot of the mpsz spatial object, showing all its spatial features.\n\n\nplot(mpsz)\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\nPlotting only the geometries:\n\nHere, I used st_geometry() within plot() to visualize just the geometric shapes, without any associated attribute data.\n\nplot(st_geometry(mpsz))\n\n\n\n\n\n\n\n\n\nPlotting specific attributes:\n\nTo visualize specific attributes, such as the planning area names (PLN_AREA_N), I used the following command.\n\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\n\n\n\n\n\n\n7 Working with Projection\nUnderstanding and managing coordinate reference systems (CRS) is critical in geospatial analysis. I have checked the CRS of the mpsz data and reprojected it to a different CRS using the following commands:\n\nChecking the CRS:\nI used the st_crs() function to check the current CRS of the mpsz object.\n\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\nSetting a new CRS (EPSG: 3414):\n\nThe st_set_crs() function allowed me to assign the Singapore-specific EPSG: 3414 to the mpsz data.\n\nmpsz3414 &lt;- st_set_crs(mpsz, 3414)\n\nWarning: st_crs&lt;- : replacing crs does not reproject data; use st_transform for\nthat\n\n\n\nVerifying the new CRS:\n\nAfter setting the new CRS, I confirmed the change by checking the CRS of the mpsz3414 object.\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\nChecking the geometry of the preschool data:\n\nI inspected the geometry of the preschool data to understand its current projection.\n\nst_geometry(preschool)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\nPOINT Z (103.8072 1.299333 0)\n\n\nPOINT Z (103.826 1.312839 0)\n\n\nPOINT Z (103.8409 1.348843 0)\n\n\nPOINT Z (103.8048 1.435024 0)\n\n\nPOINT Z (103.839 1.33315 0)\n\n\n\nTransforming the CRS of the preschool data:\n\nThe st_transform() function was used to reproject the preschool data to match the CRS (EPSG: 3414) of the mpsz3414 object.\n\npreschool3414 &lt;- st_transform(preschool, \n                              crs = 3414)\n\n\nVerifying the transformed geometry:\n\nI verified the transformed geometry of the preschool3414 object.\n\nst_geometry(preschool3414)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11810.03 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\nPOINT Z (25089.46 31299.16 0)\n\n\nPOINT Z (27189.07 32792.54 0)\n\n\nPOINT Z (28844.56 36773.76 0)\n\n\nPOINT Z (24821.92 46303.16 0)\n\n\nPOINT Z (28637.82 35038.49 0)\n\n\n\n\n8 Importing and Converting an Aspatial Data\nIn this step, I imported an aspatial dataset (a dataset without spatial attributes) and converted it to a spatial format using the sf package.\n\nImporting the listings data:\n\nI used read_csv() to load a CSV file containing Airbnb listings into R.\n\nlistings &lt;- read_csv(\"data/aspatial/listings.csv\")\n\nRows: 3540 Columns: 75\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (26): listing_url, source, name, description, neighborhood_overview, pi...\ndbl  (38): id, scrape_id, host_id, host_listings_count, host_total_listings_...\nlgl   (6): host_is_superhost, host_has_profile_pic, host_identity_verified, ...\ndate  (5): last_scraped, host_since, calendar_last_scraped, first_review, la...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nInspecting the data structure:\n\nThe list() function was used to check the structure of the listings data frame.\n\nlist(listings) \n\n[[1]]\n# A tibble: 3,540 × 75\n       id listing_url            scrape_id last_scraped source name  description\n    &lt;dbl&gt; &lt;chr&gt;                      &lt;dbl&gt; &lt;date&gt;       &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;      \n 1  71609 https://www.airbnb.co…   2.02e13 2024-06-29   previ… Ensu… For 3 room…\n 2  71896 https://www.airbnb.co…   2.02e13 2024-06-29   city … B&B … &lt;NA&gt;       \n 3  71903 https://www.airbnb.co…   2.02e13 2024-06-29   city … Room… Like your …\n 4 275343 https://www.airbnb.co…   2.02e13 2024-06-29   city … 10mi… **IMPORTAN…\n 5 275344 https://www.airbnb.co…   2.02e13 2024-06-29   city … 15 m… Lovely hom…\n 6 289234 https://www.airbnb.co…   2.02e13 2024-06-29   previ… Book… This whole…\n 7 294281 https://www.airbnb.co…   2.02e13 2024-06-29   city … 5 mi… I have 3 b…\n 8 324945 https://www.airbnb.co…   2.02e13 2024-06-29   city … Comf… **IMPORTAN…\n 9 330095 https://www.airbnb.co…   2.02e13 2024-06-29   city … Rela… **IMPORTAN…\n10 344803 https://www.airbnb.co…   2.02e13 2024-06-29   city … Budg… Direct bus…\n# ℹ 3,530 more rows\n# ℹ 68 more variables: neighborhood_overview &lt;chr&gt;, picture_url &lt;chr&gt;,\n#   host_id &lt;dbl&gt;, host_url &lt;chr&gt;, host_name &lt;chr&gt;, host_since &lt;date&gt;,\n#   host_location &lt;chr&gt;, host_about &lt;chr&gt;, host_response_time &lt;chr&gt;,\n#   host_response_rate &lt;chr&gt;, host_acceptance_rate &lt;chr&gt;,\n#   host_is_superhost &lt;lgl&gt;, host_thumbnail_url &lt;chr&gt;, host_picture_url &lt;chr&gt;,\n#   host_neighbourhood &lt;chr&gt;, host_listings_count &lt;dbl&gt;, …\n\n\n\nConverting to an sf object:\n\nI converted the listings data into a spatial format using st_as_sf(). The coords argument specifies the columns containing longitude and latitude, and I set the CRS to EPSG: 4326 before transforming it to EPSG: 3414.\n\nlistings_sf &lt;- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %&gt;%\n  st_transform(crs = 3414)\n\n\nChecking the structure of the spatial data:\n\nFinally, I used glimpse() to inspect the structure of the newly created listings_sf object.\n\nglimpse(listings_sf)\n\nRows: 3,540\nColumns: 74\n$ id                                           &lt;dbl&gt; 71609, 71896, 71903, 2753…\n$ listing_url                                  &lt;chr&gt; \"https://www.airbnb.com/r…\n$ scrape_id                                    &lt;dbl&gt; 2.024063e+13, 2.024063e+1…\n$ last_scraped                                 &lt;date&gt; 2024-06-29, 2024-06-29, …\n$ source                                       &lt;chr&gt; \"previous scrape\", \"city …\n$ name                                         &lt;chr&gt; \"Ensuite Room (Room 1 & 2…\n$ description                                  &lt;chr&gt; \"For 3 rooms.Book room 1 …\n$ neighborhood_overview                        &lt;chr&gt; NA, NA, \"Quiet and view o…\n$ picture_url                                  &lt;chr&gt; \"https://a0.muscache.com/…\n$ host_id                                      &lt;dbl&gt; 367042, 367042, 367042, 1…\n$ host_url                                     &lt;chr&gt; \"https://www.airbnb.com/u…\n$ host_name                                    &lt;chr&gt; \"Belinda\", \"Belinda\", \"Be…\n$ host_since                                   &lt;date&gt; 2011-01-29, 2011-01-29, …\n$ host_location                                &lt;chr&gt; \"Singapore\", \"Singapore\",…\n$ host_about                                   &lt;chr&gt; \"Hi My name is Belinda -H…\n$ host_response_time                           &lt;chr&gt; \"within an hour\", \"within…\n$ host_response_rate                           &lt;chr&gt; \"100%\", \"100%\", \"100%\", \"…\n$ host_acceptance_rate                         &lt;chr&gt; \"N/A\", \"N/A\", \"N/A\", \"99%…\n$ host_is_superhost                            &lt;lgl&gt; FALSE, FALSE, FALSE, FALS…\n$ host_thumbnail_url                           &lt;chr&gt; \"https://a0.muscache.com/…\n$ host_picture_url                             &lt;chr&gt; \"https://a0.muscache.com/…\n$ host_neighbourhood                           &lt;chr&gt; \"Tampines\", \"Tampines\", \"…\n$ host_listings_count                          &lt;dbl&gt; 6, 6, 6, 49, 49, 6, 7, 49…\n$ host_total_listings_count                    &lt;dbl&gt; 11, 11, 11, 73, 73, 11, 8…\n$ host_verifications                           &lt;chr&gt; \"['email', 'phone']\", \"['…\n$ host_has_profile_pic                         &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, T…\n$ host_identity_verified                       &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, T…\n$ neighbourhood                                &lt;chr&gt; NA, NA, \"Singapore, Singa…\n$ neighbourhood_cleansed                       &lt;chr&gt; \"Tampines\", \"Tampines\", \"…\n$ neighbourhood_group_cleansed                 &lt;chr&gt; \"East Region\", \"East Regi…\n$ property_type                                &lt;chr&gt; \"Private room in villa\", …\n$ room_type                                    &lt;chr&gt; \"Private room\", \"Private …\n$ accommodates                                 &lt;dbl&gt; 3, 1, 2, 1, 1, 4, 2, 1, 1…\n$ bathrooms                                    &lt;dbl&gt; NA, 0.5, 0.5, 2.0, 2.5, N…\n$ bathrooms_text                               &lt;chr&gt; \"1 private bath\", \"Shared…\n$ bedrooms                                     &lt;dbl&gt; 2, 1, 1, 1, 1, 3, 2, 1, 1…\n$ beds                                         &lt;dbl&gt; NA, 1, 2, 1, 1, NA, 1, 1,…\n$ amenities                                    &lt;chr&gt; \"[\\\"Free parking on premi…\n$ price                                        &lt;chr&gt; NA, \"$80.00\", \"$80.00\", \"…\n$ minimum_nights                               &lt;dbl&gt; 92, 92, 92, 180, 180, 92,…\n$ maximum_nights                               &lt;dbl&gt; 365, 365, 365, 999, 999, …\n$ minimum_minimum_nights                       &lt;dbl&gt; 92, 92, 92, 180, 180, 92,…\n$ maximum_minimum_nights                       &lt;dbl&gt; 92, 92, 92, 180, 180, 92,…\n$ minimum_maximum_nights                       &lt;dbl&gt; 1125, 1125, 1125, 1125, 1…\n$ maximum_maximum_nights                       &lt;dbl&gt; 1125, 1125, 1125, 1125, 1…\n$ minimum_nights_avg_ntm                       &lt;dbl&gt; 92, 92, 92, 180, 180, 92,…\n$ maximum_nights_avg_ntm                       &lt;dbl&gt; 1125, 1125, 1125, 1125, 1…\n$ calendar_updated                             &lt;lgl&gt; NA, NA, NA, NA, NA, NA, N…\n$ has_availability                             &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, T…\n$ availability_30                              &lt;dbl&gt; 30, 30, 30, 28, 0, 29, 30…\n$ availability_60                              &lt;dbl&gt; 59, 53, 60, 58, 0, 58, 60…\n$ availability_90                              &lt;dbl&gt; 89, 83, 90, 62, 0, 88, 90…\n$ availability_365                             &lt;dbl&gt; 89, 148, 90, 62, 0, 88, 3…\n$ calendar_last_scraped                        &lt;date&gt; 2024-06-29, 2024-06-29, …\n$ number_of_reviews                            &lt;dbl&gt; 19, 24, 46, 20, 16, 12, 1…\n$ number_of_reviews_ltm                        &lt;dbl&gt; 0, 0, 0, 0, 2, 0, 0, 1, 1…\n$ number_of_reviews_l30d                       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ first_review                                 &lt;date&gt; 2011-12-19, 2011-07-30, …\n$ last_review                                  &lt;date&gt; 2020-01-17, 2019-10-13, …\n$ review_scores_rating                         &lt;dbl&gt; 4.44, 4.16, 4.41, 4.40, 4…\n$ review_scores_accuracy                       &lt;dbl&gt; 4.37, 4.22, 4.39, 4.16, 4…\n$ review_scores_cleanliness                    &lt;dbl&gt; 4.00, 4.09, 4.52, 4.26, 4…\n$ review_scores_checkin                        &lt;dbl&gt; 4.63, 4.43, 4.63, 4.47, 4…\n$ review_scores_communication                  &lt;dbl&gt; 4.78, 4.43, 4.64, 4.42, 4…\n$ review_scores_location                       &lt;dbl&gt; 4.26, 4.17, 4.50, 4.53, 4…\n$ review_scores_value                          &lt;dbl&gt; 4.32, 4.04, 4.36, 4.63, 4…\n$ license                                      &lt;chr&gt; NA, NA, NA, \"S0399\", \"S03…\n$ instant_bookable                             &lt;lgl&gt; FALSE, FALSE, FALSE, TRUE…\n$ calculated_host_listings_count               &lt;dbl&gt; 6, 6, 6, 49, 49, 6, 7, 49…\n$ calculated_host_listings_count_entire_homes  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 1, 0, 0…\n$ calculated_host_listings_count_private_rooms &lt;dbl&gt; 6, 6, 6, 49, 49, 6, 6, 49…\n$ calculated_host_listings_count_shared_rooms  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ reviews_per_month                            &lt;dbl&gt; 0.12, 0.15, 0.29, 0.15, 0…\n$ geometry                                     &lt;POINT [m]&gt; POINT (41972.5 3639…\n\n\n\n\n9 Geoprocessing with sf package\nGeoprocessing involves creating new data by transforming and analyzing existing spatial data. I performed several geoprocessing tasks as follows:\n\nCreating a buffer around cycling paths:\n\nI created a buffer of 5 meters around each cycling path using the st_buffer() function. This buffer helps analyze areas within a certain distance from the paths.\n\nbuffer_cycling &lt;- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 30)\n\n\nCalculating the area of each buffer:\n\nThe st_area() function was used to calculate the area of each buffer polygon, which I stored in a new column named AREA.\n\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\n\n\nSumming the total buffer area:\n\nI calculated the total area of all buffer polygons to get an overall sense of the space covered by the cycling path buffers.\n\nsum(buffer_cycling$AREA)\n\n2218855 [m^2]\n\n\n\nCounting pre-schools within each subzone:\n\nI used st_intersects() to count the number of pre-schools within each subzone in mpsz3414, and stored the result in a new column PreSch Count.\n\nmpsz3414$`PreSch Count`&lt;- lengths(st_intersects(mpsz3414, preschool3414))\n\n\nSummarizing the pre-school count data:\n\nThe summary() function provided a quick statistical summary of the pre-school counts across different subzones.\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\n\n\nIdentifying the subzone with the highest pre-school count:\n\nI used top_n() to identify the subzone with the highest number of pre-schools.\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n\n\n\nCalculating the area of each subzone:\n\nI calculated the area of each subzone in mpsz3414 and stored it in a new column Area.\n\nmpsz3414$Area &lt;- mpsz3414 %&gt;%\n  st_area()\n\n\nCalculating pre-school density:\n\nI calculated the density of pre-schools (number of pre-schools per square kilometer) in each subzone, and stored it in a new column PreSch Density.\n\nmpsz3414 &lt;- mpsz3414 %&gt;%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n\n\n\n10 Exploratory Data Analysis (EDA)\nExploratory Data Analysis (EDA) involves summarizing and visualizing data to discover patterns, trends, and relationships. I performed EDA on the pre-school density data as follows:\n\nCreating a histogram of pre-school density:\n\nI plotted a histogram to visualize the distribution of pre-school densities across subzones.\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\n\n\n\n\n\nVisualizing pre-school density with ggplot2:\n\nUsing ggplot2, I created a more detailed histogram with custom colors and labels. The plot helps identify subzones with extremely high or low pre-school densities.\n\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\n\n\n\n\n\nCreating a scatter plot of pre-school count vs. density:\n\nI created a scatter plot to explore the relationship between pre-school density and the actual number of pre-schools in each subzone.\n\nggplot(data=mpsz3414, \n       aes(y = `PreSch Count`, \n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\", \n             fill=\"light blue\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Pre-school count\")\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`)."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/MPSZ-2019/MPSZ-2019.html",
    "href": "In-class_Ex/In-class_Ex01/MPSZ-2019/MPSZ-2019.html",
    "title": "IS415 - Xu Haiyang",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/data/MPSZ-2019/MPSZ-2019.html",
    "href": "In-class_Ex/In-class_Ex01/data/MPSZ-2019/MPSZ-2019.html",
    "title": "IS415 - Xu Haiyang",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/data/MPSZ-2019.html",
    "href": "In-class_Ex/In-class_Ex01/data/MPSZ-2019.html",
    "title": "IS415 - Xu Haiyang",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands on Exercise 2",
    "section": "",
    "text": "1. Overview\nThematic mapping involves using map symbols to visualize specific properties of geographic features that are not naturally visible, such as population, temperature, crime rate, and property prices. These maps allow us to represent complex data in a spatial context, making it easier to identify patterns and trends.\nGeovisualisation, on the other hand, goes beyond just mapping; it provides graphical representations that make a place, phenomenon, or process visible. This visualization enables us to leverage the powerful spatial cognition abilities of our eye–brain vision system to process and understand complex spatial information effectively.\nIn this chapter, I will demonstrate how to create functional and accurate choropleth maps using the R package tmap.\n\n\n2. Getting Started\nBefore we begin, I loaded the necessary R packages to handle geospatial data, mapping, and data manipulation:\n\npacman::p_load(sf, tmap, tidyverse)\n\n\n\n3. Importing Data into R\nTo create the choropleth map, I used two datasets:\n\nThe Data\n\nMaster Plan 2014 Subzone Boundary (Web):\n\nFormat: ESRI Shapefile\nDescription: This geospatial dataset provides the geographical boundaries of Singapore at the planning subzone level, based on the Urban Redevelopment Authority (URA) Master Plan 2014.\nSource: data.gov.sg\n\nI imported this data using the st_read() function, which reads the shapefile into R as a simple feature (sf) object:\n\n\nmpsz &lt;- st_read(dsn = \"data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\EasonXu-HY99\\IS415\\Hands-on_Ex\\Hands-on_Ex02\\data\\geospatial\\MasterPlan2014SubzoneBoundaryWebSHP' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nSingapore Residents by Planning Area/Subzone, Age Group, Sex, and Type of Dwelling, June 2011-2020:\n\nFormat: CSV file\nDescription: This aspatial dataset contains demographic data, including the number of residents by planning area and subzone. Although it lacks spatial coordinates, the PA (Planning Area) and SZ (Subzone) fields serve as unique identifiers, which can be linked to the subzones in the shapefile for geocoding.\nSource: Department of Statistics, Singapore\n\n\nBy using these datasets together, I will create a choropleth map that visualizes demographic information across Singapore’s planning subzones.\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\nThis command shows the contents of the mpsz data frame, which contains the spatial boundaries of Singapore’s planning subzones. Viewing the data helps in understanding its structure before merging it with other datasets.\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesexfa2011to2020.csv\")\n\nRows: 738492 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, FA\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nHere, I imported the population data stored in a CSV file. This dataset contains demographic information about Singapore residents by planning area, subzone, age group, and sex from 2011 to 2020.\nNext, I am required to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\nYOUNG: age group 0 to 4 until age group 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%  \n  group_by(PA, SZ, AG) %&gt;%  \n  summarise(POP = sum(Pop)) %&gt;%  \n  ungroup() %&gt;%  \n  pivot_wider(names_from = AG, values_from = POP) %&gt;% \n  mutate(YOUNG = rowSums(.[3:6])) %&gt;%  \n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:13]) + rowSums(.[15])) %&gt;%  \n  mutate(AGED = rowSums(.[16:21])) %&gt;% \n  mutate(TOTAL = rowSums(.[3:21])) %&gt;%  \n  mutate(DEPENDENCY = (YOUNG + AGED) / `ECONOMY ACTIVE`) %&gt;% \n  select(PA, SZ, YOUNG, `ECONOMY ACTIVE`, AGED, TOTAL, DEPENDENCY)  \n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\n\nfilter(Time == 2020): Selects the data for the year 2020.\ngroup_by(PA, SZ, AG): Groups the data by Planning Area (PA), Subzone (SZ), and Age Group (AG).\nsummarise(POP = sum(Pop)): Summarizes the population counts by summing them within each group.\nungroup(): ungroup() is to ensure that any further mutations called on the code after it would not use the grouping for aggregate statistics\npivot_wider(names_from = AG, values_from = POP): Reshapes the data so that each Age Group (AG) becomes a column.\nselect(PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY): Selects the relevant columns for the final dataset.\n\nIn this step, I filtered the population data to only include the year 2020. I then grouped the data by planning area, subzone, and age group to summarize the population for each group. The data was reshaped so that each age group became a separate column. New columns were created to represent the young, economically active, and aged populations, as well as the total population and dependency ratio.\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate_at(.vars = vars(PA, SZ), .funs = list(toupper)) %&gt;%  \n  filter(`ECONOMY ACTIVE` &gt; 0)\n\n\nmutate_at(.vars = vars(PA, SZ), .funs = list(toupper)): Converts the values in the PA (Planning Area) and SZ (Subzone) columns to uppercase.\nfilter(ECONOMY ACTIVE &gt; 0): Excludes rows where the ECONOMY ACTIVE population is zero, keeping only subzones with an economically active population.\n\nNext, I converted the planning area and subzone names to uppercase to ensure consistency when merging with other datasets. I also filtered out any rows where the economically active population was zero, as these would not be useful for analysis.\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020, by = c(\"SUBZONE_N\" = \"SZ\"))\n\nHere, I merged the geospatial data (mpsz) with the filtered population data (popdata2020) using a left join. This operation linked the population data to the corresponding subzone boundaries based on the subzone names.\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")\n\nFinally, I saved the merged dataset as an RDS file, which can be easily loaded in the future without needing to repeat the data import and transformation steps.\n\n\n\n4. Choropleth Mapping Geospatial Data Using tmap\nIn this section, I created choropleth maps to visualize the distribution of the dependency ratio across Singapore’s planning subzones. I used the tmap package in R, which is highly versatile for creating thematic maps.\n\n4.1 Plotting a Choropleth Map Quickly Using qtm()\nTo quickly plot a choropleth map, I used the qtm() function, which is a shortcut for generating simple thematic maps. Here’s how I visualized the dependency ratio:\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020, fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\"): This sets the tmap mode to static plotting (as opposed to interactive maps).\nqtm(): This function quickly maps the DEPENDENCY variable using the planning subzone boundaries.\n\n\n\n4.2 Creating a Choropleth Map Using tmap’s Elements\nTo have more control over the appearance and elements of the map, I used the full capabilities of the tmap package by layering various map elements:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"Blues\", title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\", main.title.position = \"center\", main.title.size = 1.2, legend.height = 0.45, legend.width = 0.35, frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\n\ntm_shape(): Defines the shape or spatial object to be used in the map.\ntm_fill(): Fills the subzones based on the DEPENDENCY variable. The style = \"quantile\" argument divides the data into quantiles, and the palette = \"Blues\" argument applies a blue color scheme.\ntm_layout(): Customizes the layout, including the title, legend dimensions, and the inclusion of a map frame.\ntm_borders(): Adds borders to the subzones with partial transparency.\ntm_compass(): Adds a compass rose to the map.\ntm_scale_bar(): Adds a scale bar.\ntm_grid(): Adds a grid to the map with slight transparency.\ntm_credits(): Adds a credit note with the data sources.\n\nHere are some additional visualizations I generated using tmap:\n\ntm_shape(mpsz_pop2020) + tm_polygons()\n\n\n\n\n\n\n\n\nThis code displays the boundaries of the planning subzones with default polygon styling.\n\ntm_shape(mpsz_pop2020)+ tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nHere, I highlighted the dependency ratio within each subzone using the polygon shapes.\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nThis function fills the subzones based on the dependency ratio without drawing the borders.\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\") + tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\n\n\n\n\nFinally, I combined the filled polygons with borders to enhance the map’s readability. I adjusted the border width and transparency for a clearer delineation of subzones.\n\n\n4.3 Data Classification Methods of tmap\nI also explored different data classification methods provided by tmap to see how they impact the visualization:\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 5, style = \"quantile\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\nstyle = \"quantile\": Classifies the data into quantiles, ensuring each class has approximately the same number of subzones.\n\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 5, style = \"equal\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\nstyle = \"equal\": Divides the data into equal intervals, which can be useful for evenly distributed data.\n\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.5696  0.6154  0.6917  0.6950 19.0000      92 \n\n\nI used the summary() function to generate summary statistics for the DEPENDENCY variable. This helps in understanding the distribution of the data before deciding on classification methods.\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) + tm_borders(alpha = 0.5)\n\nWarning: Values have found that are higher than the highest break\n\n\n\n\n\n\n\n\n\n\nbreaks: Here, I manually specified breaks for the classification, allowing for a custom, meaningful division of the data.\n\n\n\n4.4 Color Scheme\nIn this section, I experimented with different color schemes to visualize the dependency ratio in the planning subzones.\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 6, style = \"quantile\", palette = \"Blues\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\nBlues Palette: Here, I used a six-class quantile classification with a blue color scheme.\n\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"-Greens\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\nReverse Greens Palette: In this example, I used a reversed green palette to see how it affects the visualization of the same data.\n\n\n\n4.5 Map Layouts\nNext, I explored different map layouts to enhance the presentation of the dependency ratio data:\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\", style = \"jenks\", palette = \"Blues\", legend.hist = TRUE, legend.is.portrait = TRUE, legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\", main.title.position = \"center\", main.title.size = 1, legend.height = 0.45, legend.width = 0.35, legend.outside = FALSE, legend.position = c(\"right\", \"bottom\"), frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\nJenks Classification: This layout uses Jenks natural breaks classification and includes a histogram in the legend. The layout was customized with a centered title and a compact legend.\n\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"-Greens\") + tm_borders(alpha = 0.5) + tmap_style(\"classic\")\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n\n\n\n\n\n\n\n\n\n\nClassic Style: Here, the classic tmap style, which provides a traditional map appearance.\n\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"Blues\", title = \"No. of persons\") + tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\", main.title.position = \"center\", main.title.size = 1.2, legend.height = 0.45, legend.width = 0.35, frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\n\nEnhanced Layout: This layout includes a compass, scale bar, grid lines, and source credits for a more detailed map presentation.\n\n\ntmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\nWhite Style: Switch to the white style for a clean, modern look.\n\n\n\n4.6 Drawing Small Multiple Choropleth Maps\nI also created small multiple maps to compare different variables side by side:\n\ntm_shape(mpsz_pop2020) + tm_fill(c(\"YOUNG\", \"AGED\"), style = \"equal\", palette = \"Blues\") + tm_layout(legend.position = c(\"right\",\"bottom\")) + tm_borders(alpha = 0.5) + tmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n\n\n\n\n\nSmall Multiples with Equal Intervals: This code compares the “YOUNG” and “AGED” population distributions using equal intervals.\n\n\ntm_shape(mpsz_pop2020) + tm_polygons(c(\"DEPENDENCY\",\"AGED\"), style = c(\"equal\", \"quantile\"), palette = list(\"Blues\",\"Greens\")) + tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n\n\n\nCombined Classification: Here, I mapped the dependency ratio and the aged population using different classification methods and color palettes.\n\n\ntm_shape(mpsz_pop2020) + \n  tm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"Blues\", thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", free.coords=TRUE, drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE, title.position = c(\"center\", \"center\"), title.size = 20) +\n  tm_borders(alpha = 0.5)\n\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n\n\n\n\n\n\n\n\n\n\nFaceted Map: This map shows the dependency ratio for different regions in separate facets, allowing for easy regional comparison.\n\n\nyoungmap &lt;- tm_shape(mpsz_pop2020) + tm_polygons(\"YOUNG\", style = \"quantile\", palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020) + tm_polygons(\"AGED\", style = \"quantile\", palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\nArranged Maps: Here, I arranged maps for the young and aged populations side by side for direct comparison.\n\n\n\n4.7 Mapping Spatial Objects Meeting a Selection Criterion\nLastly, I focused on mapping only the Central Region:\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ]) +\n  tm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"Blues\", legend.hist = TRUE, legend.is.portrait = TRUE, legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE, legend.height = 0.45, legend.width = 5.0, legend.position = c(\"right\", \"bottom\"), frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend\n\n\n\n\n\n\n\n\n\n\nCentral Region Map: This map highlights the Central Region, using a quantile classification and a larger legend for clarity."
  }
]