{
  "hash": "562f613b887f21a5dc068bf30ce89710",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In Class Exercise 9\"\nauthor: \"Xu Haiyang\"\ndate: \"30 September, 2024\" \ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n---\ntitle: \"In Class Exercise 9\"\nauthor: \"Xu Haiyang\"\ndate: \"30 September, 2024\" \ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n\n\n### **Geographic Segmentation with Spatially Constrained Cluster Analysis**\n\nThis section outlines the application of various clustering methods for segmenting geographic regions in Shan State, Myanmar, based on ICT indicators. I utilized packages such as `spdep`, `sf`, `ClustGeo`, and more to perform the analysis and visualize the results.\n\n#### **Loading Required Packages and Data**\n\nFirst, I loaded the necessary R packages and read the spatial and aspatial datasets that contain the ICT indicators and spatial features.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(spdep, sp, tmap, sf, ClustGeo, cluster, factoextra, NbClust, tidyverse, GGally)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nshan_sf <- read_rds(\"data/rds/shan_sf.rds\") \nshan_ict <- read_rds(\"data/rds/shan_ict.rds\") \nshan_sf_cluster <- read_rds(\"data/rds/shan_sf_cluster.rds\")\n```\n:::\n\n\n\n#### **Performing Hierarchical Clustering**\n\nI calculated the Euclidean distance matrix and applied hierarchical clustering using the Ward method. Six clusters were then identified using `cutree()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nproxmat <- dist(shan_ict, method = 'euclidean') \nhclust_ward <- hclust(proxmat, method = 'ward.D') \ngroups <- as.factor(cutree(hclust_ward, k=6))\n```\n:::\n\n\n\nI added the clustering results to the spatial dataset and renamed the columns accordingly.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshan_sf_cluster <- cbind(shan_sf, as.matrix(groups)) %>% \n  rename(`CLUSTER` = `as.matrix.groups.`) %>% \n  select(-c(3:4, 7:9)) %>% \n  rename(TS = TS.x)\n```\n:::\n\n\n\nI plotted the dendrogram to visualize the hierarchical clustering results and highlighted the six clusters with different colored rectangles.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(hclust_ward, cex = 0.6) \nrect.hclust(hclust_ward, k = 6, border = 2:5)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex09_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n#### **Visualizing Clusters on a Map**\n\nUsing `qtm()`, I visualized the six clusters on a choropleth map.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nqtm(shan_sf_cluster, \"CLUSTER\")\n```\n\n::: {.cell-output-display}\n![](In-class_Ex09_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n#### **Computing Spatial Proximity and Neighborhood Information**\n\nI computed the pairwise spatial distances between the townships and created a neighborhood list using `poly2nb()`. The neighborhood relationships were summarized, and the results were plotted along with the township boundaries.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndist <- st_distance(shan_sf, shan_sf) \ndistmat <- as.dist(dist)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nshan.nb <- poly2nb(shan_sf) \nsummary(shan.nb)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n```\n\n\n:::\n:::\n\n\n\nno need to change shan_sf to shan_sp\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(shan_sf), border = grey(.5)) \npts <- st_coordinates(st_centroid(shan_sf)) \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: st_centroid assumes attributes are constant over geometries\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(shan.nb, pts, col=\"blue\", add=TRUE)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex09_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n#### **Computing Costs and Constructing Minimum Spanning Tree (MST)**\n\nI computed the edge costs based on the ICT indicators and constructed the MST using the neighborhood list.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlcosts <- nbcosts(shan.nb, shan_ict)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nshan.w <- nb2listw(shan.nb, lcosts, style = \"B\") \nsummary(shan.w)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\nWeights style: B \nWeights constants summary:\n   n   nn       S0       S1        S2\nB 55 3025 76267.65 58260785 522016004\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nshan.mst <- mstree(shan.w)\n```\n:::\n\n\n\nI visualized the MST along with the township boundaries to understand the spatial relationships.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(shan_sf), border=grey(.5)) \nplot.mst(shan.mst, pts, col=\"blue\", cex.lab=0.7, cex.circles=0.005, add=TRUE)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex09_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n#### **Clustering Using the SKATER Method**\n\nI applied the **SKATER** method for spatially constrained clustering and visualized the resulting clusters on the map.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nskater.clust6 <- skater(edges = shan.mst[,1:2], data = shan_ict, method = \"euclidean\", ncuts = 5)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(shan_sf), border=gray(.5)) \nplot(skater.clust6, pts, cex.lab=.7, groups.colors=c(\"red\",\"green\",\"blue\",\"brown\",\"pink\"), cex.circles=0.005, add=TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](In-class_Ex09_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\nI combined the SKATER clustering results with the spatial dataset and created a new column for the clusters.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngroups_mat <- as.matrix((skater.clust6$groups)) \nshan_sf_spatialcluster <- cbind(shan_sf_cluster, as.factor(groups_mat)) %>% \n  rename(`skater_CLUSTER` = `as.factor.groups_mat.`) \nqtm(shan_sf_spatialcluster, \"skater_CLUSTER\")\n```\n\n::: {.cell-output-display}\n![](In-class_Ex09_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n#### **Determining the Mixing Parameter (Alpha) for ClustGeo**\n\nI used the `choicealpha()` function to find an optimal value of alpha that balances spatial proximity and attribute-based clustering quality. I then performed spatially constrained clustering using `hclustgeo()` with the chosen alpha value (0.2 in this case).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncr <- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K=6, graph = TRUE)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex09_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](In-class_Ex09_files/figure-html/unnamed-chunk-17-2.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclustG <- hclustgeo(proxmat, distmat, alpha = 0.2) \ngroups <- as.factor(cutree(clustG, k=6)) \nshan_sf_clustGeo <- cbind(shan_sf, as.matrix(groups)) %>% \n  rename(`clustGeo` = `as.matrix.groups.`)\n```\n:::\n\n\n\nI mapped the results to visualize the ClustGeo clusters.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nqtm(shan_sf_clustGeo, \"clustGeo\")\n```\n\n::: {.cell-output-display}\n![](In-class_Ex09_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n#### **Visual Interpretation of Clusters**\n\nI used parallel coordinate plots to analyze how the ICT indicators vary across the ClustGeo clusters.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggparcoord(data = shan_sf_clustGeo, columns = c(17:21), scale = \"globalminmax\", alphaLines = 0.2, boxplot = TRUE, title = \"Multiple Parallel Coordinates Plots of ICT Variables by Cluster\") + facet_grid(~ clustGeo) + theme(axis.text.x = element_text(angle = 30))\n```\n\n::: {.cell-output-display}\n![](In-class_Ex09_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "In-class_Ex09_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}