{
  "hash": "ade13adf7397bf5cdbeec160f81f6036",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take Home Exercise 3\"\nauthor: \"Xu Haiyang\"\ndate: \"14 October, 2024\" \ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n\n\n# **Prototyping Modules for Geospatial Analytics Shiny Application**\n\n## **Overview**\n\nPrototyping serves as a pivotal step in application development, bridging theoretical design with practical user interaction. A well-constructed prototype validates design decisions by providing a tangible platform to test user experience (UX) elements with stakeholders. This approach helps refine the application's UX before further resources are invested, enhancing both efficiency and effectiveness.\n\n## **Prototyping for Shiny Application**\n\nIn the context of developing a **Shiny application** using **R**, prototyping plays a crucial role in defining technical requirements, testing functionality, and refining the user interface.\n\n1.  **Evaluating R Packages**: The initial step in Shiny prototyping involves identifying and validating R packages from CRAN that support the app’s functionality. This ensures the application’s foundation is reliable and compatible with the required analyses and visualizations.\n\n2.  **Testing R Code**: Prototyping also involves running and validating specific R code snippets to confirm they produce expected outputs. This testing process helps ensure a smooth experience for end-users by troubleshooting issues early.\n\n3.  **Setting Parameters and Outputs**: Deciding on the parameters and outputs to expose in the application is a key step. These will guide user interaction and determine the dynamic nature of the app.\n\n4.  **Designing the UI with Shiny Components**: The final prototyping phase involves selecting Shiny UI components that allow users to interact with the chosen parameters intuitively.\n\nThis structured approach facilitates a seamless transition from conceptual design to a fully functional application, prioritizing both technical robustness and user experience.\n\n# **Understanding Basics of Shiny**\n\n**Shiny** is an open-source R package designed to simplify the creation of interactive web applications without requiring knowledge of web design languages like HTML, CSS, or JavaScript.\n\n### **Core Components of Shiny**\n\nA Shiny application typically consists of an **`app.R`** file that includes two main sections:\n\n1.  **User Interface (UI)** - Defines the front-end layout and elements that users interact with.\n\n2.  **Server** - Contains the back-end logic, handling input-processing and output-rendering functions.\n\nThis modular structure keeps the UI and server functions distinct, ensuring a clean, organized codebase.\n\n### **UI Layout in Shiny**\n\nThe Shiny UI includes components like:\n\n1.  **Header Panel** (`headerPanel`): Displays the app’s title or brief descriptions.\n\n2.  **Sidebar Panel** (`sidebarPanel`): A vertical panel for input controls, offering users a way to interact with the app.\n\n3.  **Main Panel** (`mainPanel`): The primary area for output displays (e.g., maps, plots, tables).\n\n### **Flexible Layout with FluidRow and Column**\n\nShiny employs a grid layout system through `fluidRow()` and `column()`, based on a 12-column structure, allowing flexible UI design. Each `fluidRow` can hold multiple `column` elements, enabling a variety of layouts by adjusting column widths.\n\n### **Navbar Pages for Organized Layouts**\n\nTo structure complex applications, **`navbarPage()`** is available, enabling multiple sub-components within the app, each with distinct sidebar, tabset, or layout configurations.\n\n### **User Inputs and Controls in Sidebar Panel**\n\nShiny provides various functions for defining user inputs, such as:\n\n-   **`sliderInput()`**: Creates a slider for range-based input.\n\n-   **`selectInput()`**: Generates a dropdown list.\n\n-   **`textInput()`**: Adds a text box for user input.\n\n-   **`numericInput()`**: Allows users to enter numeric values.\n\n-   **`checkboxInput()` & `checkboxGroupInput()`**: Useful for binary or multiple-choice selections.\n\nAfter configuring inputs, **`submitButton()`** compiles and sends inputs to the server, updating outputs accordingly.\n\n### **Outputs in Main Panel**\n\nOutputs are defined in the main panel with placeholders like:\n\n-   **`textOutput()`**, **`tableOutput()`**, and **`plotOutput()`**.\n\n-   Rendered on the UI via corresponding functions (`renderText`, `renderTable`, `renderPlot`), these components can be customized using `fluidRow()` and `column()`.\n\n### **Organizing Outputs with Tabsets**\n\nTo segment content in the main panel, **`tabsetPanel()`** creates a series of tabs, helping organize multiple outputs within the application.\n\n### **Server Component**\n\nThe server function processes inputs from the UI and defines outputs based on input values. It typically includes parameters for:\n\n-   **Input**: Accesses user-specified UI inputs.\n\n-   **Output**: Dictates output displays on the UI.\n\n-   **Session** (optional): Manages session-specific settings.\n\nThe **UI and server interaction** is a two-way communication loop, where inputs from the UI are processed by the server, and the resulting outputs are displayed back on the UI.\n\n# **Analysing R-Packages**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(spdep, tmap, sf, ClustGeo, \n               ggpubr, cluster, factoextra, NbClust,\n               heatmaply, corrplot, psych, tidyverse, GGally)\n```\n:::\n\n\n\nThis line uses `pacman::p_load` to load all necessary packages in one command, ensuring that all packages required for data manipulation, visualization, clustering, and spatial analysis are ready for use.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvietnam_geo <- st_read(dsn = \"data/geospatial/DiaphanTinh\", layer = \"Dia_phan_Tinh\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Dia_phan_Tinh' from data source \n  `C:\\EasonXu-HY99\\IS415\\Take-Home_Ex\\Take-Home_Ex03\\data\\geospatial\\DiaphanTinh' \n  using driver `ESRI Shapefile'\nSimple feature collection with 63 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 102.1421 ymin: 6.953306 xmax: 116.9473 ymax: 23.3939\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(vietnam_geo, \"data/rds/vietnam_geo.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(vietnam_geo)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 63\nColumns: 3\n$ Code     <chr> \"AD01\", \"AD01\", \"AD01\", \"AD01\", \"AD01\", \"AD01\", \"AD01\", \"AD01…\n$ Name     <chr> \"An Giang\", \"Ba Ria - Vung Tau\", \"Bac Giang\", \"Bac Kan\", \"Bac…\n$ geometry <MULTIPOLYGON [°]> MULTIPOLYGON (((105.1152 10..., MULTIPOLYGON (((…\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfarms <- read_csv(\"data/aspatial/farms.csv\") \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 69 Columns: 61\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (50): Cities, provincies, 2012 Total, 2012 Cultivation farm, 2012 Livest...\ndbl (11): 2014 Total, 2015 Total, 2015 Livestock farm, 2016 Total, 2016 Live...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(farms)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Cities, provincies  2012 Total        2012 Cultivation farm\n Length:69          Length:69          Length:69            \n Class :character   Class :character   Class :character     \n Mode  :character   Mode  :character   Mode  :character     \n                                                            \n                                                            \n                                                            \n 2012 Livestock farm 2012 Fishing farm  2012 Others(*)      2013 Total       \n Length:69           Length:69          Length:69          Length:69         \n Class :character    Class :character   Class :character   Class :character  \n Mode  :character    Mode  :character   Mode  :character   Mode  :character  \n                                                                             \n                                                                             \n                                                                             \n 2013 Cultivation farm 2013 Livestock farm 2013 Fishing farm \n Length:69             Length:69           Length:69         \n Class :character      Class :character    Class :character  \n Mode  :character      Mode  :character    Mode  :character  \n                                                             \n                                                             \n                                                             \n 2013 Others(*)       2014 Total     2014 Cultivation farm 2014 Livestock farm\n Length:69          Min.   :   1.0   Length:69             Length:69          \n Class :character   1st Qu.:  61.0   Class :character      Class :character   \n Mode  :character   Median : 361.0   Mode  :character      Mode  :character   \n                    Mean   : 785.9                                            \n                    3rd Qu.: 697.0                                            \n                    Max.   :7599.0                                            \n 2014 Fishing farm  2014 Others(*)       2015 Total     2015 Cultivation farm\n Length:69          Length:69          Min.   :   1.0   Length:69            \n Class :character   Class :character   1st Qu.:  71.0   Class :character     \n Mode  :character   Mode  :character   Median : 370.0   Mode  :character     \n                                       Mean   : 851.9                        \n                                       3rd Qu.: 710.0                        \n                                       Max.   :7347.0                        \n 2015 Livestock farm 2015 Fishing farm  2015 Others(*)       2016 Total    \n Min.   :   1.0      Length:69          Length:69          Min.   :   1.0  \n 1st Qu.:  32.0      Class :character   Class :character   1st Qu.: 107.0  \n Median : 105.0      Mode  :character   Mode  :character   Median : 453.0  \n Mean   : 436.8                                            Mean   : 970.7  \n 3rd Qu.: 501.0                                            3rd Qu.: 927.0  \n Max.   :5998.0                                            Max.   :9946.0  \n 2016 Cultivation farm 2016 Livestock farm 2016 Fishing farm \n Length:69             Min.   :   1.0      Length:69         \n Class :character      1st Qu.:  43.0      Class :character  \n Mode  :character      Median : 124.0      Mode  :character  \n                       Mean   : 604.9                        \n                       3rd Qu.: 593.0                        \n                       Max.   :8726.0                        \n 2016 Others(*)       2017 Total      2017 Cultivation farm 2017 Livestock farm\n Length:69          Min.   :    1.0   Length:69             Min.   :   1.0     \n Class :character   1st Qu.:  114.0   Class :character      1st Qu.:  46.0     \n Mode  :character   Median :  466.0   Mode  :character      Median : 130.0     \n                    Mean   :  986.9                         Mean   : 613.3     \n                    3rd Qu.:  960.0                         3rd Qu.: 618.0     \n                    Max.   :10120.0                         Max.   :8841.0     \n 2017 Fishing farm  2017 Others(*)       2018 Total     2018 Cultivation farm\n Length:69          Length:69          Min.   :   1.0   Length:69            \n Class :character   Class :character   1st Qu.: 113.0   Class :character     \n Mode  :character   Mode  :character   Median : 447.0   Mode  :character     \n                                       Mean   : 917.9                        \n                                       3rd Qu.: 846.0                        \n                                       Max.   :9192.0                        \n 2018 Livestock farm 2018 Fishing farm  2018 Others(*)       2019 Total    \n Min.   :   1.0      Length:69          Length:69          Min.   :   2.0  \n 1st Qu.:  43.0      Class :character   Class :character   1st Qu.: 114.0  \n Median : 150.0      Mode  :character   Mode  :character   Median : 447.0  \n Mean   : 569.2                                            Mean   : 936.6  \n 3rd Qu.: 580.0                                            3rd Qu.: 861.0  \n Max.   :7882.0                                            Max.   :9593.0  \n 2019 Cultivation farm 2019 Livestock farm 2019 Fishing farm \n Length:69             Min.   :   1.0      Length:69         \n Class :character      1st Qu.:  45.0      Class :character  \n Mode  :character      Median : 156.0      Mode  :character  \n                       Mean   : 588.7                        \n                       3rd Qu.: 580.0                        \n                       Max.   :8180.0                        \n 2019 Others(*)      2020 Total        2020 Cultivation farm\n Length:69          Length:69          Length:69            \n Class :character   Class :character   Class :character     \n Mode  :character   Mode  :character   Mode  :character     \n                                                            \n                                                            \n                                                            \n 2020 Livestock farm 2020 Fishing farm  2020 Others(*)      2021 Total       \n Length:69           Length:69          Length:69          Length:69         \n Class :character    Class :character   Class :character   Class :character  \n Mode  :character    Mode  :character   Mode  :character   Mode  :character  \n                                                                             \n                                                                             \n                                                                             \n 2021 Cultivation farm 2021 Livestock farm 2021 Fishing farm \n Length:69             Length:69           Length:69         \n Class :character      Class :character    Class :character  \n Mode  :character      Mode  :character    Mode  :character  \n                                                             \n                                                             \n                                                             \n 2021 Others(*)      2022 Total        2022 Cultivation farm\n Length:69          Length:69          Length:69            \n Class :character   Class :character   Class :character     \n Mode  :character   Mode  :character   Mode  :character     \n                                                            \n                                                            \n                                                            \n 2022 Livestock farm 2022 Fishing farm  2022 Others(*)      2023 Total       \n Length:69           Length:69          Length:69          Length:69         \n Class :character    Class :character   Class :character   Class :character  \n Mode  :character    Mode  :character   Mode  :character   Mode  :character  \n                                                                             \n                                                                             \n                                                                             \n 2023 Cultivation farm 2023 Livestock farm 2023 Fishing farm \n Length:69             Length:69           Length:69         \n Class :character      Class :character    Class :character  \n Mode  :character      Mode  :character    Mode  :character  \n                                                             \n                                                             \n                                                             \n 2023 Others(*)    \n Length:69         \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nenterprise <- read_csv(\"data/aspatial/enterprise.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 69 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): Cities, provincies\ndbl (8): 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfarms <- farms %>%\n  mutate(`Cities, provincies` = str_trim(`Cities, provincies`)) %>%\n  filter(!`Cities, provincies` %in% c(\n    \"Red River Delta\", \"Northern midlands and mountain areas\", \n    \"Northern Central area and Central coastal area\", \"Central Highlands\", \n    \"South East\", \"Mekong River Delta\"\n  )) %>%\n  mutate(`Cities, provincies` = case_when(\n    `Cities, provincies` == \"Ho Chi Minh city\" ~ \"TP. Ho Chi Minh\",\n    `Cities, provincies` == \"Thai  Nguyen\" ~ \"Thai Nguyen\",\n    `Cities, provincies` == \"Thua Thien-Hue\" ~ \"Thua Thien - Hue\",\n    `Cities, provincies` == \"Quang  Nam\" ~ \"Quang Nam\",\n    `Cities, provincies` == \"Quang  Ngai\" ~ \"Quang Ngai\",\n    `Cities, provincies` == \"Khanh  Hoa\" ~ \"Khanh Hoa\",\n    `Cities, provincies` == \"Ninh  Thuan\" ~ \"Ninh Thuan\",\n    `Cities, provincies` == \"Binh  Duong\" ~ \"Binh Duong\",\n    `Cities, provincies` == \"Kien  Giang\" ~ \"Kien Giang\",\n    TRUE ~ `Cities, provincies`\n  )) %>%\n  mutate(across(-`Cities, provincies`, ~str_replace_all(., \"\\\\.\\\\.\", \"0\"))) %>%\n  mutate(across(-`Cities, provincies`, ~suppressWarnings(as.numeric(.))))\n\nprint(farms)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 63 × 61\n   `Cities, provincies` `2012 Total` `2012 Cultivation farm`\n   <chr>                       <dbl>                   <dbl>\n 1 Ha Noi                       1233                      11\n 2 Vinh Phuc                     508                       0\n 3 Bac Ninh                       74                       0\n 4 Quang Ninh                    141                       4\n 5 Hai Duong                     506                       3\n 6 Hai Phong                     421                       1\n 7 Hung Yen                      353                       4\n 8 Thai Binh                     600                       4\n 9 Ha Nam                        240                       6\n10 Nam Dinh                      366                       2\n# ℹ 53 more rows\n# ℹ 58 more variables: `2012 Livestock farm` <dbl>, `2012 Fishing farm` <dbl>,\n#   `2012 Others(*)` <dbl>, `2013 Total` <dbl>, `2013 Cultivation farm` <dbl>,\n#   `2013 Livestock farm` <dbl>, `2013 Fishing farm` <dbl>,\n#   `2013 Others(*)` <dbl>, `2014 Total` <dbl>, `2014 Cultivation farm` <dbl>,\n#   `2014 Livestock farm` <dbl>, `2014 Fishing farm` <dbl>,\n#   `2014 Others(*)` <dbl>, `2015 Total` <dbl>, …\n```\n\n\n:::\n:::\n\n\n\nThis segment cleans and standardizes province names in `farms`, trimming whitespace and correcting inconsistent naming conventions (e.g., replacing \"Ho Chi Minh city\" with \"TP. Ho Chi Minh\"). It also removes rows representing regions rather than specific provinces. Missing values, represented as `..`, are replaced with `0` to facilitate calculations, and remaining non-province columns are converted to numeric format to avoid errors in numeric operations.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(farms, \"data/rds/farms.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary_stats <- farms %>%\n  select(starts_with(\"2012\"), starts_with(\"2013\"), starts_with(\"2014\"), starts_with(\"2015\"),\n         starts_with(\"2016\"), starts_with(\"2017\"), starts_with(\"2018\"), starts_with(\"2019\"),\n         starts_with(\"2020\"), starts_with(\"2021\"), starts_with(\"2022\"), starts_with(\"2023\")) %>%\n  summary()\n\nprint(\"Summary Statistics:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Summary Statistics:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(summary_stats)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   2012 Total     2012 Cultivation farm 2012 Livestock farm 2012 Fishing farm\n Min.   :   0.0   Min.   :   0.0        Min.   :   0.0      Min.   :   0.00  \n 1st Qu.:  33.0   1st Qu.:   1.0        1st Qu.:   9.0      1st Qu.:   0.00  \n Median : 141.0   Median :   6.0        Median :  38.0      Median :  11.00  \n Mean   : 359.6   Mean   : 140.7        Mean   : 129.1      Mean   :  74.92  \n 3rd Qu.: 507.0   3rd Qu.: 116.5        3rd Qu.: 168.5      3rd Qu.:  31.50  \n Max.   :3589.0   Max.   :1280.0        Max.   :1172.0      Max.   :2959.00  \n 2012 Others(*)     2013 Total     2013 Cultivation farm 2013 Livestock farm\n Min.   :  0.00   Min.   :   0.0   Min.   :   0.0        Min.   :   0.0     \n 1st Qu.:  0.00   1st Qu.:  38.0   1st Qu.:   0.5        1st Qu.:  14.0     \n Median :  2.00   Median : 212.0   Median :   5.0        Median :  45.0     \n Mean   : 14.94   Mean   : 377.4   Mean   : 138.8        Mean   : 146.1     \n 3rd Qu.:  8.00   3rd Qu.: 546.0   3rd Qu.: 113.5        3rd Qu.: 194.0     \n Max.   :199.00   Max.   :3536.0   Max.   :1197.0        Max.   :1329.0     \n 2013 Fishing farm 2013 Others(*)     2014 Total     2014 Cultivation farm\n Min.   :   0.00   Min.   :  0.00   Min.   :   1.0   Min.   :  0.0        \n 1st Qu.:   0.00   1st Qu.:  0.00   1st Qu.:  55.5   1st Qu.:  0.5        \n Median :   9.00   Median :  3.00   Median : 286.0   Median :  8.0        \n Mean   :  74.44   Mean   : 17.98   Mean   : 430.4   Mean   :141.8        \n 3rd Qu.:  33.00   3rd Qu.: 15.00   3rd Qu.: 607.0   3rd Qu.:143.5        \n Max.   :2917.00   Max.   :195.00   Max.   :3479.0   Max.   :965.0        \n 2014 Livestock farm 2014 Fishing farm 2014 Others(*)     2015 Total    \n Min.   :   0.0      Min.   :   0.00   Min.   :  0.00   Min.   :   1.0  \n 1st Qu.:  18.0      1st Qu.:   0.00   1st Qu.:  1.00   1st Qu.:  66.5  \n Median :  72.0      Median :   7.00   Median :  3.00   Median : 298.0  \n Mean   : 200.7      Mean   :  73.71   Mean   : 14.17   Mean   : 466.5  \n 3rd Qu.: 270.0      3rd Qu.:  36.50   3rd Qu.: 14.50   3rd Qu.: 666.0  \n Max.   :2099.0      Max.   :2927.00   Max.   :193.00   Max.   :3055.0  \n 2015 Cultivation farm 2015 Livestock farm 2015 Fishing farm 2015 Others(*)  \n Min.   :  0.0         Min.   :   1.0      Min.   :   0.00   Min.   :  0.00  \n 1st Qu.:  0.5         1st Qu.:  25.0      1st Qu.:   0.00   1st Qu.:  1.00  \n Median :  9.0         Median :  80.0      Median :   7.00   Median :  3.00  \n Mean   :145.7         Mean   : 239.2      Mean   :  66.27   Mean   : 15.37  \n 3rd Qu.:137.0         3rd Qu.: 328.0      3rd Qu.:  29.50   3rd Qu.: 14.00  \n Max.   :990.0         Max.   :2578.0      Max.   :2414.00   Max.   :205.00  \n   2016 Total     2016 Cultivation farm 2016 Livestock farm 2016 Fishing farm\n Min.   :   1.0   Min.   :   0.0        Min.   :   1.0      Min.   :  0.0    \n 1st Qu.: 100.0   1st Qu.:   1.0        1st Qu.:  41.0      1st Qu.:  1.0    \n Median : 319.0   Median :  13.0        Median : 115.0      Median :  9.0    \n Mean   : 531.6   Mean   : 146.3        Mean   : 331.3      Mean   : 37.3    \n 3rd Qu.: 866.5   3rd Qu.: 124.0        3rd Qu.: 402.5      3rd Qu.: 32.0    \n Max.   :3811.0   Max.   :1140.0        Max.   :3383.0      Max.   :336.0    \n 2016 Others(*)     2017 Total     2017 Cultivation farm 2017 Livestock farm\n Min.   :  0.00   Min.   :   1.0   Min.   :   0.0        Min.   :   1.0     \n 1st Qu.:  1.00   1st Qu.: 108.0   1st Qu.:   1.0        1st Qu.:  44.5     \n Median :  4.00   Median : 341.0   Median :  11.0        Median : 114.0     \n Mean   : 16.71   Mean   : 540.4   Mean   : 144.4        Mean   : 335.8     \n 3rd Qu.: 10.50   3rd Qu.: 856.0   3rd Qu.: 127.5        3rd Qu.: 457.0     \n Max.   :428.00   Max.   :3830.0   Max.   :1130.0        Max.   :3373.0     \n 2017 Fishing farm 2017 Others(*)     2018 Total     2018 Cultivation farm\n Min.   :  0.0     Min.   :  0.00   Min.   :   1.0   Min.   :   0.0       \n 1st Qu.:  1.0     1st Qu.:  0.00   1st Qu.: 103.0   1st Qu.:   1.0       \n Median : 11.0     Median :  3.00   Median : 354.0   Median :  10.0       \n Mean   : 41.7     Mean   : 18.48   Mean   : 502.7   Mean   : 134.9       \n 3rd Qu.: 32.0     3rd Qu.: 13.00   3rd Qu.: 759.5   3rd Qu.: 126.0       \n Max.   :336.0     Max.   :452.00   Max.   :3261.0   Max.   :1094.0       \n 2018 Livestock farm 2018 Fishing farm 2018 Others(*)     2019 Total    \n Min.   :   1.0      Min.   :  0.00    Min.   :  0.00   Min.   :   2.0  \n 1st Qu.:  42.0      1st Qu.:  1.00    1st Qu.:  0.00   1st Qu.:  98.0  \n Median : 125.0      Median :  8.00    Median :  4.00   Median : 397.0  \n Mean   : 311.7      Mean   : 37.02    Mean   : 19.02   Mean   : 512.9  \n 3rd Qu.: 426.5      3rd Qu.: 32.50    3rd Qu.: 10.50   3rd Qu.: 761.0  \n Max.   :2826.0      Max.   :347.00    Max.   :434.00   Max.   :3390.0  \n 2019 Cultivation farm 2019 Livestock farm 2019 Fishing farm 2019 Others(*)  \n Min.   :   0.0        Min.   :   1.0      Min.   :  0.00    Min.   :  0.00  \n 1st Qu.:   1.0        1st Qu.:  43.5      1st Qu.:  1.00    1st Qu.:  0.00  \n Median :  11.0        Median : 137.0      Median :  8.00    Median :  4.00  \n Mean   : 133.7        Mean   : 322.4      Mean   : 36.95    Mean   : 19.92  \n 3rd Qu.: 128.0        3rd Qu.: 440.5      3rd Qu.: 33.50    3rd Qu.: 10.00  \n Max.   :1098.0        Max.   :2955.0      Max.   :347.00    Max.   :434.00  \n   2020 Total     2020 Cultivation farm 2020 Livestock farm 2020 Fishing farm\n Min.   :   0.0   Min.   :  0.0         Min.   :   0.0      Min.   :  0.00   \n 1st Qu.:  86.5   1st Qu.:  3.0         1st Qu.:  23.5      1st Qu.:  0.00   \n Median : 261.0   Median : 19.0         Median :  91.0      Median :  9.00   \n Mean   : 375.6   Mean   :104.8         Mean   : 218.3      Mean   : 43.02   \n 3rd Qu.: 536.0   3rd Qu.:112.5         3rd Qu.: 228.5      3rd Qu.: 37.50   \n Max.   :2377.0   Max.   :903.0         Max.   :1741.0      Max.   :536.00   \n 2020 Others(*)     2021 Total     2021 Cultivation farm 2021 Livestock farm\n Min.   : 0.000   Min.   :   0.0   Min.   :  0.0         Min.   :   0.0     \n 1st Qu.: 0.000   1st Qu.:  90.0   1st Qu.:  3.0         1st Qu.:  31.0     \n Median : 2.000   Median : 254.0   Median : 20.0         Median : 101.0     \n Mean   : 9.444   Mean   : 377.3   Mean   :103.4         Mean   : 218.2     \n 3rd Qu.:10.000   3rd Qu.: 535.0   3rd Qu.:115.0         3rd Qu.: 237.0     \n Max.   :89.000   Max.   :2160.0   Max.   :897.0         Max.   :1740.0     \n 2021 Fishing farm 2021 Others(*)     2022 Total     2022 Cultivation farm\n Min.   :  0.00    Min.   :  0.00   Min.   :   0.0   Min.   :  0.0        \n 1st Qu.:  0.50    1st Qu.:  0.00   1st Qu.:  93.0   1st Qu.:  3.0        \n Median : 10.00    Median :  2.00   Median : 274.0   Median : 22.0        \n Mean   : 44.65    Mean   : 11.05   Mean   : 382.1   Mean   :100.1        \n 3rd Qu.: 39.50    3rd Qu.:  9.00   3rd Qu.: 542.5   3rd Qu.:115.0        \n Max.   :608.00    Max.   :103.00   Max.   :2032.0   Max.   :892.0        \n 2022 Livestock farm 2022 Fishing farm 2022 Others(*)     2023 Total    \n Min.   :   0.0      Min.   :  0.00    Min.   :  0.00   Min.   :   0.0  \n 1st Qu.:  29.0      1st Qu.:  0.50    1st Qu.:  0.00   1st Qu.:  94.0  \n Median : 104.0      Median :  9.00    Median :  2.00   Median : 284.0  \n Mean   : 223.6      Mean   : 46.67    Mean   : 11.81   Mean   : 395.8  \n 3rd Qu.: 244.5      3rd Qu.: 51.00    3rd Qu.: 10.50   3rd Qu.: 610.0  \n Max.   :1752.0      Max.   :624.00    Max.   :104.00   Max.   :1966.0  \n 2023 Cultivation farm 2023 Livestock farm 2023 Fishing farm 2023 Others(*)  \n Min.   :  0.0         Min.   :   0.0      Min.   :  0.00    Min.   :  0.00  \n 1st Qu.:  2.5         1st Qu.:  28.0      1st Qu.:  0.00    1st Qu.:  0.00  \n Median : 20.0         Median :  97.0      Median :  9.00    Median :  4.00  \n Mean   :113.1         Mean   : 222.8      Mean   : 47.06    Mean   : 12.86  \n 3rd Qu.:110.0         3rd Qu.: 262.5      3rd Qu.: 56.00    3rd Qu.: 10.50  \n Max.   :922.0         Max.   :1751.0      Max.   :677.00    Max.   :114.00  \n```\n\n\n:::\n:::\n\n\n\nThis code calculates and prints summary statistics for columns associated with the years 2012 through 2023. This gives a quick, aggregated view of each year’s data, providing insight into distributions and highlighting potential outliers or trends over time.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfarms <- farms %>%\n  mutate(`2012 Cultivation PR` = `2012 Cultivation farm` / `2012 Total` * 1000,\n         `2012 Livestock PR` = `2012 Livestock farm` / `2012 Total` * 1000,\n         `2012 Fishing PR` = `2012 Fishing farm` / `2012 Total` * 1000,\n         `2012 Others PR` = `2012 Others(*)` / `2012 Total` * 1000) %>%\n  mutate(`2013 Cultivation PR` = `2013 Cultivation farm` / `2013 Total` * 1000,\n         `2013 Livestock PR` = `2013 Livestock farm` / `2013 Total` * 1000,\n         `2013 Fishing PR` = `2013 Fishing farm` / `2013 Total` * 1000,\n         `2013 Others PR` = `2013 Others(*)` / `2013 Total` * 1000) %>%\n  mutate(`2014 Cultivation PR` = `2014 Cultivation farm` / `2014 Total` * 1000,\n         `2014 Livestock PR` = `2014 Livestock farm` / `2014 Total` * 1000,\n         `2014 Fishing PR` = `2014 Fishing farm` / `2014 Total` * 1000,\n         `2014 Others PR` = `2014 Others(*)` / `2014 Total` * 1000) %>%\n  mutate(`2015 Cultivation PR` = `2015 Cultivation farm` / `2015 Total` * 1000,\n         `2015 Livestock PR` = `2015 Livestock farm` / `2015 Total` * 1000,\n         `2015 Fishing PR` = `2015 Fishing farm` / `2015 Total` * 1000,\n         `2015 Others PR` = `2015 Others(*)` / `2015 Total` * 1000) %>%\n  mutate(`2016 Cultivation PR` = `2016 Cultivation farm` / `2016 Total` * 1000,\n         `2016 Livestock PR` = `2016 Livestock farm` / `2016 Total` * 1000,\n         `2016 Fishing PR` = `2016 Fishing farm` / `2016 Total` * 1000,\n         `2016 Others PR` = `2016 Others(*)` / `2016 Total` * 1000) %>%\n  mutate(`2017 Cultivation PR` = `2017 Cultivation farm` / `2017 Total` * 1000,\n         `2017 Livestock PR` = `2017 Livestock farm` / `2017 Total` * 1000,\n         `2017 Fishing PR` = `2017 Fishing farm` / `2017 Total` * 1000,\n         `2017 Others PR` = `2017 Others(*)` / `2017 Total` * 1000) %>%\n  mutate(`2018 Cultivation PR` = `2018 Cultivation farm` / `2018 Total` * 1000,\n         `2018 Livestock PR` = `2018 Livestock farm` / `2018 Total` * 1000,\n         `2018 Fishing PR` = `2018 Fishing farm` / `2018 Total` * 1000,\n         `2018 Others PR` = `2018 Others(*)` / `2018 Total` * 1000) %>%\n  mutate(`2019 Cultivation PR` = `2019 Cultivation farm` / `2019 Total` * 1000,\n         `2019 Livestock PR` = `2019 Livestock farm` / `2019 Total` * 1000,\n         `2019 Fishing PR` = `2019 Fishing farm` / `2019 Total` * 1000,\n         `2019 Others PR` = `2019 Others(*)` / `2019 Total` * 1000) %>%\n  mutate(`2020 Cultivation PR` = `2020 Cultivation farm` / `2020 Total` * 1000,\n         `2020 Livestock PR` = `2020 Livestock farm` / `2020 Total` * 1000,\n         `2020 Fishing PR` = `2020 Fishing farm` / `2020 Total` * 1000,\n         `2020 Others PR` = `2020 Others(*)` / `2020 Total` * 1000) %>%\n  mutate(`2021 Cultivation PR` = `2021 Cultivation farm` / `2021 Total` * 1000,\n         `2021 Livestock PR` = `2021 Livestock farm` / `2021 Total` * 1000,\n         `2021 Fishing PR` = `2021 Fishing farm` / `2021 Total` * 1000,\n         `2021 Others PR` = `2021 Others(*)` / `2021 Total` * 1000) %>%\n  mutate(`2022 Cultivation PR` = `2022 Cultivation farm` / `2022 Total` * 1000,\n         `2022 Livestock PR` = `2022 Livestock farm` / `2022 Total` * 1000,\n         `2022 Fishing PR` = `2022 Fishing farm` / `2022 Total` * 1000,\n         `2022 Others PR` = `2022 Others(*)` / `2022 Total` * 1000) %>%\n  mutate(`2023 Cultivation PR` = `2023 Cultivation farm` / `2023 Total` * 1000,\n         `2023 Livestock PR` = `2023 Livestock farm` / `2023 Total` * 1000,\n         `2023 Fishing PR` = `2023 Fishing farm` / `2023 Total` * 1000,\n         `2023 Others PR` = `2023 Others(*)` / `2023 Total` * 1000)\n```\n:::\n\n\n\nIn this part, proportion ratios for various farm types (Cultivation, Livestock, Fishing, and Others) are calculated for each year, relative to the total farms. Scaling each type per 1,000 total farms allows us to compare regions with different total farm sizes on an equal footing, making it possible to see the proportionate focus of each province’s farming sector over time.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nenterprise <- enterprise %>%\n  mutate(`Cities, provincies` = str_trim(`Cities, provincies`)) %>%\n  filter(!`Cities, provincies` %in% c(\n    \"Red River Delta\", \"Northern midlands and mountain areas\", \n    \"Northern Central area and Central coastal area\", \"Central Highlands\", \n    \"South East\", \"Mekong River Delta\"\n  )) %>%\n  mutate(`Cities, provincies` = case_when(\n    `Cities, provincies` == \"Ho Chi Minh city\" ~ \"TP. Ho Chi Minh\",\n    `Cities, provincies` == \"Thai  Nguyen\" ~ \"Thai Nguyen\",\n    `Cities, provincies` == \"Thua Thien-Hue\" ~ \"Thua Thien - Hue\",\n    `Cities, provincies` == \"Quang  Nam\" ~ \"Quang Nam\",\n    `Cities, provincies` == \"Quang  Ngai\" ~ \"Quang Ngai\",\n    `Cities, provincies` == \"Khanh  Hoa\" ~ \"Khanh Hoa\",\n    `Cities, provincies` == \"Ninh  Thuan\" ~ \"Ninh Thuan\",\n    `Cities, provincies` == \"Binh  Duong\" ~ \"Binh Duong\",\n    `Cities, provincies` == \"Kien  Giang\" ~ \"Kien Giang\",\n    TRUE ~ `Cities, provincies`\n  )) %>%\n  mutate(across(-`Cities, provincies`, ~str_replace_all(., \"\\\\.\\\\.\", \"0\"))) %>%\n  mutate(across(-`Cities, provincies`, ~suppressWarnings(as.numeric(.))))\n\nprint(enterprise)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 63 × 9\n   `Cities, provincies` `2016` `2017` `2018` `2019` `2020` `2021` `2022` `2023`\n   <chr>                 <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n 1 Ha Noi                22663  24545  25231  27711  26135  24026  29720  31512\n 2 Vinh Phuc               857   1250   1145   1194   1249   1214   1377   1523\n 3 Bac Ninh               1660   2046   2041   2405   2390   2368   2700   3473\n 4 Quang Ninh             1254   1593   1654   1605   1456   1455   1643   1689\n 5 Hai Duong              1213   1509   1549   1695   1600   1425   1579   1884\n 6 Hai Phong              2568   2979   3145   2943   2867   3034   3294   3523\n 7 Hung Yen                903   1311   1185   1194   1153   1331   1364   1594\n 8 Thai Binh               631    776    825    890    714    847   1130   1245\n 9 Ha Nam                  481    628    596    684    682    666    796    771\n10 Nam Dinh                675    799    818    796    794    906   1088   1283\n# ℹ 53 more rows\n```\n\n\n:::\n:::\n\n\n\nThis segment cleans and standardizes province names in `enterprise`, trimming whitespace and correcting inconsistent naming conventions (e.g., replacing \"Ho Chi Minh city\" with \"TP. Ho Chi Minh\"). It also removes rows that represent regions rather than specific provinces, ensuring a focus on individual provincial data. Missing values, represented as \"..\", are replaced with 0 to enable smooth calculations, and all non-province columns are converted to numeric format to prevent errors in numeric operations.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(enterprise, \"data/rds/enterprise.rds\")\n```\n:::\n\n\n\n## **Exploratory Data Analysis (EDA)**\n\nWhen designing the Shiny UI, I plan to include the variable \"type of farm,\" allowing users to explore the agricultural data across different years and farm types interactively.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplots_list <- list()\n\nfor (year in 2012:2023) {\n  p <- ggplot(farms, aes_string(x = paste0(\"`\", year, \" Cultivation farm`\"))) +\n    geom_histogram(fill = \"skyblue\", color = \"black\") +\n    ggtitle(paste(year)) +\n    theme_minimal()\n  \n  plots_list[[as.character(year)]] <- p\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: `aes_string()` was deprecated in ggplot2 3.0.0.\nℹ Please use tidy evaluation idioms with `aes()`.\nℹ See also `vignette(\"ggplot2-in-packages\")` for more information.\n```\n\n\n:::\n\n```{.r .cell-code}\narranged_plot <- ggarrange(\n  plots_list[[\"2012\"]], plots_list[[\"2013\"]], plots_list[[\"2014\"]],\n  plots_list[[\"2015\"]], plots_list[[\"2016\"]], plots_list[[\"2017\"]],\n  plots_list[[\"2018\"]], plots_list[[\"2019\"]], plots_list[[\"2020\"]],\n  plots_list[[\"2021\"]], plots_list[[\"2022\"]], plots_list[[\"2023\"]],\n  ncol = 4, nrow = 3\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(arranged_plot)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex03_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Take-Home_Ex03_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}