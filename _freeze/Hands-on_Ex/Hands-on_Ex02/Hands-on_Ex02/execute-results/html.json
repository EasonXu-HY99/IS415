{
  "hash": "7539f821ee1a2598f1598e35f9b6610d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands on Exercise 2\"\nauthor: \"Xu Haiyang\"\ndate: \"August 20, 2024\" \ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n\n### 1. Overview\n\nThematic mapping involves using map symbols to visualize specific properties of geographic features that are not naturally visible, such as population, temperature, crime rate, and property prices. These maps allow us to represent complex data in a spatial context, making it easier to identify patterns and trends.\n\nGeovisualisation, on the other hand, goes beyond just mapping; it provides graphical representations that make a place, phenomenon, or process visible. This visualization enables us to leverage the powerful spatial cognition abilities of our eye–brain vision system to process and understand complex spatial information effectively.\n\nIn this chapter, I will demonstrate how to create functional and accurate choropleth maps using the R package **tmap**.\n\n### 2. Getting Started\n\nBefore we begin, I loaded the necessary R packages to handle geospatial data, mapping, and data manipulation:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tmap, tidyverse)\n```\n:::\n\n\n-   **`sf`**: Used for handling spatial data.\n\n-   **`tmap`**: A powerful package for thematic mapping.\n\n-   **`tidyverse`**: A collection of R packages for data manipulation and visualization.\n\n### 3. Importing Data into R\n\nTo create the choropleth map, I used two datasets:\n\n#### The Data\n\n1.  **Master Plan 2014 Subzone Boundary (Web)**:\n\n    -   **Format**: ESRI Shapefile\n\n    -   **Description**: This geospatial dataset provides the geographical boundaries of Singapore at the planning subzone level, based on the Urban Redevelopment Authority (URA) Master Plan 2014.\n\n    -   **Source**: [data.gov.sg](https://data.gov.sg/)\n\n    I imported this data using the `st_read()` function, which reads the shapefile into R as a simple feature (sf) object:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_read(dsn = \"data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP\", layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\EasonXu-HY99\\IS415\\Hands-on_Ex\\Hands-on_Ex02\\data\\geospatial\\MasterPlan2014SubzoneBoundaryWebSHP' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n\n2.  **Singapore Residents by Planning Area/Subzone, Age Group, Sex, and Type of Dwelling, June 2011-2020**:\n\n    -   **Format**: CSV file\n\n    -   **Description**: This aspatial dataset contains demographic data, including the number of residents by planning area and subzone. Although it lacks spatial coordinates, the PA (Planning Area) and SZ (Subzone) fields serve as unique identifiers, which can be linked to the subzones in the shapefile for geocoding.\n\n    -   **Source**: [Department of Statistics, Singapore](https://www.singstat.gov.sg/)\n\nBy using these datasets together, I will create a choropleth map that visualizes demographic information across Singapore's planning subzones.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n```\n\n\n:::\n:::\n\n\nThis command shows the contents of the `mpsz` data frame, which contains the spatial boundaries of Singapore's planning subzones. Viewing the data helps in understanding its structure before merging it with other datasets.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata <- read_csv(\"data/aspatial/respopagesexfa2011to2020.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 738492 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, FA\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\nHere, I imported the population data stored in a CSV file. This dataset contains demographic information about Singapore residents by planning area, subzone, age group, and sex from 2011 to 2020.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%  \n  group_by(PA, SZ, AG) %>%  \n  summarise(POP = sum(Pop)) %>%  \n  ungroup() %>%  \n  pivot_wider(names_from = AG, values_from = POP) %>% \n  mutate(YOUNG = rowSums(.[3:6]) + rowSums(.[12])) %>%  \n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:11]) + rowSums(.[13:15])) %>%  \n  mutate(AGED = rowSums(.[16:21])) %>% \n  mutate(TOTAL = rowSums(.[3:21])) %>%  \n  mutate(DEPENDENCY = (YOUNG + AGED) / `ECONOMY ACTIVE`) %>% \n  select(PA, SZ, YOUNG, `ECONOMY ACTIVE`, AGED, TOTAL, DEPENDENCY)  \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n:::\n\n\n-   **filter(Time == 2020)**: Selects the data for the year 2020.\n\n-   **group_by(PA, SZ, AG)**: Groups the data by Planning Area (PA), Subzone (SZ), and Age Group (AG).\n\n-   **summarise(POP = sum(Pop))**: Summarizes the population counts by summing them within each group.\n\n-   **ungroup()**: Removes the grouping, returning the data to its ungrouped state.\n\n-   **pivot_wider(names_from = AG, values_from = POP)**: Reshapes the data so that each Age Group (AG) becomes a column.\n\n-   **mutate(YOUNG = rowSums(.\\[3:6\\]) + rowSums(.\\[12\\]))**: Calculates the young population (0-14 years and infants) and creates a new column `YOUNG`.\n\n-   **mutate(`ECONOMY ACTIVE` = rowSums(.\\[7:11\\]) + rowSums(.\\[13:15\\]))**: Calculates the economically active population (15-64 years) and creates a new column `ECONOMY ACTIVE`.\n\n-   **mutate(AGED = rowSums(.\\[16:21\\]))**: Calculates the aged population (65+ years) and creates a new column `AGED`.\n\n-   **mutate(TOTAL = rowSums(.\\[3:21\\]))**: Calculates the total population and creates a new column `TOTAL`.\n\n-   **mutate(DEPENDENCY = (YOUNG + AGED) / `ECONOMY ACTIVE`)**: Calculates the dependency ratio (ratio of the young and aged population to the economically active population) and creates a new column `DEPENDENCY`.\n\n-   **select(PA, SZ, YOUNG, `ECONOMY ACTIVE`, AGED, TOTAL, DEPENDENCY)**: Selects the relevant columns for the final dataset.\n\nIn this step, I filtered the population data to only include the year 2020. I then grouped the data by planning area, subzone, and age group to summarize the population for each group. The data was reshaped so that each age group became a separate column. New columns were created to represent the young, economically active, and aged populations, as well as the total population and dependency ratio.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2020 <- popdata2020 %>%\n  mutate_at(.vars = vars(PA, SZ), .funs = list(toupper)) %>%  \n  filter(`ECONOMY ACTIVE` > 0)\n```\n:::\n\n\n-   **mutate_at(.vars = vars(PA, SZ), .funs = list(toupper))**: Converts the values in the `PA` (Planning Area) and `SZ` (Subzone) columns to uppercase.\n\n-   **filter(`ECONOMY ACTIVE` \\> 0)**: Excludes rows where the `ECONOMY ACTIVE` population is zero, keeping only subzones with an economically active population.\n\nNext, I converted the planning area and subzone names to uppercase to ensure consistency when merging with other datasets. I also filtered out any rows where the economically active population was zero, as these would not be useful for analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_pop2020 <- left_join(mpsz, popdata2020, by = c(\"SUBZONE_N\" = \"SZ\"))\n```\n:::\n\n\nHere, I merged the geospatial data (`mpsz`) with the filtered population data (`popdata2020`) using a left join. This operation linked the population data to the corresponding subzone boundaries based on the subzone names.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")\n```\n:::\n\n\nFinally, I saved the merged dataset as an RDS file, which can be easily loaded in the future without needing to repeat the data import and transformation steps.\n\n### 4. Choropleth Mapping Geospatial Data Using tmap\n\nIn this section, I created choropleth maps to visualize the distribution of the dependency ratio across Singapore’s planning subzones. I used the **tmap** package in R, which is highly versatile for creating thematic maps.\n\n#### 4.1 Plotting a Choropleth Map Quickly Using `qtm()`\n\nTo quickly plot a choropleth map, I used the `qtm()` function, which is a shortcut for generating simple thematic maps. Here's how I visualized the dependency ratio:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\nqtm(mpsz_pop2020, fill = \"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n-   **`tmap_mode(\"plot\")`**: This sets the tmap mode to static plotting (as opposed to interactive maps).\n\n-   **`qtm()`**: This function quickly maps the `DEPENDENCY` variable using the planning subzone boundaries.\n\n#### 4.2 Creating a Choropleth Map Using tmap's Elements\n\nTo have more control over the appearance and elements of the map, I used the full capabilities of the tmap package by layering various map elements:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"Blues\", title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\", main.title.position = \"center\", main.title.size = 1.2, legend.height = 0.45, legend.width = 0.35, frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", position = c(\"left\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n-   **`tm_shape()`**: Defines the shape or spatial object to be used in the map.\n\n-   **`tm_fill()`**: Fills the subzones based on the `DEPENDENCY` variable. The `style = \"quantile\"` argument divides the data into quantiles, and the `palette = \"Blues\"` argument applies a blue color scheme.\n\n-   **`tm_layout()`**: Customizes the layout, including the title, legend dimensions, and the inclusion of a map frame.\n\n-   **`tm_borders()`**: Adds borders to the subzones with partial transparency.\n\n-   **`tm_compass()`**: Adds a compass rose to the map.\n\n-   **`tm_scale_bar()`**: Adds a scale bar.\n\n-   **`tm_grid()`**: Adds a grid to the map with slight transparency.\n\n-   **`tm_credits()`**: Adds a credit note with the data sources.\n\nHere are some additional visualizations I generated using tmap:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) + tm_polygons()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nThis code displays the boundaries of the planning subzones with default polygon styling.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+ tm_polygons(\"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nHere, I highlighted the dependency ratio within each subzone using the polygon shapes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nThis function fills the subzones based on the dependency ratio without drawing the borders.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\") + tm_borders(lwd = 0.1,  alpha = 1)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nFinally, I combined the filled polygons with borders to enhance the map’s readability. I adjusted the border width and transparency for a clearer delineation of subzones.\n\n#### 4.3 Data Classification Methods of tmap\n\nI also explored different data classification methods provided by tmap to see how they impact the visualization:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 5, style = \"quantile\") + tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n-   **`style = \"quantile\"`**: Classifies the data into quantiles, ensuring each class has approximately the same number of subzones.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 5, style = \"equal\") + tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n-   **`style = \"equal\"`**: Divides the data into equal intervals, which can be useful for evenly distributed data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(mpsz_pop2020$DEPENDENCY)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.7113  0.7926  0.8561  0.8786 19.0000      92 \n```\n\n\n:::\n:::\n\n\nI used the `summary()` function to generate summary statistics for the `DEPENDENCY` variable. This helps in understanding the distribution of the data before deciding on classification methods.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) + tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Values have found that are higher than the highest break\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n-   **`breaks`**: Here, I manually specified breaks for the classification, allowing for a custom, meaningful division of the data.\n\n#### 4.4 Color Scheme\n\nIn this section, I experimented with different color schemes to visualize the dependency ratio in the planning subzones.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 6, style = \"quantile\", palette = \"Blues\") + tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n-   **Blues Palette**: Here, I used a six-class quantile classification with a blue color scheme.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"-Greens\") + tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n-   **Reverse Greens Palette**: In this example, I used a reversed green palette to see how it affects the visualization of the same data.\n\n#### 4.5 Map Layouts\n\nNext, I explored different map layouts to enhance the presentation of the dependency ratio data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", style = \"jenks\", palette = \"Blues\", legend.hist = TRUE, legend.is.portrait = TRUE, legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\", main.title.position = \"center\", main.title.size = 1, legend.height = 0.45, legend.width = 0.35, legend.outside = FALSE, legend.position = c(\"right\", \"bottom\"), frame = FALSE) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n-   **Jenks Classification**: This layout uses Jenks natural breaks classification and includes a histogram in the legend. The layout was customized with a centered title and a compact legend.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"-Greens\") + tm_borders(alpha = 0.5) + tmap_style(\"classic\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap style set to \"classic\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n-   **Classic Style**: Here, I applied the classic tmap style, which provides a traditional map appearance.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"Blues\", title = \"No. of persons\") + tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\", main.title.position = \"center\", main.title.size = 1.2, legend.height = 0.45, legend.width = 0.35, frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", position = c(\"left\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n-   **Enhanced Layout**: This layout includes a compass, scale bar, grid lines, and source credits for a more detailed map presentation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_style(\"white\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap style set to \"white\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n```\n\n\n:::\n:::\n\n\n-   **White Style**: Finally, I switched to the white style for a clean, modern look.\n\n#### 4.6 Drawing Small Multiple Choropleth Maps\n\nI also created small multiple maps to compare different variables side by side:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) + tm_fill(c(\"YOUNG\", \"AGED\"), style = \"equal\", palette = \"Blues\") + tm_layout(legend.position = c(\"right\",\"bottom\")) + tm_borders(alpha = 0.5) + tmap_style(\"white\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap style set to \"white\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n-   **Small Multiples with Equal Intervals**: This code compares the \"YOUNG\" and \"AGED\" population distributions using equal intervals.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) + tm_polygons(c(\"DEPENDENCY\",\"AGED\"), style = c(\"equal\", \"quantile\"), palette = list(\"Blues\",\"Greens\")) + tm_layout(legend.position = c(\"right\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n-   **Combined Classification**: Here, I mapped the dependency ratio and the aged population using different classification methods and color palettes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) + \n  tm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"Blues\", thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", free.coords=TRUE, drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE, title.position = c(\"center\", \"center\"), title.size = 20) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n-   **Faceted Map**: This map shows the dependency ratio for different regions in separate facets, allowing for easy regional comparison.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyoungmap <- tm_shape(mpsz_pop2020) + tm_polygons(\"YOUNG\", style = \"quantile\", palette = \"Blues\")\n\nagedmap <- tm_shape(mpsz_pop2020) + tm_polygons(\"AGED\", style = \"quantile\", palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n-   **Arranged Maps**: Here, I arranged maps for the young and aged populations side by side for direct comparison.\n\n#### 4.7 Mapping Spatial Objects Meeting a Selection Criterion\n\nLastly, I focused on mapping only the Central Region:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ]) +\n  tm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"Blues\", legend.hist = TRUE, legend.is.portrait = TRUE, legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE, legend.height = 0.45, legend.width = 5.0, legend.position = c(\"right\", \"bottom\"), frame = FALSE) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n-   **Central Region Map**: This map highlights the Central Region, using a quantile classification and a larger legend for clarity.\n",
    "supporting": [
      "Hands-on_Ex02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}