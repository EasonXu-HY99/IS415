---
title: "Hands-on Exercise 5"
author: "Xu Haiyang"
date: "10 September, 2024" 
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
---

### The Study Area and Data

In this hands-on exercise, I focused on spatial analysis within Hunan province, using two primary data sets:

-   **Hunan County Boundary Layer**: A geospatial data set in ESRI shapefile format representing the county boundaries in Hunan province.

-   **Hunan_2012.csv**: A CSV file containing selected local development indicators for Hunan from the year 2012.

I started by loading the necessary R packages using the `pacman` package for efficiency.

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr)
```

## Getting the Data into R Environment

#### Importing the Shapefile

I imported the Hunan county boundary shapefile into the R environment using `st_read()` from the `sf` package. This function allowed me to load spatial data and keep the geometrical information intact for further spatial operations.

```{r}
hunan <- st_read(dsn = "data/geospatial", layer = "Hunan")
```

#### Importing the CSV File

Next, I imported the local development indicator data from the CSV file using `read_csv()` from the `readr` package. This aspatial data contains various local indicators that I will integrate with the spatial data.

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

#### Performing Relational Join

I performed a relational join between the spatial (shapefile) and aspatial (CSV) data using the `left_join()` function from the `dplyr` package. This allowed me to merge the development indicators into the spatial data, linking both datasets using a common identifier.

```{r}
hunan <- left_join(hunan,hunan2012)%>%
  select(1:4, 7, 15)
```

### Visualizing Regional Development Indicators

To visualize the spatial distribution of the GDP per capita (GDPPC) across counties, I created a **basemap** that displays the county boundaries and labels using the `tmap` package. I then used `qtm()` to quickly generate a thematic map of the GDPPC indicator.

```{r}
basemap <- tm_shape(hunan) + tm_polygons() + tm_text("NAME_3", size=0.5)

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

This visualization provided an initial look at how GDPPC varies spatially across the counties in Hunan.

### Computing Contiguity Spatial Weights

#### Queen Contiguity Neighbors

I began by computing **Queen contiguity neighbors**, which considers counties as neighbors if they share either a boundary or a vertex. I used `poly2nb()` from the `spdep` package to generate the Queen contiguity-based neighbors. The summary of the resulting neighbor object gave me insights into the number of neighbors each county has.

```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

To further understand the neighboring structure, I explored the neighbors of the first county in the dataset and retrieved the GDPPC values of the neighboring counties.

```{r}
wm_q[[1]]
```

```{r}
hunan$County[1]
```

```{r}
hunan$NAME_3[c(2,3,4,57,85)]
```

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

```{r}
str(wm_q)
```

#### Rook Contiguity Neighbors

Next, I computed **Rook contiguity neighbors**, which only considers counties as neighbors if they share a boundary (but not just a vertex). This method is more restrictive compared to Queen contiguity.

```{r}
wm_r <- poly2nb(hunan, queen=FALSE)
summary(wm_r)
```

### Visualizing Contiguity Weights

Before visualizing the neighbors, I calculated the **centroids** of each county using the `st_centroid()` function. The centroids are used as the coordinates for plotting the neighbor connections.

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

```{r}
coords <- cbind(longitude, latitude)
```

```{r}
head(coords)
```

#### Plotting Queen Contiguity Neighbors

I visualized the Queen contiguity neighbors by plotting the county boundaries and connecting neighboring counties with lines. Counties that are neighbors are highlighted in red.

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
```

#### Plotting Rook Contiguity Neighbors

Similarly, I plotted the Rook contiguity neighbors. This helped me compare how the different contiguity methods represent spatial relationships.

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

#### Comparing Queen and Rook Contiguity Maps

To better understand the differences between Queen and Rook contiguity, I plotted both maps side by side for comparison.

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="Queen Contiguity")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
plot(hunan$geometry, border="lightgrey", main="Rook Contiguity")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

## Computing Distance-Based Neighbors

#### Determining the Cut-off Distance

I used **k-nearest neighbors (knn)** to determine the appropriate cut-off distance for creating distance-based neighbors. The function `knn2nb()` was used to compute the neighbors based on proximity, and I extracted the distances between the nearest neighbors using `nbdists()`.

```{r}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

#### Computing a Fixed Distance Weight Matrix

Based on the results from the knn analysis, I computed a **fixed distance weight matrix** using `dnearneigh()`. This matrix captures spatial relationships between counties based on a maximum cut-off distance of 62 units.

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

I further explored the structure of this weight matrix and analyzed the number of neighbors each county has within this distance threshold.

```{r}
str(wm_d62)
```

#### Table and Connected Components Analysis

To explore the connectivity of counties based on their spatial relationships, I created a table showing the number of neighbors each county has. This helps to identify spatial isolation or well-connected regions.

```{r}
table(hunan$County, card(wm_d62))
```

Next, I identified the **connected components** in the weight matrix using `n.comp.nb()` to determine how many disconnected regions (components) exist in the data. This is important for understanding how well the spatial network covers the study area.

```{r}
n_comp <- n.comp.nb(wm_d62)
n_comp$nc
```

The table below shows the component each county belongs to, which can be used to visually inspect whether all counties are connected or if there are isolated regions.

```{r}
table(n_comp$comp.id)
```

#### Plotting the Fixed Distance Weight Matrix

I visualized the spatial relationships between counties based on a **fixed distance weight matrix**. The first plot shows connections between counties based on this distance, while the second plot highlights the 1st nearest neighbors.

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="red", length=0.08)
```

To visualize both **1st nearest neighbors** and **distance-based neighbors** side by side, I arranged them in a two-panel plot:

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="1st nearest neighbours")
plot(k1, coords, add=TRUE, col="red", length=0.08)
plot(hunan$geometry, border="lightgrey", main="Distance link")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)
```

#### Computing Adaptive Distance Weight Matrix

An **adaptive distance weight matrix** ensures each county has a set number of neighbors, regardless of distance. I used the `knn2nb()` function with `k=6`, meaning each county has six nearest neighbors. This approach adapts to local density variations across the region.

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

```{r}
str(knn6)
```

#### Plotting Distance-Based Neighbors

The plot below visualizes the **adaptive distance-based neighbors**, highlighting how each county has exactly six nearest neighbors.

```{r}
plot(hunan$geometry, border="lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

### Inverse Distance Weighting (IDW)

**Inverse Distance Weighting (IDW)** assigns weights to neighboring counties based on their distance. Closer counties are assigned higher weights. The `nbdists()` function calculates distances between counties, and `lapply()` applies the inverse distance formula to create the weights.

```{r}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
ids
```

### Row-Standardized Weights Matrix

A **row-standardized weights matrix** ensures that the sum of weights for each county is equal to 1, which allows for a balanced influence from neighboring counties. This matrix was generated using the `nb2listw()` function.

```{r}
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q
```

```{r}
rswm_q$weights[10]
```

Additionally, I created an **inverse distance weight matrix** and explored its weights.

```{r}
rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
rswm_ids
```

```{r}
rswm_ids$weights[1]
```

```{r}
summary(unlist(rswm_ids$weights))
```

## Application of Spatial Weight Matrix

#### Spatial Lag with Row-Standardized Weights

To understand spatial autocorrelation, I calculated the **spatial lag** of GDP per capita (GDPPC). This lag reflects the influence of neighboring counties' GDPPC values on each county, highlighting potential regional dependencies.

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
```

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

I then joined the spatial lag results with the original data for visualization.

```{r}
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan,lag.res)
```

```{r}
head(hunan)
```

To visualize the spatial lag of GDPPC alongside the original values, I created thematic maps.

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

#### Spatial Lag as a Sum of Neighboring Values

In this section, I computed the **spatial lag as a sum of neighboring values** of GDP per capita (GDPPC) using equal weights for all neighbors. This approach gives equal importance to each neighboring county when calculating the spatial lag.

I first created the weights for each neighbor by setting them to 1, effectively treating all neighbors equally.

```{r}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q, glist = b_weights, style = "B")
b_weights2
```

Next, I computed the spatial lag as a sum of the GDPPC values of the neighboring counties:

```{r}
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
```

I reviewed the computed lag values:

```{r}
lag_sum
```

The results were then merged back with the original Hunan dataset for further analysis and visualization:

```{r}
hunan <- left_join(hunan, lag.res)
```

I visualized the original GDPPC values and the summed lag values side by side:

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

#### Spatial Window Average and Sum

I then computed the **spatial window average** and **spatial window sum** of GDPPC values. In this context, each county is treated as its own neighbor along with the surrounding counties, so the calculation includes the county itself in the sum and average.

To start, I included each county in its own neighbor set using `include.self()` and then created a list of spatial weights.

```{r}
wm_qs <- include.self(wm_q)
```

```{r}
wm_qs[[1]]
```

```{r}
wm_qs <- nb2listw(wm_qs)
wm_qs
```

I calculated the **spatial window average** of GDPPC for each county:

```{r}
lag_w_avg_gpdpc <- lag.listw(wm_qs, hunan$GDPPC)
lag_w_avg_gpdpc
```

I then prepared the results and merged them back into the Hunan dataset:

```{r}
lag.list.wm_qs <- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))
lag_wm_qs.res <- as.data.frame(lag.list.wm_qs)
colnames(lag_wm_qs.res) <- c("NAME_3", "lag_window_avg GDPPC")
```

```{r}
hunan <- left_join(hunan, lag_wm_qs.res)
```

To inspect the **spatial window average** alongside the **spatial lag**:

```{r}
hunan %>%
  select("County", "lag GDPPC", "lag_window_avg GDPPC") %>%
  kable()
```

Finally, I visualized the **spatial window average** of GDPPC:

```{r}
w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
tmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)
```

### Spatial Window Sum

Next, I computed the **spatial window sum** of GDPPC values, which sums up the values for each county and its neighbors.

```{r}
wm_qs <- include.self(wm_q)
wm_qs
```

```{r}
b_weights <- lapply(wm_qs, function(x) 0*x + 1)
b_weights[1]
```

```{r}
b_weights2 <- nb2listw(wm_qs, glist = b_weights, style = "B")
b_weights2
```

I calculated the **spatial window sum** of GDPPC values:

```{r}
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
```

The results were prepared and merged back into the Hunan dataset:

```{r}
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
```

```{r}
hunan <- left_join(hunan, w_sum_gdppc.res)
```

I reviewed the **spatial window sum** alongside the **spatial lag sum**:

```{r}
hunan %>%
  select("County", "lag_sum GDPPC", "w_sum GDPPC") %>%
  kable()
```

Lastly, I visualized the **spatial window sum** of GDPPC:

```{r}
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)
```
