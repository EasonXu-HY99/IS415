---
title: "Hands on Exercise 2"
author: "Xu Haiyang"
date: "`r format(Sys.time(), '%B %d, %Y')`" 
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
---

### 1. Overview

Thematic mapping involves using map symbols to visualize specific properties of geographic features that are not naturally visible, such as population, temperature, crime rate, and property prices. These maps allow us to represent complex data in a spatial context, making it easier to identify patterns and trends.

Geovisualisation, on the other hand, goes beyond just mapping; it provides graphical representations that make a place, phenomenon, or process visible. This visualization enables us to leverage the powerful spatial cognition abilities of our eye–brain vision system to process and understand complex spatial information effectively.

In this chapter, I will demonstrate how to create functional and accurate choropleth maps using the R package **tmap**.

### 2. Getting Started

Before we begin, I loaded the necessary R packages to handle geospatial data, mapping, and data manipulation:

```{r}
pacman::p_load(sf, tmap, tidyverse)
```

-   **`sf`**: Used for handling spatial data.

-   **`tmap`**: A powerful package for thematic mapping.

-   **`tidyverse`**: A collection of R packages for data manipulation and visualization.

### 3. Importing Data into R

To create the choropleth map, I used two datasets:

#### The Data

1.  **Master Plan 2014 Subzone Boundary (Web)**:

    -   **Format**: ESRI Shapefile

    -   **Description**: This geospatial dataset provides the geographical boundaries of Singapore at the planning subzone level, based on the Urban Redevelopment Authority (URA) Master Plan 2014.

    -   **Source**: [data.gov.sg](https://data.gov.sg/)

    I imported this data using the `st_read()` function, which reads the shapefile into R as a simple feature (sf) object:

```{r}
mpsz <- st_read(dsn = "data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP", layer = "MP14_SUBZONE_WEB_PL")
```

2.  **Singapore Residents by Planning Area/Subzone, Age Group, Sex, and Type of Dwelling, June 2011-2020**:

    -   **Format**: CSV file

    -   **Description**: This aspatial dataset contains demographic data, including the number of residents by planning area and subzone. Although it lacks spatial coordinates, the PA (Planning Area) and SZ (Subzone) fields serve as unique identifiers, which can be linked to the subzones in the shapefile for geocoding.

    -   **Source**: [Department of Statistics, Singapore](https://www.singstat.gov.sg/)

By using these datasets together, I will create a choropleth map that visualizes demographic information across Singapore's planning subzones.

```{r}
mpsz
```

This command shows the contents of the `mpsz` data frame, which contains the spatial boundaries of Singapore's planning subzones. Viewing the data helps in understanding its structure before merging it with other datasets.

```{r}
popdata <- read_csv("data/aspatial/respopagesexfa2011to2020.csv")
```

Here, I imported the population data stored in a CSV file. This dataset contains demographic information about Singapore residents by planning area, subzone, age group, and sex from 2011 to 2020.

```{r}
popdata2020 <- popdata %>%
  filter(Time == 2020) %>%  
  group_by(PA, SZ, AG) %>%  
  summarise(POP = sum(Pop)) %>%  
  ungroup() %>%  
  pivot_wider(names_from = AG, values_from = POP) %>% 
  mutate(YOUNG = rowSums(.[3:6]) + rowSums(.[12])) %>%  
  mutate(`ECONOMY ACTIVE` = rowSums(.[7:11]) + rowSums(.[13:15])) %>%  
  mutate(AGED = rowSums(.[16:21])) %>% 
  mutate(TOTAL = rowSums(.[3:21])) %>%  
  mutate(DEPENDENCY = (YOUNG + AGED) / `ECONOMY ACTIVE`) %>% 
  select(PA, SZ, YOUNG, `ECONOMY ACTIVE`, AGED, TOTAL, DEPENDENCY)  
```

-   **filter(Time == 2020)**: Selects the data for the year 2020.

-   **group_by(PA, SZ, AG)**: Groups the data by Planning Area (PA), Subzone (SZ), and Age Group (AG).

-   **summarise(POP = sum(Pop))**: Summarizes the population counts by summing them within each group.

-   **ungroup()**: Removes the grouping, returning the data to its ungrouped state.

-   **pivot_wider(names_from = AG, values_from = POP)**: Reshapes the data so that each Age Group (AG) becomes a column.

-   **mutate(YOUNG = rowSums(.\[3:6\]) + rowSums(.\[12\]))**: Calculates the young population (0-14 years and infants) and creates a new column `YOUNG`.

-   **mutate(`ECONOMY ACTIVE` = rowSums(.\[7:11\]) + rowSums(.\[13:15\]))**: Calculates the economically active population (15-64 years) and creates a new column `ECONOMY ACTIVE`.

-   **mutate(AGED = rowSums(.\[16:21\]))**: Calculates the aged population (65+ years) and creates a new column `AGED`.

-   **mutate(TOTAL = rowSums(.\[3:21\]))**: Calculates the total population and creates a new column `TOTAL`.

-   **mutate(DEPENDENCY = (YOUNG + AGED) / `ECONOMY ACTIVE`)**: Calculates the dependency ratio (ratio of the young and aged population to the economically active population) and creates a new column `DEPENDENCY`.

-   **select(PA, SZ, YOUNG, `ECONOMY ACTIVE`, AGED, TOTAL, DEPENDENCY)**: Selects the relevant columns for the final dataset.

In this step, I filtered the population data to only include the year 2020. I then grouped the data by planning area, subzone, and age group to summarize the population for each group. The data was reshaped so that each age group became a separate column. New columns were created to represent the young, economically active, and aged populations, as well as the total population and dependency ratio.

```{r}
popdata2020 <- popdata2020 %>%
  mutate_at(.vars = vars(PA, SZ), .funs = list(toupper)) %>%  
  filter(`ECONOMY ACTIVE` > 0)
```

-   **mutate_at(.vars = vars(PA, SZ), .funs = list(toupper))**: Converts the values in the `PA` (Planning Area) and `SZ` (Subzone) columns to uppercase.

-   **filter(`ECONOMY ACTIVE` \> 0)**: Excludes rows where the `ECONOMY ACTIVE` population is zero, keeping only subzones with an economically active population.

Next, I converted the planning area and subzone names to uppercase to ensure consistency when merging with other datasets. I also filtered out any rows where the economically active population was zero, as these would not be useful for analysis.

```{r}
mpsz_pop2020 <- left_join(mpsz, popdata2020, by = c("SUBZONE_N" = "SZ"))
```

Here, I merged the geospatial data (`mpsz`) with the filtered population data (`popdata2020`) using a left join. This operation linked the population data to the corresponding subzone boundaries based on the subzone names.

```{r}
write_rds(mpsz_pop2020, "data/rds/mpszpop2020.rds")
```

Finally, I saved the merged dataset as an RDS file, which can be easily loaded in the future without needing to repeat the data import and transformation steps.

### 4. Choropleth Mapping Geospatial Data Using tmap

In this section, I created choropleth maps to visualize the distribution of the dependency ratio across Singapore’s planning subzones. I used the **tmap** package in R, which is highly versatile for creating thematic maps.

#### 4.1 Plotting a Choropleth Map Quickly Using `qtm()`

To quickly plot a choropleth map, I used the `qtm()` function, which is a shortcut for generating simple thematic maps. Here's how I visualized the dependency ratio:

```{r}
tmap_mode("plot")
qtm(mpsz_pop2020, fill = "DEPENDENCY")
```

-   **`tmap_mode("plot")`**: This sets the tmap mode to static plotting (as opposed to interactive maps).

-   **`qtm()`**: This function quickly maps the `DEPENDENCY` variable using the planning subzone boundaries.

#### 4.2 Creating a Choropleth Map Using tmap's Elements

To have more control over the appearance and elements of the map, I used the full capabilities of the tmap package by layering various map elements:

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", style = "quantile", palette = "Blues", title = "Dependency ratio") +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone", main.title.position = "center", main.title.size = 1.2, legend.height = 0.45, legend.width = 0.35, frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", position = c("left", "bottom"))
```

-   **`tm_shape()`**: Defines the shape or spatial object to be used in the map.

-   **`tm_fill()`**: Fills the subzones based on the `DEPENDENCY` variable. The `style = "quantile"` argument divides the data into quantiles, and the `palette = "Blues"` argument applies a blue color scheme.

-   **`tm_layout()`**: Customizes the layout, including the title, legend dimensions, and the inclusion of a map frame.

-   **`tm_borders()`**: Adds borders to the subzones with partial transparency.

-   **`tm_compass()`**: Adds a compass rose to the map.

-   **`tm_scale_bar()`**: Adds a scale bar.

-   **`tm_grid()`**: Adds a grid to the map with slight transparency.

-   **`tm_credits()`**: Adds a credit note with the data sources.

Here are some additional visualizations I generated using tmap:

```{r}
tm_shape(mpsz_pop2020) + tm_polygons()
```

This code displays the boundaries of the planning subzones with default polygon styling.

```{r}
tm_shape(mpsz_pop2020)+ tm_polygons("DEPENDENCY")
```

Here, I highlighted the dependency ratio within each subzone using the polygon shapes.

```{r}
tm_shape(mpsz_pop2020) + tm_fill("DEPENDENCY")
```

This function fills the subzones based on the dependency ratio without drawing the borders.

```{r}
tm_shape(mpsz_pop2020) + tm_fill("DEPENDENCY") + tm_borders(lwd = 0.1,  alpha = 1)
```

Finally, I combined the filled polygons with borders to enhance the map’s readability. I adjusted the border width and transparency for a clearer delineation of subzones.

#### 4.3 Data Classification Methods of tmap

I also explored different data classification methods provided by tmap to see how they impact the visualization:

```{r}
tm_shape(mpsz_pop2020) + tm_fill("DEPENDENCY", n = 5, style = "quantile") + tm_borders(alpha = 0.5)
```

-   **`style = "quantile"`**: Classifies the data into quantiles, ensuring each class has approximately the same number of subzones.

```{r}
tm_shape(mpsz_pop2020) + tm_fill("DEPENDENCY", n = 5, style = "equal") + tm_borders(alpha = 0.5)
```

-   **`style = "equal"`**: Divides the data into equal intervals, which can be useful for evenly distributed data.

```{r}
summary(mpsz_pop2020$DEPENDENCY)
```

I used the `summary()` function to generate summary statistics for the `DEPENDENCY` variable. This helps in understanding the distribution of the data before deciding on classification methods.

```{r}
tm_shape(mpsz_pop2020) + tm_fill("DEPENDENCY", breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) + tm_borders(alpha = 0.5)
```

-   **`breaks`**: Here, I manually specified breaks for the classification, allowing for a custom, meaningful division of the data.

#### 4.4 Color Scheme

In this section, I experimented with different color schemes to visualize the dependency ratio in the planning subzones.

```{r}
tm_shape(mpsz_pop2020) + tm_fill("DEPENDENCY", n = 6, style = "quantile", palette = "Blues") + tm_borders(alpha = 0.5)
```

-   **Blues Palette**: Here, I used a six-class quantile classification with a blue color scheme.

```{r}
tm_shape(mpsz_pop2020) + tm_fill("DEPENDENCY", style = "quantile", palette = "-Greens") + tm_borders(alpha = 0.5)
```

-   **Reverse Greens Palette**: In this example, I used a reversed green palette to see how it affects the visualization of the same data.

#### 4.5 Map Layouts

Next, I explored different map layouts to enhance the presentation of the dependency ratio data:

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", style = "jenks", palette = "Blues", legend.hist = TRUE, legend.is.portrait = TRUE, legend.hist.z = 0.1) +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone \n(Jenks classification)", main.title.position = "center", main.title.size = 1, legend.height = 0.45, legend.width = 0.35, legend.outside = FALSE, legend.position = c("right", "bottom"), frame = FALSE) +
  tm_borders(alpha = 0.5)
```

-   **Jenks Classification**: This layout uses Jenks natural breaks classification and includes a histogram in the legend. The layout was customized with a centered title and a compact legend.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", style = "quantile", palette = "-Greens") + tm_borders(alpha = 0.5) + tmap_style("classic")
```

-   **Classic Style**: Here, I applied the classic tmap style, which provides a traditional map appearance.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", style = "quantile", palette = "Blues", title = "No. of persons") + tm_layout(main.title = "Distribution of Dependency Ratio \nby planning subzone", main.title.position = "center", main.title.size = 1.2, legend.height = 0.45, legend.width = 0.35, frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", position = c("left", "bottom"))
```

-   **Enhanced Layout**: This layout includes a compass, scale bar, grid lines, and source credits for a more detailed map presentation.

```{r}
tmap_style("white")
```

-   **White Style**: Finally, I switched to the white style for a clean, modern look.

#### 4.6 Drawing Small Multiple Choropleth Maps

I also created small multiple maps to compare different variables side by side:

```{r}
tm_shape(mpsz_pop2020) + tm_fill(c("YOUNG", "AGED"), style = "equal", palette = "Blues") + tm_layout(legend.position = c("right","bottom")) + tm_borders(alpha = 0.5) + tmap_style("white")
```

-   **Small Multiples with Equal Intervals**: This code compares the "YOUNG" and "AGED" population distributions using equal intervals.

```{r}
tm_shape(mpsz_pop2020) + tm_polygons(c("DEPENDENCY","AGED"), style = c("equal", "quantile"), palette = list("Blues","Greens")) + tm_layout(legend.position = c("right", "bottom"))
```

-   **Combined Classification**: Here, I mapped the dependency ratio and the aged population using different classification methods and color palettes.

```{r}
tm_shape(mpsz_pop2020) + 
  tm_fill("DEPENDENCY", style = "quantile", palette = "Blues", thres.poly = 0) + 
  tm_facets(by="REGION_N", free.coords=TRUE, drop.shapes=TRUE) +
  tm_layout(legend.show = FALSE, title.position = c("center", "center"), title.size = 20) +
  tm_borders(alpha = 0.5)
```

-   **Faceted Map**: This map shows the dependency ratio for different regions in separate facets, allowing for easy regional comparison.

```{r}
youngmap <- tm_shape(mpsz_pop2020) + tm_polygons("YOUNG", style = "quantile", palette = "Blues")

agedmap <- tm_shape(mpsz_pop2020) + tm_polygons("AGED", style = "quantile", palette = "Blues")

tmap_arrange(youngmap, agedmap, asp=1, ncol=2)
```

-   **Arranged Maps**: Here, I arranged maps for the young and aged populations side by side for direct comparison.

#### 4.7 Mapping Spatial Objects Meeting a Selection Criterion

Lastly, I focused on mapping only the Central Region:

```{r}
tm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N=="CENTRAL REGION", ]) +
  tm_fill("DEPENDENCY", style = "quantile", palette = "Blues", legend.hist = TRUE, legend.is.portrait = TRUE, legend.hist.z = 0.1) +
  tm_layout(legend.outside = TRUE, legend.height = 0.45, legend.width = 5.0, legend.position = c("right", "bottom"), frame = FALSE) +
  tm_borders(alpha = 0.5)
```

-   **Central Region Map**: This map highlights the Central Region, using a quantile classification and a larger legend for clarity.
