---
title: "Hands-on Exercise 3 Part 2"
author: "Xu Haiyang"
date: "26 August, 2024" 
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
---

```{r}
pacman::p_load(sf, raster, spatstat, tmap, tidyverse)
```

```{r}
childcare_sf <- st_read("data/child-care-services-geojson.geojson") %>%
  st_transform(crs = 3414)
```

```{r}
sg_sf <- st_read(dsn = "data", layer = "CostalOutline") 
```

```{r}
mpsz_sf <- st_read(dsn = "data", layer = "MP14_SUBZONE_WEB_PL")
```

```{r}
st_crs(childcare_sf)  
st_crs(mpsz_sf)       
st_crs(sg_sf)
```

```{r}
mpsz_sf <- st_set_crs(mpsz_sf, 3414)
sg_sf <- st_set_crs(sg_sf, 3414)
```

```{r}
childcare_sf <- st_transform(childcare_sf, crs = 3414)
```

```{r}
st_crs(childcare_sf)
st_crs(mpsz_sf)
st_crs(sg_sf)
```

```{r}
tmap_mode("plot")

tm_shape(sg_sf) +
  tm_polygons(col = "grey", border.col = "black") +
tm_shape(mpsz_sf) +  
  tm_polygons(col = "grey", border.col = "black") +
tm_shape(childcare_sf) +  
  tm_dots(col = "black", size = 0.1)

```

```{r}
tmap_mode('view')
tm_shape(childcare_sf) + tm_dots()
```

```{r}
tmap_mode('plot')
```

```{r}
childcare_ppp <- as.ppp(childcare_sf)
childcare_ppp
```

```{r}
plot(childcare_ppp)
```

```{r}
summary(childcare_ppp)
```

```{r}
any(duplicated(childcare_ppp))
```

```{r}
multiplicity(childcare_ppp)
```

```{r}
sum(multiplicity(childcare_ppp) > 1)
```

```{r}
tmap_mode('view')
tm_shape(childcare_sf) + tm_dots(alpha=0.4, size=0.05)
```

```{r}
tmap_mode('plot')
```

```{r}
childcare_ppp_jit <- rjitter(childcare_ppp, retry=TRUE, nsim=1, drop=TRUE)
```

```{r}
any(duplicated(childcare_ppp_jit))
```

```{r}
sg_owin <- as.owin(sg_sf)
```

```{r}
plot(sg_owin)
```

```{r}
summary(sg_owin)
```

```{r}
childcareSG_ppp = childcare_ppp[sg_owin]
```

```{r}
summary(childcareSG_ppp)
```

```{r}
plot(childcareSG_ppp)
```

```{r}
pg <- mpsz_sf %>%
  filter(PLN_AREA_N == "PUNGGOL")
tm <- mpsz_sf %>%
  filter(PLN_AREA_N == "TAMPINES")
ck <- mpsz_sf %>%
  filter(PLN_AREA_N == "CHOA CHU KANG")
jw <- mpsz_sf %>%
  filter(PLN_AREA_N == "JURONG WEST")
```

```{r}
par(mfrow=c(2,2))
plot(pg, main = "Ponggol")
```

```{r}
plot(tm, main = "Tampines")
```

```{r}
plot(ck, main = "Choa Chu Kang")
```

```{r}
plot(jw, main = "Jurong West")
```

```{r}
pg_owin = as.owin(pg)
tm_owin = as.owin(tm)
ck_owin = as.owin(ck)
jw_owin = as.owin(jw)
```

```{r}
childcare_pg_ppp = childcare_ppp_jit[pg_owin]
childcare_tm_ppp = childcare_ppp_jit[tm_owin]
childcare_ck_ppp = childcare_ppp_jit[ck_owin]
childcare_jw_ppp = childcare_ppp_jit[jw_owin]
```

```{r}
childcare_pg_ppp.km = rescale.ppp(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp.km = rescale.ppp(childcare_tm_ppp, 1000, "km")
childcare_ck_ppp.km = rescale.ppp(childcare_ck_ppp, 1000, "km")
childcare_jw_ppp.km = rescale.ppp(childcare_jw_ppp, 1000, "km")
```

```{r}
par(mfrow=c(2,2))
plot(childcare_pg_ppp.km, main="Punggol")
plot(childcare_tm_ppp.km, main="Tampines")
plot(childcare_ck_ppp.km, main="Choa Chu Kang")
plot(childcare_jw_ppp.km, main="Jurong West")
```

### 9. Analyzing Spatial Point Process Using G-Function

The G-function measures the distribution of the nearest neighbor distances among points in a point pattern. It helps in understanding whether the points are clustered, randomly distributed, or regularly spaced.

#### 9.1 Choa Chu Kang Planning Area

##### 9.1.1 Computing G-Function Estimation

```{r}
G_CK = Gest(childcare_ck_ppp, correction = "border")
plot(G_CK, xlim=c(0,500))
```

-   **Why**: I computed the G-function to analyze the distribution of nearest neighbor distances in the Choa Chu Kang area.

-   **Functions**:

    -   **`Gest()`**: Computes the empirical G-function for a point pattern.

    -   **`plot()`**: Visualizes the G-function to observe the pattern of point distributions.

##### 9.1.2 Performing Complete Spatial Randomness (CSR) Test

```{r}
G_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)
```

```{r}
plot(G_CK.csr)
```

-   **Why**: The CSR test evaluates if the observed pattern deviates significantly from a random distribution.

-   **Functions**:

    -   **`envelope()`**: Generates simulation envelopes for hypothesis testing.

    -   **`plot()`**: Displays the observed G-function against the CSR envelope.

#### 9.2 Tampines Planning Area

##### 9.2.1 Computing G-Function Estimation

```{r}
G_tm = Gest(childcare_tm_ppp, correction = "best")
plot(G_tm)
```

##### 9.2.2 Performing Complete Spatial Randomness Test

```{r}
G_tm.csr <- envelope(childcare_tm_ppp, Gest, correction = "all", nsim = 999)
```

```{r}
plot(G_tm.csr)
```

### 10. Analyzing Spatial Point Process Using F-Function

The F-function measures the distribution of distances from arbitrary locations (not necessarily points) to the nearest point in a point pattern.

#### 10.1 Choa Chu Kang Planning Area

##### 10.1.1 Computing F-Function Estimation

```{r}
F_CK = Fest(childcare_ck_ppp)
plot(F_CK)
```

-   **Why**: I used the F-function to analyze the distribution of distances from random locations to the nearest childcare center in Choa Chu Kang.

-   **Functions**:

    -   **`Fest()`**: Computes the empirical F-function for a point pattern.

##### 10.1.2 Performing Complete Spatial Randomness Test

```{r}
F_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)
```

```{r}
plot(F_CK.csr)
```

#### 10.2 Tampines Planning Area

##### 10.2.1 Computing F-Function Estimation

```{r}
F_tm = Fest(childcare_tm_ppp, correction = "best")
plot(F_tm)
```

##### 10.2.2 Performing Complete Spatial Randomness Test

```{r}
F_tm.csr <- envelope(childcare_tm_ppp, Fest, correction = "all", nsim = 999)
```

```{r}
plot(F_tm.csr)
```

### 11. Analyzing Spatial Point Process Using K-Function

The K-function measures the number of points within a given distance of other points in a point pattern, providing insight into clustering over different scales.

#### 11.1 Choa Chu Kang Planning Area

##### 11.1.1 Computing K-Function Estimate

```{r}
K_ck = Kest(childcare_ck_ppp, correction = "Ripley")
plot(K_ck, . -r ~ r, ylab= "K(d)-r", xlab = "d(m)")
```

-   **Why**: The K-function helps in understanding clustering or regularity at multiple scales in the Choa Chu Kang area.

-   **Functions**:

    -   **`Kest()`**: Computes the empirical K-function for a point pattern.

##### 11.1.2 Performing Complete Spatial Randomness Test

```{r}
K_ck.csr <- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(K_ck.csr, . - r ~ r, xlab="d", ylab="K(d)-r")
```

#### 11.2 Tampines Planning Area

##### 11.2.1 Computing K-Function Estimate

```{r}
K_tm = Kest(childcare_tm_ppp, correction = "Ripley")
plot(K_tm, . -r ~ r, 
     ylab= "K(d)-r", xlab = "d(m)", 
     xlim=c(0,1000))
```

##### 11.2.2 Performing Complete Spatial Randomness Test

```{r}
K_tm.csr <- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(K_tm.csr, . - r ~ r, 
     xlab="d", ylab="K(d)-r", xlim=c(0,500))
```

### 12. Analyzing Spatial Point Process Using L-Function

The L-function is a variance-stabilized transformation of the K-function, making it easier to interpret clustering or regularity.

#### 12.1 Choa Chu Kang Planning Area

##### 12.1.1 Computing L-Function Estimation

```{r}
L_ck = Lest(childcare_ck_ppp, correction = "Ripley")
plot(L_ck, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)")
```

-   **Why**: The L-function provides a clearer interpretation of clustering in the Choa Chu Kang area.

-   **Functions**:

    -   **`Lest()`**: Computes the empirical L-function for a point pattern.

##### 12.1.2 Performing Complete Spatial Randomness Test

```{r}
L_ck.csr <- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(L_ck.csr, . - r ~ r, xlab="d", ylab="L(d)-r")
```

#### 12.2 Tampines Planning Area

##### 12.2.1 Computing L-Function Estimation

```{r}
L_tm = Lest(childcare_tm_ppp, correction = "Ripley")
plot(L_tm, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)", 
     xlim=c(0,1000))
```

##### 12.2.2 Performing Complete Spatial Randomness Test

```{r}
L_tm.csr <- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(L_tm.csr, . - r ~ r, 
     xlab="d", ylab="L(d)-r", xlim=c(0,500))
```
