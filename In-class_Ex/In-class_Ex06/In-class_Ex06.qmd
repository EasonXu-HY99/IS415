---
title: "In-class Exercise 6"
author: "Xu Haiyang"
date: "23 September, 2024" 
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
---

Installing Required Packages

```{r}
pacman::p_load(sf, sfdep, tmap, tidyverse, tmap)
```

Loading Data

```{r}
hunan_2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

```{r}
hunan_sf <- st_read(
  dsn = "data/geospatial",
  layer = "Hunan"
)
hunan_GDPPC <- left_join(hunan_sf, hunan_2012) %>%
  select(1:4, 7, 15)
```

Deriving Queen’s Contiguity Weights using sfdep Package

```{r}
wm_q <- hunan_GDPPC %>%
  mutate(nb = st_contiguity(geometry),
         wt = st_weights(nb, style = "W"),
         .before = 1)
```

Conducting Global Moran’s I Test

```{r}
global_moran_test(
  wm_q$GDPPC,
  wm_q$nb,
  wm_q$wt
)
```

Calculating Global Moran’s I

```{r}
moranI <- global_moran(
  wm_q$GDPPC,
  wm_q$nb,
  wm_q$wt
)
```

Running Global Moran's I Permutation Test

```{r}
set.seed(1234)
```

```{r}
global_moran_perm(
  wm_q$GDPPC,
  wm_q$nb,
  wm_q$wt,
  nsim = 99
)
```

Calculating Local Moran’s I

```{r}
lisa <- wm_q %>%
  mutate(local_moran = local_moran(GDPPC, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

#### Interpretation Notes:

-   Use `p_ii_sim` for simulation results.

-   `ii` is for the local Moran statistic.

-   Focus on the `mean` or `median` based on data skewness:

    -   If skewed heavily (many values far from 0), use the median.

    -   A skewness close to 0 implies using the mean. You can plot a histogram to assess skewness.

Visualizing Local Moran’s I

```{r}
tmap_mode("plot")
tm_shape(lisa) +
  tm_fill("ii") +
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6, 8)) +
  tm_layout(
    main.title = "Local Moran's I of GDPPC",
    main.title.size = 1
  )
```

Visualizing P-values for Local Moran’s I

```{r}
tmap_mode("plot")
map1 <- tm_shape(lisa) +
  tm_fill("ii") +
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6, 8)) +
  tm_layout(
    main.title = "Local Moran's I of GDPPC",
    main.title.size = 1
  )

map2 <- tm_shape(lisa) +
  tm_fill("p_ii",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
          labels = c("0.001", "0.01", "0.05", "Not sig")) +
  tm_borders(alpha = 0.5) +
  tm_layout(
    main.title = "P-values of Local Moran's I",
    main.title.size = 1
  )

tmap_arrange(map1, map2, ncol = 2)
```

Visualizing the LISA Map

```{r}
lisa_sig <- lisa %>%
  filter(p_ii < 0.05)

tmap_mode("plot")
tm_shape(lisa) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(lisa_sig) +
  tm_fill("mean") +
  tm_borders(alpha = 0.5)
```

*Note: A LISA map requires filtering based on p-values (p_ii).*

### Hot Spot and Cold Spot Analysis

#### Calculating Local Gi\* Statistics

```{r}
wm_idw <- hunan_GDPPC %>%
  mutate(
    nb = st_contiguity(geometry),
    wts = st_inverse_distance(nb, geometry, scale = 1, alpha = 1),
    .before = 1
  )
```

```{r}
HCSA <- wm_idw %>%
  mutate(local_Gi = local_gstar_perm(GDPPC, nb, wt, nsim = 99), .before = 1) %>%
  unnest(local_Gi)

HCSA
```

Visualizing Gi\* Statistics

```{r}
HCSA_sig <- HCSA %>%
  filter(p_sim < 0.05)

tmap_mode("plot")
tm_shape(HCSA) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(HCSA_sig) +
  tm_fill("gi_star") +
  tm_borders(alpha = 0.5)
```

*Note: Gi* is used for hotspot and coldspot analysis, while LISA identifies clusters.\*
