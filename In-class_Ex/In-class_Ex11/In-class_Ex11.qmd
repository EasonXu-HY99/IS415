---
title: "In Class Exercise 11"
author: "Xu Haiyang"
date: "4 November, 2024" 
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
---

### Loading Required Libraries

```{r}
pacman::p_load(tidyverse, sf, tmap, httr, performance)
```

This line loads essential packages for data wrangling, geospatial analysis, mapping, HTTP requests, and model performance checks.

### **Reading and Merging CSV Files**

```{r}
folder_path <- "data/aspatial"
file_list <- list.files(path = folder_path, 
                        pattern = "^realis.*\\.csv$", 
                        full.names = TRUE)

realis_data <- file_list %>%
  map_dfr(read_csv)
```

This block identifies all files in the specified folder that start with "realis" and end with ".csv". It reads and combines them into a single data frame (`realis_data`) using `map_dfr()`, which applies `read_csv()` to each file.

### **Filtering for Condo Resale Transactions**

```{r}
condo_resale <- realis_data %>%
  mutate(`Sale Date` = dmy(`Sale Date`)) %>%
  filter(`Type of Sale` == "Resale" &
           `Property Type` == "Condominium")
```

This code block:

1.  Converts the `Sale Date` column to a date format.

2.  Filters the dataset to include only records where the sale type is "Resale" and the property type is "Condominium."

### **Extracting Unique Postcodes**

```{r}
postcode <- unique(condo_resale$`Postal Code`)
```

This line creates a unique list of postal codes from the filtered condo resale data for geocoding.

### **Geocoding Using OneMap API**

```{r}
url <- "https://onemap.gov.sg/api/common/elastic/search"
found <- data.frame()
not_found <- data.frame()

for (postcode in postcode){
  query <- list('searchVal'=postcode, 'returnGeom'='Y', 
                'getAddrDetails'='Y', 'pageNum'='1')
  res <- GET(url, query=query)
  if ((content(res)$found)!=0){
    found <- rbind(found, data.frame(content(res))[4:13])
  } else {not_found = data.frame(postcode)
  }
}
```

This loop sends a request for each unique postal code to the OneMap API to obtain coordinates. It checks if a result was found:

-   If found, relevant data (columns 4 to 13) is added to the `found` data frame.

-   If not found, the postal code is added to the `not_found` data frame.

### **Selecting and Renaming Geocoded Data Columns**

```{r}
found <- found %>%
  select(c(6:8)) %>%
  rename(POSTAL = `results.POSTAL`,
         XCOORD = `results.X`,
         YCOORD = `results.Y`)
```

This code keeps only the essential columns (`POSTAL`, `XCOORD`, and `YCOORD`) from the geocoded data and renames them for clarity.

### **Joining Geocoded Coordinates with Condo Resale Data**

```{r}
condo_resale_geocoded = left_join(
  condo_resale, found, 
  by = c('Postal Code' = 'POSTAL'))
```

Using a left join, this merges the geocoded coordinates with the condo resale data based on the postal code.

### **Converting Data Frame to Spatial Object**

```{r}
condo_resale_sf <- st_as_sf(condo_resale_geocoded, 
                            coords = c("XCOORD",
                                       "YCOORD"),
                            crs=3414)
```

This line converts the merged data frame into an `sf` object with the specified coordinate reference system (CRS: EPSG 3414, SVY21).

### **Identifying Overlapping Points**

```{r}
overlapping_points <- condo_resale_sf %>%
  mutate(overlap = lengths(st_equals(., .)) > 1)
```

This code identifies points that overlap with others by checking for geometrically identical points (using `st_equals`). It adds an `overlap` column that marks overlapping points as `TRUE`.

### **Applying Jitter to Overlapping Points**

```{r}
condo_resale_sf <- condo_resale_sf %>%
  st_jitter(amount = 2)
```

To visually separate overlapping points on a map, a small random offset (jitter) is applied to each pointâ€™s coordinates by 2 meters. This improves spatial visualization by preventing points from stacking directly on top of each other.
